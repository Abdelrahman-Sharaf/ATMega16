
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000029f8  00002a8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800072  00800072  00002a9e  2**0
                  ALLOC
  3 .stab         00002c58  00000000  00000000  00002aa0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001216  00000000  00000000  000056f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000690e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00006a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00006bfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00008c42  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00009d43  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000acc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000ae48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000b10a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b998  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 38 09 	jmp	0x1270	; 0x1270 <__vector_1>
       8:	0c 94 6f 09 	jmp	0x12de	; 0x12de <__vector_2>
       c:	0c 94 a6 09 	jmp	0x134c	; 0x134c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 a1 13 	jmp	0x2742	; 0x2742 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ef       	ldi	r30, 0xF8	; 248
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 38       	cpi	r26, 0x82	; 130
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <main>
      8a:	0c 94 fa 14 	jmp	0x29f4	; 0x29f4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c3 14 	jmp	0x2986	; 0x2986 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 df 14 	jmp	0x29be	; 0x29be <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 cf 14 	jmp	0x299e	; 0x299e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 cf 14 	jmp	0x299e	; 0x299e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c3 14 	jmp	0x2986	; 0x2986 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 df 14 	jmp	0x29be	; 0x29be <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 cb 14 	jmp	0x2996	; 0x2996 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e7 14 	jmp	0x29ce	; 0x29ce <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 cf 14 	jmp	0x299e	; 0x299e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 cf 14 	jmp	0x299e	; 0x299e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 cf 14 	jmp	0x299e	; 0x299e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 d3 14 	jmp	0x29a6	; 0x29a6 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 ef 14 	jmp	0x29de	; 0x29de <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <GIE_enuEnable>:

#include"GIE_priv.h"


ES_t GIE_enuEnable( void )
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	0f 92       	push	r0
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_OK ;
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	89 83       	std	Y+1, r24	; 0x01

	SREG  |=(GIE_MASK_BIT<<I);
     cac:	af e5       	ldi	r26, 0x5F	; 95
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	ef e5       	ldi	r30, 0x5F	; 95
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	80 68       	ori	r24, 0x80	; 128
     cb8:	8c 93       	st	X, r24


	return Local_enuErrorState ;
     cba:	89 81       	ldd	r24, Y+1	; 0x01
}
     cbc:	0f 90       	pop	r0
     cbe:	cf 91       	pop	r28
     cc0:	df 91       	pop	r29
     cc2:	08 95       	ret

00000cc4 <GIE_enuDisable>:
ES_t GIE_enuDisable( void )
{
     cc4:	df 93       	push	r29
     cc6:	cf 93       	push	r28
     cc8:	0f 92       	push	r0
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_OK ;
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	89 83       	std	Y+1, r24	; 0x01

	SREG  &=~(GIE_MASK_BIT<<I);
     cd2:	af e5       	ldi	r26, 0x5F	; 95
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	ef e5       	ldi	r30, 0x5F	; 95
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	8f 77       	andi	r24, 0x7F	; 127
     cde:	8c 93       	st	X, r24


	return Local_enuErrorState ;
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
}
     ce2:	0f 90       	pop	r0
     ce4:	cf 91       	pop	r28
     ce6:	df 91       	pop	r29
     ce8:	08 95       	ret

00000cea <EXTI_enuInit>:
/* Description     : Utility function to initialize the Enabled interrupts. */
/* Argument        : Address array of interrupts .                          */
/* Return          : Error state of type ES_t.                              */
/**............................................******************************/
ES_t   EXTI_enuInit( EXTI_t*  Cpy_pstrEXTICnfg )
{
     cea:	df 93       	push	r29
     cec:	cf 93       	push	r28
     cee:	cd b7       	in	r28, 0x3d	; 61
     cf0:	de b7       	in	r29, 0x3e	; 62
     cf2:	2c 97       	sbiw	r28, 0x0c	; 12
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	f8 94       	cli
     cf8:	de bf       	out	0x3e, r29	; 62
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	cd bf       	out	0x3d, r28	; 61
     cfe:	9c 83       	std	Y+4, r25	; 0x04
     d00:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK ;
     d02:	1a 82       	std	Y+2, r1	; 0x02


	if( Cpy_pstrEXTICnfg != NULL )
     d04:	8b 81       	ldd	r24, Y+3	; 0x03
     d06:	9c 81       	ldd	r25, Y+4	; 0x04
     d08:	00 97       	sbiw	r24, 0x00	; 0
     d0a:	09 f4       	brne	.+2      	; 0xd0e <EXTI_enuInit+0x24>
     d0c:	0c c1       	rjmp	.+536    	; 0xf26 <EXTI_enuInit+0x23c>
	{
		u8 Local_u8Iterator = 0;
     d0e:	19 82       	std	Y+1, r1	; 0x01

		for( Local_u8Iterator = 0 ; Local_u8Iterator < EXTI_NUM ; Local_u8Iterator++ )
     d10:	19 82       	std	Y+1, r1	; 0x01
     d12:	04 c1       	rjmp	.+520    	; 0xf1c <EXTI_enuInit+0x232>
		{

			if( Cpy_pstrEXTICnfg[Local_u8Iterator].EXTI_u8State == EXTI_ACTIVE )
     d14:	89 81       	ldd	r24, Y+1	; 0x01
     d16:	88 2f       	mov	r24, r24
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	9c 01       	movw	r18, r24
     d1c:	22 0f       	add	r18, r18
     d1e:	33 1f       	adc	r19, r19
     d20:	8b 81       	ldd	r24, Y+3	; 0x03
     d22:	9c 81       	ldd	r25, Y+4	; 0x04
     d24:	fc 01       	movw	r30, r24
     d26:	e2 0f       	add	r30, r18
     d28:	f3 1f       	adc	r31, r19
     d2a:	80 81       	ld	r24, Z
     d2c:	81 30       	cpi	r24, 0x01	; 1
     d2e:	09 f0       	breq	.+2      	; 0xd32 <EXTI_enuInit+0x48>
     d30:	f2 c0       	rjmp	.+484    	; 0xf16 <EXTI_enuInit+0x22c>
			{
				// Enable the appropriate interrupt in each iteration.
				switch(Local_u8Iterator)
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	28 2f       	mov	r18, r24
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	3c 87       	std	Y+12, r19	; 0x0c
     d3a:	2b 87       	std	Y+11, r18	; 0x0b
     d3c:	8b 85       	ldd	r24, Y+11	; 0x0b
     d3e:	9c 85       	ldd	r25, Y+12	; 0x0c
     d40:	81 30       	cpi	r24, 0x01	; 1
     d42:	91 05       	cpc	r25, r1
     d44:	09 f4       	brne	.+2      	; 0xd48 <EXTI_enuInit+0x5e>
     d46:	5e c0       	rjmp	.+188    	; 0xe04 <EXTI_enuInit+0x11a>
     d48:	2b 85       	ldd	r18, Y+11	; 0x0b
     d4a:	3c 85       	ldd	r19, Y+12	; 0x0c
     d4c:	22 30       	cpi	r18, 0x02	; 2
     d4e:	31 05       	cpc	r19, r1
     d50:	09 f4       	brne	.+2      	; 0xd54 <EXTI_enuInit+0x6a>
     d52:	ab c0       	rjmp	.+342    	; 0xeaa <EXTI_enuInit+0x1c0>
     d54:	8b 85       	ldd	r24, Y+11	; 0x0b
     d56:	9c 85       	ldd	r25, Y+12	; 0x0c
     d58:	00 97       	sbiw	r24, 0x00	; 0
     d5a:	09 f0       	breq	.+2      	; 0xd5e <EXTI_enuInit+0x74>
     d5c:	d9 c0       	rjmp	.+434    	; 0xf10 <EXTI_enuInit+0x226>

				/*********************************************************
				 * Configure the interrupt0 and Handling it's cases.     *
				 *********************************************************/
				case EXTI0 :
					MCUCR  &= ~( (EXTI_MASK_BIT<<ISC00) | (EXTI_MASK_BIT<<ISC01) );
     d5e:	a5 e5       	ldi	r26, 0x55	; 85
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e5 e5       	ldi	r30, 0x55	; 85
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	8c 7f       	andi	r24, 0xFC	; 252
     d6a:	8c 93       	st	X, r24

					switch(Cpy_pstrEXTICnfg[Local_u8Iterator].EXTI_u8SenceLevel)
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
     d6e:	88 2f       	mov	r24, r24
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	9c 01       	movw	r18, r24
     d74:	22 0f       	add	r18, r18
     d76:	33 1f       	adc	r19, r19
     d78:	8b 81       	ldd	r24, Y+3	; 0x03
     d7a:	9c 81       	ldd	r25, Y+4	; 0x04
     d7c:	fc 01       	movw	r30, r24
     d7e:	e2 0f       	add	r30, r18
     d80:	f3 1f       	adc	r31, r19
     d82:	81 81       	ldd	r24, Z+1	; 0x01
     d84:	28 2f       	mov	r18, r24
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	3a 87       	std	Y+10, r19	; 0x0a
     d8a:	29 87       	std	Y+9, r18	; 0x09
     d8c:	89 85       	ldd	r24, Y+9	; 0x09
     d8e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d90:	81 30       	cpi	r24, 0x01	; 1
     d92:	91 05       	cpc	r25, r1
     d94:	e9 f0       	breq	.+58     	; 0xdd0 <EXTI_enuInit+0xe6>
     d96:	29 85       	ldd	r18, Y+9	; 0x09
     d98:	3a 85       	ldd	r19, Y+10	; 0x0a
     d9a:	22 30       	cpi	r18, 0x02	; 2
     d9c:	31 05       	cpc	r19, r1
     d9e:	2c f4       	brge	.+10     	; 0xdaa <EXTI_enuInit+0xc0>
     da0:	89 85       	ldd	r24, Y+9	; 0x09
     da2:	9a 85       	ldd	r25, Y+10	; 0x0a
     da4:	00 97       	sbiw	r24, 0x00	; 0
     da6:	61 f0       	breq	.+24     	; 0xdc0 <EXTI_enuInit+0xd6>
     da8:	23 c0       	rjmp	.+70     	; 0xdf0 <EXTI_enuInit+0x106>
     daa:	29 85       	ldd	r18, Y+9	; 0x09
     dac:	3a 85       	ldd	r19, Y+10	; 0x0a
     dae:	22 30       	cpi	r18, 0x02	; 2
     db0:	31 05       	cpc	r19, r1
     db2:	b1 f0       	breq	.+44     	; 0xde0 <EXTI_enuInit+0xf6>
     db4:	89 85       	ldd	r24, Y+9	; 0x09
     db6:	9a 85       	ldd	r25, Y+10	; 0x0a
     db8:	83 30       	cpi	r24, 0x03	; 3
     dba:	91 05       	cpc	r25, r1
     dbc:	d9 f0       	breq	.+54     	; 0xdf4 <EXTI_enuInit+0x10a>
     dbe:	18 c0       	rjmp	.+48     	; 0xdf0 <EXTI_enuInit+0x106>
					{
					case EXTI_RISING_EDGE :
						MCUCR   |= (EXTI_MASK_BIT<<ISC00 )|(EXTI_MASK_BIT<<ISC01 );
     dc0:	a5 e5       	ldi	r26, 0x55	; 85
     dc2:	b0 e0       	ldi	r27, 0x00	; 0
     dc4:	e5 e5       	ldi	r30, 0x55	; 85
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	83 60       	ori	r24, 0x03	; 3
     dcc:	8c 93       	st	X, r24
     dce:	12 c0       	rjmp	.+36     	; 0xdf4 <EXTI_enuInit+0x10a>
						break;

					case EXTI_FALLING_EDGE :
						MCUCR   |=  (EXTI_MASK_BIT<<ISC01 );
     dd0:	a5 e5       	ldi	r26, 0x55	; 85
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	e5 e5       	ldi	r30, 0x55	; 85
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	82 60       	ori	r24, 0x02	; 2
     ddc:	8c 93       	st	X, r24
     dde:	0a c0       	rjmp	.+20     	; 0xdf4 <EXTI_enuInit+0x10a>
						break;

					case  EXTI_LOGIC_CHANGE:
						MCUCR   |=  (EXTI_MASK_BIT<<ISC00 );
     de0:	a5 e5       	ldi	r26, 0x55	; 85
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	e5 e5       	ldi	r30, 0x55	; 85
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	81 60       	ori	r24, 0x01	; 1
     dec:	8c 93       	st	X, r24
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <EXTI_enuInit+0x10a>

					case EXTI_LOW_LEVEL :
						break;

					default:
						Local_enuErrorState = ES_OUT_OF_RANGE ;
     df0:	83 e0       	ldi	r24, 0x03	; 3
     df2:	8a 83       	std	Y+2, r24	; 0x02


					}

					//Enable the ENT0.
					GICR |=(EXTI_MASK_BIT<<INT0);
     df4:	ab e5       	ldi	r26, 0x5B	; 91
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	eb e5       	ldi	r30, 0x5B	; 91
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	80 64       	ori	r24, 0x40	; 64
     e00:	8c 93       	st	X, r24
     e02:	88 c0       	rjmp	.+272    	; 0xf14 <EXTI_enuInit+0x22a>

					/*********************************************************
					 * Configure the interrupt1 and Handling it's cases.     *
					 *********************************************************/
					case EXTI1 :
						MCUCR  &= ~( (EXTI_MASK_BIT<<ISC10) | (EXTI_MASK_BIT<<ISC11) );
     e04:	a5 e5       	ldi	r26, 0x55	; 85
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	e5 e5       	ldi	r30, 0x55	; 85
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	83 7f       	andi	r24, 0xF3	; 243
     e10:	8c 93       	st	X, r24

						switch(Cpy_pstrEXTICnfg[Local_u8Iterator].EXTI_u8SenceLevel)
     e12:	89 81       	ldd	r24, Y+1	; 0x01
     e14:	88 2f       	mov	r24, r24
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	9c 01       	movw	r18, r24
     e1a:	22 0f       	add	r18, r18
     e1c:	33 1f       	adc	r19, r19
     e1e:	8b 81       	ldd	r24, Y+3	; 0x03
     e20:	9c 81       	ldd	r25, Y+4	; 0x04
     e22:	fc 01       	movw	r30, r24
     e24:	e2 0f       	add	r30, r18
     e26:	f3 1f       	adc	r31, r19
     e28:	81 81       	ldd	r24, Z+1	; 0x01
     e2a:	28 2f       	mov	r18, r24
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	38 87       	std	Y+8, r19	; 0x08
     e30:	2f 83       	std	Y+7, r18	; 0x07
     e32:	8f 81       	ldd	r24, Y+7	; 0x07
     e34:	98 85       	ldd	r25, Y+8	; 0x08
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	91 05       	cpc	r25, r1
     e3a:	e9 f0       	breq	.+58     	; 0xe76 <EXTI_enuInit+0x18c>
     e3c:	2f 81       	ldd	r18, Y+7	; 0x07
     e3e:	38 85       	ldd	r19, Y+8	; 0x08
     e40:	22 30       	cpi	r18, 0x02	; 2
     e42:	31 05       	cpc	r19, r1
     e44:	2c f4       	brge	.+10     	; 0xe50 <EXTI_enuInit+0x166>
     e46:	8f 81       	ldd	r24, Y+7	; 0x07
     e48:	98 85       	ldd	r25, Y+8	; 0x08
     e4a:	00 97       	sbiw	r24, 0x00	; 0
     e4c:	61 f0       	breq	.+24     	; 0xe66 <EXTI_enuInit+0x17c>
     e4e:	23 c0       	rjmp	.+70     	; 0xe96 <EXTI_enuInit+0x1ac>
     e50:	2f 81       	ldd	r18, Y+7	; 0x07
     e52:	38 85       	ldd	r19, Y+8	; 0x08
     e54:	22 30       	cpi	r18, 0x02	; 2
     e56:	31 05       	cpc	r19, r1
     e58:	b1 f0       	breq	.+44     	; 0xe86 <EXTI_enuInit+0x19c>
     e5a:	8f 81       	ldd	r24, Y+7	; 0x07
     e5c:	98 85       	ldd	r25, Y+8	; 0x08
     e5e:	83 30       	cpi	r24, 0x03	; 3
     e60:	91 05       	cpc	r25, r1
     e62:	d9 f0       	breq	.+54     	; 0xe9a <EXTI_enuInit+0x1b0>
     e64:	18 c0       	rjmp	.+48     	; 0xe96 <EXTI_enuInit+0x1ac>
						{
						case EXTI_RISING_EDGE :
							MCUCR   |= (EXTI_MASK_BIT<<ISC10 )|(EXTI_MASK_BIT<<ISC11 );
     e66:	a5 e5       	ldi	r26, 0x55	; 85
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e5 e5       	ldi	r30, 0x55	; 85
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	8c 60       	ori	r24, 0x0C	; 12
     e72:	8c 93       	st	X, r24
     e74:	12 c0       	rjmp	.+36     	; 0xe9a <EXTI_enuInit+0x1b0>
							break;

						case EXTI_FALLING_EDGE :
							MCUCR   |=  (EXTI_MASK_BIT<<ISC11 );
     e76:	a5 e5       	ldi	r26, 0x55	; 85
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e5 e5       	ldi	r30, 0x55	; 85
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	88 60       	ori	r24, 0x08	; 8
     e82:	8c 93       	st	X, r24
     e84:	0a c0       	rjmp	.+20     	; 0xe9a <EXTI_enuInit+0x1b0>
							break;

						case  EXTI_LOGIC_CHANGE:
							MCUCR   |=  (EXTI_MASK_BIT<<ISC10 );
     e86:	a5 e5       	ldi	r26, 0x55	; 85
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	e5 e5       	ldi	r30, 0x55	; 85
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	84 60       	ori	r24, 0x04	; 4
     e92:	8c 93       	st	X, r24
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <EXTI_enuInit+0x1b0>

						case EXTI_LOW_LEVEL :
							break;

						default:
							Local_enuErrorState = ES_OUT_OF_RANGE ;
     e96:	83 e0       	ldi	r24, 0x03	; 3
     e98:	8a 83       	std	Y+2, r24	; 0x02
						}

						//Enable the ENT1.
						GICR |=(EXTI_MASK_BIT<<INT1);
     e9a:	ab e5       	ldi	r26, 0x5B	; 91
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	eb e5       	ldi	r30, 0x5B	; 91
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	80 68       	ori	r24, 0x80	; 128
     ea6:	8c 93       	st	X, r24
     ea8:	35 c0       	rjmp	.+106    	; 0xf14 <EXTI_enuInit+0x22a>

						/*********************************************************
						 * Configure the interrupt2 and Handling it's cases.     *
						 *********************************************************/
						case EXTI2 :
							MCUCSR  &= ~(EXTI_MASK_BIT<<ISC2) ;
     eaa:	a4 e5       	ldi	r26, 0x54	; 84
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e4 e5       	ldi	r30, 0x54	; 84
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	8f 7b       	andi	r24, 0xBF	; 191
     eb6:	8c 93       	st	X, r24

							switch(Cpy_pstrEXTICnfg[Local_u8Iterator].EXTI_u8SenceLevel)
     eb8:	89 81       	ldd	r24, Y+1	; 0x01
     eba:	88 2f       	mov	r24, r24
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	9c 01       	movw	r18, r24
     ec0:	22 0f       	add	r18, r18
     ec2:	33 1f       	adc	r19, r19
     ec4:	8b 81       	ldd	r24, Y+3	; 0x03
     ec6:	9c 81       	ldd	r25, Y+4	; 0x04
     ec8:	fc 01       	movw	r30, r24
     eca:	e2 0f       	add	r30, r18
     ecc:	f3 1f       	adc	r31, r19
     ece:	81 81       	ldd	r24, Z+1	; 0x01
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	3e 83       	std	Y+6, r19	; 0x06
     ed6:	2d 83       	std	Y+5, r18	; 0x05
     ed8:	8d 81       	ldd	r24, Y+5	; 0x05
     eda:	9e 81       	ldd	r25, Y+6	; 0x06
     edc:	00 97       	sbiw	r24, 0x00	; 0
     ede:	31 f0       	breq	.+12     	; 0xeec <EXTI_enuInit+0x202>
     ee0:	2d 81       	ldd	r18, Y+5	; 0x05
     ee2:	3e 81       	ldd	r19, Y+6	; 0x06
     ee4:	21 30       	cpi	r18, 0x01	; 1
     ee6:	31 05       	cpc	r19, r1
     ee8:	59 f0       	breq	.+22     	; 0xf00 <EXTI_enuInit+0x216>
     eea:	08 c0       	rjmp	.+16     	; 0xefc <EXTI_enuInit+0x212>
							{
							case EXTI_RISING_EDGE :
								MCUCSR   |= (EXTI_MASK_BIT<<ISC2 );
     eec:	a4 e5       	ldi	r26, 0x54	; 84
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	e4 e5       	ldi	r30, 0x54	; 84
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	80 64       	ori	r24, 0x40	; 64
     ef8:	8c 93       	st	X, r24
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <EXTI_enuInit+0x216>

							case EXTI_FALLING_EDGE :
								break;

							default:
								Local_enuErrorState = ES_OUT_OF_RANGE ;
     efc:	83 e0       	ldi	r24, 0x03	; 3
     efe:	8a 83       	std	Y+2, r24	; 0x02
							}

							//Enable the ENT2.
							GICR |=(EXTI_MASK_BIT<<INT2);
     f00:	ab e5       	ldi	r26, 0x5B	; 91
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	eb e5       	ldi	r30, 0x5B	; 91
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	80 62       	ori	r24, 0x20	; 32
     f0c:	8c 93       	st	X, r24
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <EXTI_enuInit+0x22a>
							break;



							default:
								Local_enuErrorState = ES_OUT_OF_RANGE ;
     f10:	83 e0       	ldi	r24, 0x03	; 3
     f12:	8a 83       	std	Y+2, r24	; 0x02

				}//End of outer Switch case.

				Local_enuErrorState = ES_NOK ;
     f14:	1a 82       	std	Y+2, r1	; 0x02

	if( Cpy_pstrEXTICnfg != NULL )
	{
		u8 Local_u8Iterator = 0;

		for( Local_u8Iterator = 0 ; Local_u8Iterator < EXTI_NUM ; Local_u8Iterator++ )
     f16:	89 81       	ldd	r24, Y+1	; 0x01
     f18:	8f 5f       	subi	r24, 0xFF	; 255
     f1a:	89 83       	std	Y+1, r24	; 0x01
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	88 23       	and	r24, r24
     f20:	09 f4       	brne	.+2      	; 0xf24 <EXTI_enuInit+0x23a>
     f22:	f8 ce       	rjmp	.-528    	; 0xd14 <EXTI_enuInit+0x2a>
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <EXTI_enuInit+0x240>
		}

	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER ;
     f26:	82 e0       	ldi	r24, 0x02	; 2
     f28:	8a 83       	std	Y+2, r24	; 0x02
	}


	return Local_enuErrorState;
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
}//End of EXTI_enuInit.
     f2c:	2c 96       	adiw	r28, 0x0c	; 12
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	f8 94       	cli
     f32:	de bf       	out	0x3e, r29	; 62
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	cd bf       	out	0x3d, r28	; 61
     f38:	cf 91       	pop	r28
     f3a:	df 91       	pop	r29
     f3c:	08 95       	ret

00000f3e <EXTI_enuSetSenceMode>:
/*                                  FALLING_EDGE                            */
/*                                                                          */
/* Return          : Error state of type ES_t.                              */
/*..........................*************************************************/
ES_t   EXTI_enuSetSenceMode( u8 Cpy_u8EXTI_ID  , u8 Cpy_u8SenceLevel )
{
     f3e:	df 93       	push	r29
     f40:	cf 93       	push	r28
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62
     f46:	2b 97       	sbiw	r28, 0x0b	; 11
     f48:	0f b6       	in	r0, 0x3f	; 63
     f4a:	f8 94       	cli
     f4c:	de bf       	out	0x3e, r29	; 62
     f4e:	0f be       	out	0x3f, r0	; 63
     f50:	cd bf       	out	0x3d, r28	; 61
     f52:	8a 83       	std	Y+2, r24	; 0x02
     f54:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK ;
     f56:	19 82       	std	Y+1, r1	; 0x01

	if(Cpy_u8EXTI_ID <= EXTI_NUM )
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	82 30       	cpi	r24, 0x02	; 2
     f5c:	08 f0       	brcs	.+2      	; 0xf60 <EXTI_enuSetSenceMode+0x22>
     f5e:	bd c0       	rjmp	.+378    	; 0x10da <EXTI_enuSetSenceMode+0x19c>
	{

		switch( Cpy_u8EXTI_ID )
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	3b 87       	std	Y+11, r19	; 0x0b
     f68:	2a 87       	std	Y+10, r18	; 0x0a
     f6a:	8a 85       	ldd	r24, Y+10	; 0x0a
     f6c:	9b 85       	ldd	r25, Y+11	; 0x0b
     f6e:	81 30       	cpi	r24, 0x01	; 1
     f70:	91 05       	cpc	r25, r1
     f72:	09 f4       	brne	.+2      	; 0xf76 <EXTI_enuSetSenceMode+0x38>
     f74:	4d c0       	rjmp	.+154    	; 0x1010 <EXTI_enuSetSenceMode+0xd2>
     f76:	2a 85       	ldd	r18, Y+10	; 0x0a
     f78:	3b 85       	ldd	r19, Y+11	; 0x0b
     f7a:	22 30       	cpi	r18, 0x02	; 2
     f7c:	31 05       	cpc	r19, r1
     f7e:	09 f4       	brne	.+2      	; 0xf82 <EXTI_enuSetSenceMode+0x44>
     f80:	88 c0       	rjmp	.+272    	; 0x1092 <EXTI_enuSetSenceMode+0x154>
     f82:	8a 85       	ldd	r24, Y+10	; 0x0a
     f84:	9b 85       	ldd	r25, Y+11	; 0x0b
     f86:	00 97       	sbiw	r24, 0x00	; 0
     f88:	09 f0       	breq	.+2      	; 0xf8c <EXTI_enuSetSenceMode+0x4e>
     f8a:	a4 c0       	rjmp	.+328    	; 0x10d4 <EXTI_enuSetSenceMode+0x196>
		{
		/*****************************************************************
		 * Interrupt0  Sense Control Cases Handling.                     *
		 *****************************************************************/
		case EXTI0:
			MCUCR  &= ~( (EXTI_MASK_BIT<<ISC00) | (EXTI_MASK_BIT<<ISC01) );
     f8c:	a5 e5       	ldi	r26, 0x55	; 85
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e5 e5       	ldi	r30, 0x55	; 85
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	8c 7f       	andi	r24, 0xFC	; 252
     f98:	8c 93       	st	X, r24

			switch(Cpy_u8SenceLevel)
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	39 87       	std	Y+9, r19	; 0x09
     fa2:	28 87       	std	Y+8, r18	; 0x08
     fa4:	88 85       	ldd	r24, Y+8	; 0x08
     fa6:	99 85       	ldd	r25, Y+9	; 0x09
     fa8:	81 30       	cpi	r24, 0x01	; 1
     faa:	91 05       	cpc	r25, r1
     fac:	f1 f0       	breq	.+60     	; 0xfea <EXTI_enuSetSenceMode+0xac>
     fae:	28 85       	ldd	r18, Y+8	; 0x08
     fb0:	39 85       	ldd	r19, Y+9	; 0x09
     fb2:	22 30       	cpi	r18, 0x02	; 2
     fb4:	31 05       	cpc	r19, r1
     fb6:	2c f4       	brge	.+10     	; 0xfc2 <EXTI_enuSetSenceMode+0x84>
     fb8:	88 85       	ldd	r24, Y+8	; 0x08
     fba:	99 85       	ldd	r25, Y+9	; 0x09
     fbc:	00 97       	sbiw	r24, 0x00	; 0
     fbe:	69 f0       	breq	.+26     	; 0xfda <EXTI_enuSetSenceMode+0x9c>
     fc0:	24 c0       	rjmp	.+72     	; 0x100a <EXTI_enuSetSenceMode+0xcc>
     fc2:	28 85       	ldd	r18, Y+8	; 0x08
     fc4:	39 85       	ldd	r19, Y+9	; 0x09
     fc6:	22 30       	cpi	r18, 0x02	; 2
     fc8:	31 05       	cpc	r19, r1
     fca:	b9 f0       	breq	.+46     	; 0xffa <EXTI_enuSetSenceMode+0xbc>
     fcc:	88 85       	ldd	r24, Y+8	; 0x08
     fce:	99 85       	ldd	r25, Y+9	; 0x09
     fd0:	83 30       	cpi	r24, 0x03	; 3
     fd2:	91 05       	cpc	r25, r1
     fd4:	09 f4       	brne	.+2      	; 0xfd8 <EXTI_enuSetSenceMode+0x9a>
     fd6:	7e c0       	rjmp	.+252    	; 0x10d4 <EXTI_enuSetSenceMode+0x196>
     fd8:	18 c0       	rjmp	.+48     	; 0x100a <EXTI_enuSetSenceMode+0xcc>
			{
			case EXTI_RISING_EDGE :
				MCUCR   |= (EXTI_MASK_BIT<<ISC00 )|(EXTI_MASK_BIT<<ISC01 );
     fda:	a5 e5       	ldi	r26, 0x55	; 85
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e5 e5       	ldi	r30, 0x55	; 85
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	83 60       	ori	r24, 0x03	; 3
     fe6:	8c 93       	st	X, r24
     fe8:	75 c0       	rjmp	.+234    	; 0x10d4 <EXTI_enuSetSenceMode+0x196>
				break;

			case EXTI_FALLING_EDGE :
				MCUCR   |=  (EXTI_MASK_BIT<<ISC01 );
     fea:	a5 e5       	ldi	r26, 0x55	; 85
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	e5 e5       	ldi	r30, 0x55	; 85
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	82 60       	ori	r24, 0x02	; 2
     ff6:	8c 93       	st	X, r24
     ff8:	6d c0       	rjmp	.+218    	; 0x10d4 <EXTI_enuSetSenceMode+0x196>
				break;

			case  EXTI_LOGIC_CHANGE:
				MCUCR   |=  (EXTI_MASK_BIT<<ISC00 );
     ffa:	a5 e5       	ldi	r26, 0x55	; 85
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e5 e5       	ldi	r30, 0x55	; 85
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	81 60       	ori	r24, 0x01	; 1
    1006:	8c 93       	st	X, r24
    1008:	65 c0       	rjmp	.+202    	; 0x10d4 <EXTI_enuSetSenceMode+0x196>

			case EXTI_LOW_LEVEL :
				break;

			default:
				Local_enuErrorState = ES_OUT_OF_RANGE ;
    100a:	83 e0       	ldi	r24, 0x03	; 3
    100c:	89 83       	std	Y+1, r24	; 0x01
    100e:	62 c0       	rjmp	.+196    	; 0x10d4 <EXTI_enuSetSenceMode+0x196>

			/*****************************************************************
			 * Interrupt1  Sense Control Cases Handling.                     *
			 *****************************************************************/
			case EXTI1:
				MCUCR  &= ~( (EXTI_MASK_BIT<<ISC10) | (EXTI_MASK_BIT<<ISC11) );
    1010:	a5 e5       	ldi	r26, 0x55	; 85
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	e5 e5       	ldi	r30, 0x55	; 85
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	83 7f       	andi	r24, 0xF3	; 243
    101c:	8c 93       	st	X, r24
				switch(Cpy_u8SenceLevel)
    101e:	8b 81       	ldd	r24, Y+3	; 0x03
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	3f 83       	std	Y+7, r19	; 0x07
    1026:	2e 83       	std	Y+6, r18	; 0x06
    1028:	8e 81       	ldd	r24, Y+6	; 0x06
    102a:	9f 81       	ldd	r25, Y+7	; 0x07
    102c:	81 30       	cpi	r24, 0x01	; 1
    102e:	91 05       	cpc	r25, r1
    1030:	e9 f0       	breq	.+58     	; 0x106c <EXTI_enuSetSenceMode+0x12e>
    1032:	2e 81       	ldd	r18, Y+6	; 0x06
    1034:	3f 81       	ldd	r19, Y+7	; 0x07
    1036:	22 30       	cpi	r18, 0x02	; 2
    1038:	31 05       	cpc	r19, r1
    103a:	2c f4       	brge	.+10     	; 0x1046 <EXTI_enuSetSenceMode+0x108>
    103c:	8e 81       	ldd	r24, Y+6	; 0x06
    103e:	9f 81       	ldd	r25, Y+7	; 0x07
    1040:	00 97       	sbiw	r24, 0x00	; 0
    1042:	61 f0       	breq	.+24     	; 0x105c <EXTI_enuSetSenceMode+0x11e>
    1044:	23 c0       	rjmp	.+70     	; 0x108c <EXTI_enuSetSenceMode+0x14e>
    1046:	2e 81       	ldd	r18, Y+6	; 0x06
    1048:	3f 81       	ldd	r19, Y+7	; 0x07
    104a:	22 30       	cpi	r18, 0x02	; 2
    104c:	31 05       	cpc	r19, r1
    104e:	b1 f0       	breq	.+44     	; 0x107c <EXTI_enuSetSenceMode+0x13e>
    1050:	8e 81       	ldd	r24, Y+6	; 0x06
    1052:	9f 81       	ldd	r25, Y+7	; 0x07
    1054:	83 30       	cpi	r24, 0x03	; 3
    1056:	91 05       	cpc	r25, r1
    1058:	e9 f1       	breq	.+122    	; 0x10d4 <EXTI_enuSetSenceMode+0x196>
    105a:	18 c0       	rjmp	.+48     	; 0x108c <EXTI_enuSetSenceMode+0x14e>
				{
				case EXTI_RISING_EDGE :
					MCUCR   |= (EXTI_MASK_BIT<<ISC10 )|(EXTI_MASK_BIT<<ISC11 );
    105c:	a5 e5       	ldi	r26, 0x55	; 85
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e5 e5       	ldi	r30, 0x55	; 85
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	8c 60       	ori	r24, 0x0C	; 12
    1068:	8c 93       	st	X, r24
    106a:	34 c0       	rjmp	.+104    	; 0x10d4 <EXTI_enuSetSenceMode+0x196>
					break;

				case EXTI_FALLING_EDGE :
					MCUCR   |=  (EXTI_MASK_BIT<<ISC11 );
    106c:	a5 e5       	ldi	r26, 0x55	; 85
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e5 e5       	ldi	r30, 0x55	; 85
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	88 60       	ori	r24, 0x08	; 8
    1078:	8c 93       	st	X, r24
    107a:	2c c0       	rjmp	.+88     	; 0x10d4 <EXTI_enuSetSenceMode+0x196>
					break;

				case  EXTI_LOGIC_CHANGE:
					MCUCR   |=  (EXTI_MASK_BIT<<ISC10 );
    107c:	a5 e5       	ldi	r26, 0x55	; 85
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e5 e5       	ldi	r30, 0x55	; 85
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	84 60       	ori	r24, 0x04	; 4
    1088:	8c 93       	st	X, r24
    108a:	24 c0       	rjmp	.+72     	; 0x10d4 <EXTI_enuSetSenceMode+0x196>

				case EXTI_LOW_LEVEL :
					break;

				default:
					Local_enuErrorState = ES_OUT_OF_RANGE ;
    108c:	83 e0       	ldi	r24, 0x03	; 3
    108e:	89 83       	std	Y+1, r24	; 0x01
    1090:	21 c0       	rjmp	.+66     	; 0x10d4 <EXTI_enuSetSenceMode+0x196>
				/*****************************************************************
				 * Interrupt2  Sense Control Cases Handling.                     *
				 *****************************************************************/
				case EXTI2:

					switch(Cpy_u8SenceLevel)
    1092:	8b 81       	ldd	r24, Y+3	; 0x03
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	3d 83       	std	Y+5, r19	; 0x05
    109a:	2c 83       	std	Y+4, r18	; 0x04
    109c:	8c 81       	ldd	r24, Y+4	; 0x04
    109e:	9d 81       	ldd	r25, Y+5	; 0x05
    10a0:	00 97       	sbiw	r24, 0x00	; 0
    10a2:	31 f0       	breq	.+12     	; 0x10b0 <EXTI_enuSetSenceMode+0x172>
    10a4:	2c 81       	ldd	r18, Y+4	; 0x04
    10a6:	3d 81       	ldd	r19, Y+5	; 0x05
    10a8:	21 30       	cpi	r18, 0x01	; 1
    10aa:	31 05       	cpc	r19, r1
    10ac:	49 f0       	breq	.+18     	; 0x10c0 <EXTI_enuSetSenceMode+0x182>
    10ae:	10 c0       	rjmp	.+32     	; 0x10d0 <EXTI_enuSetSenceMode+0x192>
					{
					case EXTI_RISING_EDGE :
						MCUCSR  |=(EXTI_MASK_BIT<<ISC2) ;
    10b0:	a4 e5       	ldi	r26, 0x54	; 84
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	e4 e5       	ldi	r30, 0x54	; 84
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	80 64       	ori	r24, 0x40	; 64
    10bc:	8c 93       	st	X, r24
    10be:	0a c0       	rjmp	.+20     	; 0x10d4 <EXTI_enuSetSenceMode+0x196>
						break;

					case EXTI_FALLING_EDGE :
						MCUCSR  &=~(EXTI_MASK_BIT<<ISC2) ;
    10c0:	a4 e5       	ldi	r26, 0x54	; 84
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	e4 e5       	ldi	r30, 0x54	; 84
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	8f 7b       	andi	r24, 0xBF	; 191
    10cc:	8c 93       	st	X, r24
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <EXTI_enuSetSenceMode+0x196>
						break;

					default:
						Local_enuErrorState = ES_OUT_OF_RANGE ;
    10d0:	83 e0       	ldi	r24, 0x03	; 3
    10d2:	89 83       	std	Y+1, r24	; 0x01
					break ;


		}

		Local_enuErrorState = ES_OK;
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	89 83       	std	Y+1, r24	; 0x01
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <EXTI_enuSetSenceMode+0x1a0>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    10da:	83 e0       	ldi	r24, 0x03	; 3
    10dc:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    10de:	89 81       	ldd	r24, Y+1	; 0x01

}//End of EXTI_enuSetSenceMode.
    10e0:	2b 96       	adiw	r28, 0x0b	; 11
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	f8 94       	cli
    10e6:	de bf       	out	0x3e, r29	; 62
    10e8:	0f be       	out	0x3f, r0	; 63
    10ea:	cd bf       	out	0x3d, r28	; 61
    10ec:	cf 91       	pop	r28
    10ee:	df 91       	pop	r29
    10f0:	08 95       	ret

000010f2 <EXTI_enuEnableINT>:
/*                                 EXTI_2 --->for interrupt_2                */
/*                                                                           */
/* Return          : Error state of type ES_t.                               */
/*.......................*****************************************************/
ES_t   EXTI_enuEnableINT( u8 Cpy_u8EXTI_ID  )
{
    10f2:	df 93       	push	r29
    10f4:	cf 93       	push	r28
    10f6:	00 d0       	rcall	.+0      	; 0x10f8 <EXTI_enuEnableINT+0x6>
    10f8:	00 d0       	rcall	.+0      	; 0x10fa <EXTI_enuEnableINT+0x8>
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
    10fe:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK ;
    1100:	19 82       	std	Y+1, r1	; 0x01

	if( Cpy_u8EXTI_ID < EXTI_NUM)
    1102:	8a 81       	ldd	r24, Y+2	; 0x02
    1104:	88 23       	and	r24, r24
    1106:	69 f5       	brne	.+90     	; 0x1162 <EXTI_enuEnableINT+0x70>
	{
		switch(Cpy_u8EXTI_ID)
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	3c 83       	std	Y+4, r19	; 0x04
    1110:	2b 83       	std	Y+3, r18	; 0x03
    1112:	8b 81       	ldd	r24, Y+3	; 0x03
    1114:	9c 81       	ldd	r25, Y+4	; 0x04
    1116:	81 30       	cpi	r24, 0x01	; 1
    1118:	91 05       	cpc	r25, r1
    111a:	89 f0       	breq	.+34     	; 0x113e <EXTI_enuEnableINT+0x4c>
    111c:	2b 81       	ldd	r18, Y+3	; 0x03
    111e:	3c 81       	ldd	r19, Y+4	; 0x04
    1120:	22 30       	cpi	r18, 0x02	; 2
    1122:	31 05       	cpc	r19, r1
    1124:	a1 f0       	breq	.+40     	; 0x114e <EXTI_enuEnableINT+0x5c>
    1126:	8b 81       	ldd	r24, Y+3	; 0x03
    1128:	9c 81       	ldd	r25, Y+4	; 0x04
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	b9 f4       	brne	.+46     	; 0x115c <EXTI_enuEnableINT+0x6a>
		{

		case EXTI0:
			//Enable interrupt 0 .
			GICR |= (EXTI_MASK_BIT<< INT0);
    112e:	ab e5       	ldi	r26, 0x5B	; 91
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	eb e5       	ldi	r30, 0x5B	; 91
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	80 64       	ori	r24, 0x40	; 64
    113a:	8c 93       	st	X, r24
    113c:	0f c0       	rjmp	.+30     	; 0x115c <EXTI_enuEnableINT+0x6a>
			break;

		case EXTI1:
			//Enable interrupt 1 .
			GICR |= (EXTI_MASK_BIT<< INT1);
    113e:	ab e5       	ldi	r26, 0x5B	; 91
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	eb e5       	ldi	r30, 0x5B	; 91
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	80 68       	ori	r24, 0x80	; 128
    114a:	8c 93       	st	X, r24
    114c:	07 c0       	rjmp	.+14     	; 0x115c <EXTI_enuEnableINT+0x6a>
			break;

		case EXTI2:
			//Enable interrupt 2 .
			GICR |= (EXTI_MASK_BIT<< INT2);
    114e:	ab e5       	ldi	r26, 0x5B	; 91
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	eb e5       	ldi	r30, 0x5B	; 91
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	80 62       	ori	r24, 0x20	; 32
    115a:	8c 93       	st	X, r24
			break;

		}
		Local_enuErrorState = ES_OK  ;
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	89 83       	std	Y+1, r24	; 0x01
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <EXTI_enuEnableINT+0x74>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE ;
    1162:	83 e0       	ldi	r24, 0x03	; 3
    1164:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1166:	89 81       	ldd	r24, Y+1	; 0x01
}
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	0f 90       	pop	r0
    1170:	cf 91       	pop	r28
    1172:	df 91       	pop	r29
    1174:	08 95       	ret

00001176 <EXTI_enuDisableINT>:
/*                                 EXTI_2 --->for interrupt_2                */
/*                                                                           */
/* Return          : Error state of type ES_t.                               */
/*.......................*****************************************************/
ES_t   EXTI_enuDisableINT(   u8 Cpy_u8EXTI_ID  )
{
    1176:	df 93       	push	r29
    1178:	cf 93       	push	r28
    117a:	00 d0       	rcall	.+0      	; 0x117c <EXTI_enuDisableINT+0x6>
    117c:	00 d0       	rcall	.+0      	; 0x117e <EXTI_enuDisableINT+0x8>
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    1182:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK ;
    1184:	19 82       	std	Y+1, r1	; 0x01

	if( Cpy_u8EXTI_ID < EXTI_NUM)
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	88 23       	and	r24, r24
    118a:	69 f5       	brne	.+90     	; 0x11e6 <EXTI_enuDisableINT+0x70>
	{
		switch(Cpy_u8EXTI_ID)
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	3c 83       	std	Y+4, r19	; 0x04
    1194:	2b 83       	std	Y+3, r18	; 0x03
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	9c 81       	ldd	r25, Y+4	; 0x04
    119a:	81 30       	cpi	r24, 0x01	; 1
    119c:	91 05       	cpc	r25, r1
    119e:	89 f0       	breq	.+34     	; 0x11c2 <EXTI_enuDisableINT+0x4c>
    11a0:	2b 81       	ldd	r18, Y+3	; 0x03
    11a2:	3c 81       	ldd	r19, Y+4	; 0x04
    11a4:	22 30       	cpi	r18, 0x02	; 2
    11a6:	31 05       	cpc	r19, r1
    11a8:	a1 f0       	breq	.+40     	; 0x11d2 <EXTI_enuDisableINT+0x5c>
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	9c 81       	ldd	r25, Y+4	; 0x04
    11ae:	00 97       	sbiw	r24, 0x00	; 0
    11b0:	b9 f4       	brne	.+46     	; 0x11e0 <EXTI_enuDisableINT+0x6a>
		{

		    //Disable interrupt 0 .
		case EXTI0:
			GICR &=~(EXTI_MASK_BIT<< INT0);
    11b2:	ab e5       	ldi	r26, 0x5B	; 91
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	eb e5       	ldi	r30, 0x5B	; 91
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	8f 7b       	andi	r24, 0xBF	; 191
    11be:	8c 93       	st	X, r24
    11c0:	0f c0       	rjmp	.+30     	; 0x11e0 <EXTI_enuDisableINT+0x6a>
			break;

			//Disable interrupt 1 .
		case EXTI1:
			GICR &=~(EXTI_MASK_BIT<< INT1);
    11c2:	ab e5       	ldi	r26, 0x5B	; 91
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	eb e5       	ldi	r30, 0x5B	; 91
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	8f 77       	andi	r24, 0x7F	; 127
    11ce:	8c 93       	st	X, r24
    11d0:	07 c0       	rjmp	.+14     	; 0x11e0 <EXTI_enuDisableINT+0x6a>
			break;

			//Disable interrupt 2 .
		case EXTI2:
			GICR &=~(EXTI_MASK_BIT<< INT2);
    11d2:	ab e5       	ldi	r26, 0x5B	; 91
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	eb e5       	ldi	r30, 0x5B	; 91
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	8f 7d       	andi	r24, 0xDF	; 223
    11de:	8c 93       	st	X, r24
			break;

		}
		Local_enuErrorState = ES_OK  ;
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	89 83       	std	Y+1, r24	; 0x01
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <EXTI_enuDisableINT+0x74>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE ;
    11e6:	83 e0       	ldi	r24, 0x03	; 3
    11e8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	0f 90       	pop	r0
    11f2:	0f 90       	pop	r0
    11f4:	cf 91       	pop	r28
    11f6:	df 91       	pop	r29
    11f8:	08 95       	ret

000011fa <EXTI_enuCallBack>:
/*                                                                                                      */
/*                                                                                                      */
/* Return          : Error state of type ES_t.                                                          */
/*.......................********************************************************************************/
ES_t   EXTI_enuCallBack(volatile void (*Cpy_pfunAppFunc)(void*)  , volatile void* Cpy_pvidParameter ,  u8 Cpy_u8EXTI_ID  )
{
    11fa:	df 93       	push	r29
    11fc:	cf 93       	push	r28
    11fe:	00 d0       	rcall	.+0      	; 0x1200 <EXTI_enuCallBack+0x6>
    1200:	00 d0       	rcall	.+0      	; 0x1202 <EXTI_enuCallBack+0x8>
    1202:	00 d0       	rcall	.+0      	; 0x1204 <EXTI_enuCallBack+0xa>
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
    1208:	9b 83       	std	Y+3, r25	; 0x03
    120a:	8a 83       	std	Y+2, r24	; 0x02
    120c:	7d 83       	std	Y+5, r23	; 0x05
    120e:	6c 83       	std	Y+4, r22	; 0x04
    1210:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_enuErrorState =ES_NOK ;
    1212:	19 82       	std	Y+1, r1	; 0x01

	if( (Cpy_pfunAppFunc !=NULL)&&(Cpy_u8EXTI_ID < EXTI_NUM) )
    1214:	8a 81       	ldd	r24, Y+2	; 0x02
    1216:	9b 81       	ldd	r25, Y+3	; 0x03
    1218:	00 97       	sbiw	r24, 0x00	; 0
    121a:	f1 f0       	breq	.+60     	; 0x1258 <EXTI_enuCallBack+0x5e>
    121c:	8e 81       	ldd	r24, Y+6	; 0x06
    121e:	88 23       	and	r24, r24
    1220:	d9 f4       	brne	.+54     	; 0x1258 <EXTI_enuCallBack+0x5e>
	{

		EXTI_ApfunINTFunc[Cpy_u8EXTI_ID]= Cpy_pfunAppFunc ;
    1222:	8e 81       	ldd	r24, Y+6	; 0x06
    1224:	88 2f       	mov	r24, r24
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	88 0f       	add	r24, r24
    122a:	99 1f       	adc	r25, r25
    122c:	fc 01       	movw	r30, r24
    122e:	ee 58       	subi	r30, 0x8E	; 142
    1230:	ff 4f       	sbci	r31, 0xFF	; 255
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	9b 81       	ldd	r25, Y+3	; 0x03
    1236:	91 83       	std	Z+1, r25	; 0x01
    1238:	80 83       	st	Z, r24

		EXTI_ApvidGenericParameter[Cpy_u8EXTI_ID]= Cpy_pvidParameter;
    123a:	8e 81       	ldd	r24, Y+6	; 0x06
    123c:	88 2f       	mov	r24, r24
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	fc 01       	movw	r30, r24
    1246:	e8 58       	subi	r30, 0x88	; 136
    1248:	ff 4f       	sbci	r31, 0xFF	; 255
    124a:	8c 81       	ldd	r24, Y+4	; 0x04
    124c:	9d 81       	ldd	r25, Y+5	; 0x05
    124e:	91 83       	std	Z+1, r25	; 0x01
    1250:	80 83       	st	Z, r24

		Local_enuErrorState =ES_OK ;
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	89 83       	std	Y+1, r24	; 0x01
    1256:	02 c0       	rjmp	.+4      	; 0x125c <EXTI_enuCallBack+0x62>

	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER ;
    1258:	82 e0       	ldi	r24, 0x02	; 2
    125a:	89 83       	std	Y+1, r24	; 0x01
	}




	return Local_enuErrorState;
    125c:	89 81       	ldd	r24, Y+1	; 0x01
}//End of EXTI_enuCallBack.
    125e:	26 96       	adiw	r28, 0x06	; 6
    1260:	0f b6       	in	r0, 0x3f	; 63
    1262:	f8 94       	cli
    1264:	de bf       	out	0x3e, r29	; 62
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	cd bf       	out	0x3d, r28	; 61
    126a:	cf 91       	pop	r28
    126c:	df 91       	pop	r29
    126e:	08 95       	ret

00001270 <__vector_1>:


/**********************************************************************/
/************* Interrupt service routine for interrupt0 ***************/
ISR(VECT_INT0)
{
    1270:	1f 92       	push	r1
    1272:	0f 92       	push	r0
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	0f 92       	push	r0
    1278:	11 24       	eor	r1, r1
    127a:	2f 93       	push	r18
    127c:	3f 93       	push	r19
    127e:	4f 93       	push	r20
    1280:	5f 93       	push	r21
    1282:	6f 93       	push	r22
    1284:	7f 93       	push	r23
    1286:	8f 93       	push	r24
    1288:	9f 93       	push	r25
    128a:	af 93       	push	r26
    128c:	bf 93       	push	r27
    128e:	ef 93       	push	r30
    1290:	ff 93       	push	r31
    1292:	df 93       	push	r29
    1294:	cf 93       	push	r28
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62
	if (  EXTI_ApfunINTFunc[EXTI0] != NULL )
    129a:	80 91 72 00 	lds	r24, 0x0072
    129e:	90 91 73 00 	lds	r25, 0x0073
    12a2:	00 97       	sbiw	r24, 0x00	; 0
    12a4:	49 f0       	breq	.+18     	; 0x12b8 <__vector_1+0x48>
	{
		(*EXTI_ApfunINTFunc[EXTI0])(EXTI_ApvidGenericParameter[EXTI0]);
    12a6:	e0 91 72 00 	lds	r30, 0x0072
    12aa:	f0 91 73 00 	lds	r31, 0x0073
    12ae:	80 91 78 00 	lds	r24, 0x0078
    12b2:	90 91 79 00 	lds	r25, 0x0079
    12b6:	09 95       	icall
	{
		//Do nothing.
	}


}
    12b8:	cf 91       	pop	r28
    12ba:	df 91       	pop	r29
    12bc:	ff 91       	pop	r31
    12be:	ef 91       	pop	r30
    12c0:	bf 91       	pop	r27
    12c2:	af 91       	pop	r26
    12c4:	9f 91       	pop	r25
    12c6:	8f 91       	pop	r24
    12c8:	7f 91       	pop	r23
    12ca:	6f 91       	pop	r22
    12cc:	5f 91       	pop	r21
    12ce:	4f 91       	pop	r20
    12d0:	3f 91       	pop	r19
    12d2:	2f 91       	pop	r18
    12d4:	0f 90       	pop	r0
    12d6:	0f be       	out	0x3f, r0	; 63
    12d8:	0f 90       	pop	r0
    12da:	1f 90       	pop	r1
    12dc:	18 95       	reti

000012de <__vector_2>:

/**********************************************************************/
/************* Interrupt service routine for interrupt1 ***************/
ISR(VECT_INT1)
{
    12de:	1f 92       	push	r1
    12e0:	0f 92       	push	r0
    12e2:	0f b6       	in	r0, 0x3f	; 63
    12e4:	0f 92       	push	r0
    12e6:	11 24       	eor	r1, r1
    12e8:	2f 93       	push	r18
    12ea:	3f 93       	push	r19
    12ec:	4f 93       	push	r20
    12ee:	5f 93       	push	r21
    12f0:	6f 93       	push	r22
    12f2:	7f 93       	push	r23
    12f4:	8f 93       	push	r24
    12f6:	9f 93       	push	r25
    12f8:	af 93       	push	r26
    12fa:	bf 93       	push	r27
    12fc:	ef 93       	push	r30
    12fe:	ff 93       	push	r31
    1300:	df 93       	push	r29
    1302:	cf 93       	push	r28
    1304:	cd b7       	in	r28, 0x3d	; 61
    1306:	de b7       	in	r29, 0x3e	; 62
	if (  EXTI_ApfunINTFunc[EXTI1] != NULL )
    1308:	80 91 74 00 	lds	r24, 0x0074
    130c:	90 91 75 00 	lds	r25, 0x0075
    1310:	00 97       	sbiw	r24, 0x00	; 0
    1312:	49 f0       	breq	.+18     	; 0x1326 <__vector_2+0x48>
	{
		(*EXTI_ApfunINTFunc[EXTI1])(EXTI_ApvidGenericParameter[EXTI1]);
    1314:	e0 91 74 00 	lds	r30, 0x0074
    1318:	f0 91 75 00 	lds	r31, 0x0075
    131c:	80 91 7a 00 	lds	r24, 0x007A
    1320:	90 91 7b 00 	lds	r25, 0x007B
    1324:	09 95       	icall
		//Do nothing.
	}



}
    1326:	cf 91       	pop	r28
    1328:	df 91       	pop	r29
    132a:	ff 91       	pop	r31
    132c:	ef 91       	pop	r30
    132e:	bf 91       	pop	r27
    1330:	af 91       	pop	r26
    1332:	9f 91       	pop	r25
    1334:	8f 91       	pop	r24
    1336:	7f 91       	pop	r23
    1338:	6f 91       	pop	r22
    133a:	5f 91       	pop	r21
    133c:	4f 91       	pop	r20
    133e:	3f 91       	pop	r19
    1340:	2f 91       	pop	r18
    1342:	0f 90       	pop	r0
    1344:	0f be       	out	0x3f, r0	; 63
    1346:	0f 90       	pop	r0
    1348:	1f 90       	pop	r1
    134a:	18 95       	reti

0000134c <__vector_3>:


/**********************************************************************/
/************* Interrupt service routine for interrupt2 ***************/
ISR(VECT_INT2)
{
    134c:	1f 92       	push	r1
    134e:	0f 92       	push	r0
    1350:	0f b6       	in	r0, 0x3f	; 63
    1352:	0f 92       	push	r0
    1354:	11 24       	eor	r1, r1
    1356:	2f 93       	push	r18
    1358:	3f 93       	push	r19
    135a:	4f 93       	push	r20
    135c:	5f 93       	push	r21
    135e:	6f 93       	push	r22
    1360:	7f 93       	push	r23
    1362:	8f 93       	push	r24
    1364:	9f 93       	push	r25
    1366:	af 93       	push	r26
    1368:	bf 93       	push	r27
    136a:	ef 93       	push	r30
    136c:	ff 93       	push	r31
    136e:	df 93       	push	r29
    1370:	cf 93       	push	r28
    1372:	cd b7       	in	r28, 0x3d	; 61
    1374:	de b7       	in	r29, 0x3e	; 62

	if (  EXTI_ApfunINTFunc[EXTI2] != NULL )
    1376:	80 91 76 00 	lds	r24, 0x0076
    137a:	90 91 77 00 	lds	r25, 0x0077
    137e:	00 97       	sbiw	r24, 0x00	; 0
    1380:	49 f0       	breq	.+18     	; 0x1394 <__vector_3+0x48>
	{
		(*EXTI_ApfunINTFunc[EXTI2])(EXTI_ApvidGenericParameter[EXTI2]);
    1382:	e0 91 76 00 	lds	r30, 0x0076
    1386:	f0 91 77 00 	lds	r31, 0x0077
    138a:	80 91 7c 00 	lds	r24, 0x007C
    138e:	90 91 7d 00 	lds	r25, 0x007D
    1392:	09 95       	icall
	else
	{
		//Do nothing.
	}

}
    1394:	cf 91       	pop	r28
    1396:	df 91       	pop	r29
    1398:	ff 91       	pop	r31
    139a:	ef 91       	pop	r30
    139c:	bf 91       	pop	r27
    139e:	af 91       	pop	r26
    13a0:	9f 91       	pop	r25
    13a2:	8f 91       	pop	r24
    13a4:	7f 91       	pop	r23
    13a6:	6f 91       	pop	r22
    13a8:	5f 91       	pop	r21
    13aa:	4f 91       	pop	r20
    13ac:	3f 91       	pop	r19
    13ae:	2f 91       	pop	r18
    13b0:	0f 90       	pop	r0
    13b2:	0f be       	out	0x3f, r0	; 63
    13b4:	0f 90       	pop	r0
    13b6:	1f 90       	pop	r1
    13b8:	18 95       	reti

000013ba <DIO_enuSetPortDirection>:
/*                 : Arg.2: Copy_u8Dir:                                     */
/*                                        DIO_INPTU_PIN  ,   DIO_OUTPUT_PIN */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID, u8 Copy_u8Dir)
{
    13ba:	df 93       	push	r29
    13bc:	cf 93       	push	r28
    13be:	00 d0       	rcall	.+0      	; 0x13c0 <DIO_enuSetPortDirection+0x6>
    13c0:	00 d0       	rcall	.+0      	; 0x13c2 <DIO_enuSetPortDirection+0x8>
    13c2:	0f 92       	push	r0
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
    13c8:	8a 83       	std	Y+2, r24	; 0x02
    13ca:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuerrorState = ES_NOK ;
    13cc:	19 82       	std	Y+1, r1	; 0x01

	if( (Copy_u8PortID <= DIO_PORTD )&& (Copy_u8Dir <= OUTPUT_PORT)  )
    13ce:	8a 81       	ldd	r24, Y+2	; 0x02
    13d0:	84 30       	cpi	r24, 0x04	; 4
    13d2:	a8 f5       	brcc	.+106    	; 0x143e <DIO_enuSetPortDirection+0x84>
	{
		switch( Copy_u8PortID )
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	3d 83       	std	Y+5, r19	; 0x05
    13dc:	2c 83       	std	Y+4, r18	; 0x04
    13de:	8c 81       	ldd	r24, Y+4	; 0x04
    13e0:	9d 81       	ldd	r25, Y+5	; 0x05
    13e2:	81 30       	cpi	r24, 0x01	; 1
    13e4:	91 05       	cpc	r25, r1
    13e6:	d1 f0       	breq	.+52     	; 0x141c <DIO_enuSetPortDirection+0x62>
    13e8:	2c 81       	ldd	r18, Y+4	; 0x04
    13ea:	3d 81       	ldd	r19, Y+5	; 0x05
    13ec:	22 30       	cpi	r18, 0x02	; 2
    13ee:	31 05       	cpc	r19, r1
    13f0:	2c f4       	brge	.+10     	; 0x13fc <DIO_enuSetPortDirection+0x42>
    13f2:	8c 81       	ldd	r24, Y+4	; 0x04
    13f4:	9d 81       	ldd	r25, Y+5	; 0x05
    13f6:	00 97       	sbiw	r24, 0x00	; 0
    13f8:	61 f0       	breq	.+24     	; 0x1412 <DIO_enuSetPortDirection+0x58>
    13fa:	1e c0       	rjmp	.+60     	; 0x1438 <DIO_enuSetPortDirection+0x7e>
    13fc:	2c 81       	ldd	r18, Y+4	; 0x04
    13fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1400:	22 30       	cpi	r18, 0x02	; 2
    1402:	31 05       	cpc	r19, r1
    1404:	81 f0       	breq	.+32     	; 0x1426 <DIO_enuSetPortDirection+0x6c>
    1406:	8c 81       	ldd	r24, Y+4	; 0x04
    1408:	9d 81       	ldd	r25, Y+5	; 0x05
    140a:	83 30       	cpi	r24, 0x03	; 3
    140c:	91 05       	cpc	r25, r1
    140e:	81 f0       	breq	.+32     	; 0x1430 <DIO_enuSetPortDirection+0x76>
    1410:	13 c0       	rjmp	.+38     	; 0x1438 <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA :
			DDRA = Copy_u8Dir;
    1412:	ea e3       	ldi	r30, 0x3A	; 58
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	80 83       	st	Z, r24
    141a:	0e c0       	rjmp	.+28     	; 0x1438 <DIO_enuSetPortDirection+0x7e>
			break;

		case DIO_PORTB :
			DDRB = Copy_u8Dir;
    141c:	e7 e3       	ldi	r30, 0x37	; 55
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	80 83       	st	Z, r24
    1424:	09 c0       	rjmp	.+18     	; 0x1438 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC :
			DDRC = Copy_u8Dir;
    1426:	e4 e3       	ldi	r30, 0x34	; 52
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	8b 81       	ldd	r24, Y+3	; 0x03
    142c:	80 83       	st	Z, r24
    142e:	04 c0       	rjmp	.+8      	; 0x1438 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD :
			DDRD = Copy_u8Dir;
    1430:	e1 e3       	ldi	r30, 0x31	; 49
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	80 83       	st	Z, r24
			break;
		}
		Local_enuerrorState = ES_OK;
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	89 83       	std	Y+1, r24	; 0x01
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <DIO_enuSetPortDirection+0x88>

	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
    143e:	83 e0       	ldi	r24, 0x03	; 3
    1440:	89 83       	std	Y+1, r24	; 0x01

	}


	return Local_enuerrorState  ;
    1442:	89 81       	ldd	r24, Y+1	; 0x01

}//End of DIO_enuSetPortDirection().
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	0f 90       	pop	r0
    144e:	cf 91       	pop	r28
    1450:	df 91       	pop	r29
    1452:	08 95       	ret

00001454 <DIO_enuSetPortValue>:
/*                 : Arg.2: Copy_u8Val:                                     */
/*                                        DIO_INPTU_PIN  ,  DIO_OUTPUT_PIN  */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuSetPortValue(u8 Copy_u8PortID, u8 Copy_u8Val)
{
    1454:	df 93       	push	r29
    1456:	cf 93       	push	r28
    1458:	00 d0       	rcall	.+0      	; 0x145a <DIO_enuSetPortValue+0x6>
    145a:	00 d0       	rcall	.+0      	; 0x145c <DIO_enuSetPortValue+0x8>
    145c:	0f 92       	push	r0
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
    1462:	8a 83       	std	Y+2, r24	; 0x02
    1464:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuerrorState = ES_NOK ;
    1466:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_u8PortID <= DIO_PORTD )
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	84 30       	cpi	r24, 0x04	; 4
    146c:	a8 f5       	brcc	.+106    	; 0x14d8 <DIO_enuSetPortValue+0x84>
	{
		switch( Copy_u8PortID )
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	28 2f       	mov	r18, r24
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	3d 83       	std	Y+5, r19	; 0x05
    1476:	2c 83       	std	Y+4, r18	; 0x04
    1478:	8c 81       	ldd	r24, Y+4	; 0x04
    147a:	9d 81       	ldd	r25, Y+5	; 0x05
    147c:	81 30       	cpi	r24, 0x01	; 1
    147e:	91 05       	cpc	r25, r1
    1480:	d1 f0       	breq	.+52     	; 0x14b6 <DIO_enuSetPortValue+0x62>
    1482:	2c 81       	ldd	r18, Y+4	; 0x04
    1484:	3d 81       	ldd	r19, Y+5	; 0x05
    1486:	22 30       	cpi	r18, 0x02	; 2
    1488:	31 05       	cpc	r19, r1
    148a:	2c f4       	brge	.+10     	; 0x1496 <DIO_enuSetPortValue+0x42>
    148c:	8c 81       	ldd	r24, Y+4	; 0x04
    148e:	9d 81       	ldd	r25, Y+5	; 0x05
    1490:	00 97       	sbiw	r24, 0x00	; 0
    1492:	61 f0       	breq	.+24     	; 0x14ac <DIO_enuSetPortValue+0x58>
    1494:	1e c0       	rjmp	.+60     	; 0x14d2 <DIO_enuSetPortValue+0x7e>
    1496:	2c 81       	ldd	r18, Y+4	; 0x04
    1498:	3d 81       	ldd	r19, Y+5	; 0x05
    149a:	22 30       	cpi	r18, 0x02	; 2
    149c:	31 05       	cpc	r19, r1
    149e:	81 f0       	breq	.+32     	; 0x14c0 <DIO_enuSetPortValue+0x6c>
    14a0:	8c 81       	ldd	r24, Y+4	; 0x04
    14a2:	9d 81       	ldd	r25, Y+5	; 0x05
    14a4:	83 30       	cpi	r24, 0x03	; 3
    14a6:	91 05       	cpc	r25, r1
    14a8:	81 f0       	breq	.+32     	; 0x14ca <DIO_enuSetPortValue+0x76>
    14aa:	13 c0       	rjmp	.+38     	; 0x14d2 <DIO_enuSetPortValue+0x7e>
		{
		case DIO_PORTA :
			PORTA = Copy_u8Val;
    14ac:	eb e3       	ldi	r30, 0x3B	; 59
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	8b 81       	ldd	r24, Y+3	; 0x03
    14b2:	80 83       	st	Z, r24
    14b4:	0e c0       	rjmp	.+28     	; 0x14d2 <DIO_enuSetPortValue+0x7e>
			break;

		case DIO_PORTB :
			PORTB = Copy_u8Val;
    14b6:	e8 e3       	ldi	r30, 0x38	; 56
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	80 83       	st	Z, r24
    14be:	09 c0       	rjmp	.+18     	; 0x14d2 <DIO_enuSetPortValue+0x7e>
			break;

		case DIO_PORTC :
			PORTC = Copy_u8Val;
    14c0:	e5 e3       	ldi	r30, 0x35	; 53
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    14c6:	80 83       	st	Z, r24
    14c8:	04 c0       	rjmp	.+8      	; 0x14d2 <DIO_enuSetPortValue+0x7e>
			break;

		case DIO_PORTD :
			PORTD = Copy_u8Val;
    14ca:	e2 e3       	ldi	r30, 0x32	; 50
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	80 83       	st	Z, r24
			break;
		}

		Local_enuerrorState = ES_OK;
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	89 83       	std	Y+1, r24	; 0x01
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <DIO_enuSetPortValue+0x88>

	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
    14d8:	83 e0       	ldi	r24, 0x03	; 3
    14da:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuerrorState  ;
    14dc:	89 81       	ldd	r24, Y+1	; 0x01
}//End of DIO_enuSetPortValue().
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	cf 91       	pop	r28
    14ea:	df 91       	pop	r29
    14ec:	08 95       	ret

000014ee <DIO_enuToggelPort>:
/*                                        DIO_PORTA      ,   DIO_PORTA      */
/*                                        DIO_PORTA      ,   DIO_PORTA      */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuToggelPort(u8  Copy_u8PortID )
{
    14ee:	df 93       	push	r29
    14f0:	cf 93       	push	r28
    14f2:	00 d0       	rcall	.+0      	; 0x14f4 <DIO_enuToggelPort+0x6>
    14f4:	00 d0       	rcall	.+0      	; 0x14f6 <DIO_enuToggelPort+0x8>
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
    14fa:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuerrorState = ES_NOK ;
    14fc:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_u8PortID <= DIO_PORTD )
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	84 30       	cpi	r24, 0x04	; 4
    1502:	08 f0       	brcs	.+2      	; 0x1506 <DIO_enuToggelPort+0x18>
    1504:	41 c0       	rjmp	.+130    	; 0x1588 <DIO_enuToggelPort+0x9a>
	{
		switch( Copy_u8PortID )
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	3c 83       	std	Y+4, r19	; 0x04
    150e:	2b 83       	std	Y+3, r18	; 0x03
    1510:	8b 81       	ldd	r24, Y+3	; 0x03
    1512:	9c 81       	ldd	r25, Y+4	; 0x04
    1514:	81 30       	cpi	r24, 0x01	; 1
    1516:	91 05       	cpc	r25, r1
    1518:	e9 f0       	breq	.+58     	; 0x1554 <DIO_enuToggelPort+0x66>
    151a:	2b 81       	ldd	r18, Y+3	; 0x03
    151c:	3c 81       	ldd	r19, Y+4	; 0x04
    151e:	22 30       	cpi	r18, 0x02	; 2
    1520:	31 05       	cpc	r19, r1
    1522:	2c f4       	brge	.+10     	; 0x152e <DIO_enuToggelPort+0x40>
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	9c 81       	ldd	r25, Y+4	; 0x04
    1528:	00 97       	sbiw	r24, 0x00	; 0
    152a:	61 f0       	breq	.+24     	; 0x1544 <DIO_enuToggelPort+0x56>
    152c:	2a c0       	rjmp	.+84     	; 0x1582 <DIO_enuToggelPort+0x94>
    152e:	2b 81       	ldd	r18, Y+3	; 0x03
    1530:	3c 81       	ldd	r19, Y+4	; 0x04
    1532:	22 30       	cpi	r18, 0x02	; 2
    1534:	31 05       	cpc	r19, r1
    1536:	b1 f0       	breq	.+44     	; 0x1564 <DIO_enuToggelPort+0x76>
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	9c 81       	ldd	r25, Y+4	; 0x04
    153c:	83 30       	cpi	r24, 0x03	; 3
    153e:	91 05       	cpc	r25, r1
    1540:	c9 f0       	breq	.+50     	; 0x1574 <DIO_enuToggelPort+0x86>
    1542:	1f c0       	rjmp	.+62     	; 0x1582 <DIO_enuToggelPort+0x94>
		{
		case DIO_PORTA :
			PORTA = ~PORTA;
    1544:	ab e3       	ldi	r26, 0x3B	; 59
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	eb e3       	ldi	r30, 0x3B	; 59
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	80 95       	com	r24
    1550:	8c 93       	st	X, r24
    1552:	17 c0       	rjmp	.+46     	; 0x1582 <DIO_enuToggelPort+0x94>
			break;

		case DIO_PORTB :
			PORTB = ~PORTB;
    1554:	a8 e3       	ldi	r26, 0x38	; 56
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	e8 e3       	ldi	r30, 0x38	; 56
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	80 95       	com	r24
    1560:	8c 93       	st	X, r24
    1562:	0f c0       	rjmp	.+30     	; 0x1582 <DIO_enuToggelPort+0x94>
			break;

		case DIO_PORTC :
			PORTC = ~PORTC;
    1564:	a5 e3       	ldi	r26, 0x35	; 53
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	e5 e3       	ldi	r30, 0x35	; 53
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	80 95       	com	r24
    1570:	8c 93       	st	X, r24
    1572:	07 c0       	rjmp	.+14     	; 0x1582 <DIO_enuToggelPort+0x94>
			break;

		case DIO_PORTD :
			PORTD = ~PORTD ;
    1574:	a2 e3       	ldi	r26, 0x32	; 50
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	e2 e3       	ldi	r30, 0x32	; 50
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	80 95       	com	r24
    1580:	8c 93       	st	X, r24
			break;
		}

		Local_enuerrorState = ES_OK;
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	89 83       	std	Y+1, r24	; 0x01
    1586:	02 c0       	rjmp	.+4      	; 0x158c <DIO_enuToggelPort+0x9e>

	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
    1588:	83 e0       	ldi	r24, 0x03	; 3
    158a:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuerrorState  ;
    158c:	89 81       	ldd	r24, Y+1	; 0x01
}//End of DIO_enuToggelPort().
    158e:	0f 90       	pop	r0
    1590:	0f 90       	pop	r0
    1592:	0f 90       	pop	r0
    1594:	0f 90       	pop	r0
    1596:	cf 91       	pop	r28
    1598:	df 91       	pop	r29
    159a:	08 95       	ret

0000159c <DIO_enuGetPortVlaue>:
/*                                                                          */
/*                 : Arg.2: Address of u8 variable.                         */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuGetPortVlaue(u8 Copy_u8PortID, u8* Copy_pu8PortVal)
{
    159c:	df 93       	push	r29
    159e:	cf 93       	push	r28
    15a0:	00 d0       	rcall	.+0      	; 0x15a2 <DIO_enuGetPortVlaue+0x6>
    15a2:	00 d0       	rcall	.+0      	; 0x15a4 <DIO_enuGetPortVlaue+0x8>
    15a4:	00 d0       	rcall	.+0      	; 0x15a6 <DIO_enuGetPortVlaue+0xa>
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    15aa:	8a 83       	std	Y+2, r24	; 0x02
    15ac:	7c 83       	std	Y+4, r23	; 0x04
    15ae:	6b 83       	std	Y+3, r22	; 0x03
	//Local Variable to
	ES_t Local_enuerrorState = ES_NOK ;
    15b0:	19 82       	std	Y+1, r1	; 0x01

	// Check to ensure that the passed address is not equal Null.
	if( Copy_pu8PortVal != NULL )
    15b2:	8b 81       	ldd	r24, Y+3	; 0x03
    15b4:	9c 81       	ldd	r25, Y+4	; 0x04
    15b6:	00 97       	sbiw	r24, 0x00	; 0
    15b8:	09 f4       	brne	.+2      	; 0x15bc <DIO_enuGetPortVlaue+0x20>
    15ba:	43 c0       	rjmp	.+134    	; 0x1642 <DIO_enuGetPortVlaue+0xa6>
	{
		// Check to ensure that the passed PortID is in range.
		if( Copy_u8PortID <= DIO_PORTD )
    15bc:	8a 81       	ldd	r24, Y+2	; 0x02
    15be:	84 30       	cpi	r24, 0x04	; 4
    15c0:	e8 f5       	brcc	.+122    	; 0x163c <DIO_enuGetPortVlaue+0xa0>
		{

			/**********************************************************
			 * Switching for the suitable case .
			 **********************************************************/
			switch( Copy_u8PortID )
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	3e 83       	std	Y+6, r19	; 0x06
    15ca:	2d 83       	std	Y+5, r18	; 0x05
    15cc:	8d 81       	ldd	r24, Y+5	; 0x05
    15ce:	9e 81       	ldd	r25, Y+6	; 0x06
    15d0:	81 30       	cpi	r24, 0x01	; 1
    15d2:	91 05       	cpc	r25, r1
    15d4:	e1 f0       	breq	.+56     	; 0x160e <DIO_enuGetPortVlaue+0x72>
    15d6:	2d 81       	ldd	r18, Y+5	; 0x05
    15d8:	3e 81       	ldd	r19, Y+6	; 0x06
    15da:	22 30       	cpi	r18, 0x02	; 2
    15dc:	31 05       	cpc	r19, r1
    15de:	2c f4       	brge	.+10     	; 0x15ea <DIO_enuGetPortVlaue+0x4e>
    15e0:	8d 81       	ldd	r24, Y+5	; 0x05
    15e2:	9e 81       	ldd	r25, Y+6	; 0x06
    15e4:	00 97       	sbiw	r24, 0x00	; 0
    15e6:	61 f0       	breq	.+24     	; 0x1600 <DIO_enuGetPortVlaue+0x64>
    15e8:	26 c0       	rjmp	.+76     	; 0x1636 <DIO_enuGetPortVlaue+0x9a>
    15ea:	2d 81       	ldd	r18, Y+5	; 0x05
    15ec:	3e 81       	ldd	r19, Y+6	; 0x06
    15ee:	22 30       	cpi	r18, 0x02	; 2
    15f0:	31 05       	cpc	r19, r1
    15f2:	a1 f0       	breq	.+40     	; 0x161c <DIO_enuGetPortVlaue+0x80>
    15f4:	8d 81       	ldd	r24, Y+5	; 0x05
    15f6:	9e 81       	ldd	r25, Y+6	; 0x06
    15f8:	83 30       	cpi	r24, 0x03	; 3
    15fa:	91 05       	cpc	r25, r1
    15fc:	b1 f0       	breq	.+44     	; 0x162a <DIO_enuGetPortVlaue+0x8e>
    15fe:	1b c0       	rjmp	.+54     	; 0x1636 <DIO_enuGetPortVlaue+0x9a>
			{
			case DIO_PORTA :
				*Copy_pu8PortVal = PINA;
    1600:	e9 e3       	ldi	r30, 0x39	; 57
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	eb 81       	ldd	r30, Y+3	; 0x03
    1608:	fc 81       	ldd	r31, Y+4	; 0x04
    160a:	80 83       	st	Z, r24
    160c:	14 c0       	rjmp	.+40     	; 0x1636 <DIO_enuGetPortVlaue+0x9a>
				break;

			case DIO_PORTB :
				*Copy_pu8PortVal = PINB;
    160e:	e6 e3       	ldi	r30, 0x36	; 54
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	eb 81       	ldd	r30, Y+3	; 0x03
    1616:	fc 81       	ldd	r31, Y+4	; 0x04
    1618:	80 83       	st	Z, r24
    161a:	0d c0       	rjmp	.+26     	; 0x1636 <DIO_enuGetPortVlaue+0x9a>
				break;

			case DIO_PORTC :
				*Copy_pu8PortVal = PINC;
    161c:	e3 e3       	ldi	r30, 0x33	; 51
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	eb 81       	ldd	r30, Y+3	; 0x03
    1624:	fc 81       	ldd	r31, Y+4	; 0x04
    1626:	80 83       	st	Z, r24
    1628:	06 c0       	rjmp	.+12     	; 0x1636 <DIO_enuGetPortVlaue+0x9a>
				break;

			case DIO_PORTD :
				*Copy_pu8PortVal = PIND ;
    162a:	e0 e3       	ldi	r30, 0x30	; 48
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	eb 81       	ldd	r30, Y+3	; 0x03
    1632:	fc 81       	ldd	r31, Y+4	; 0x04
    1634:	80 83       	st	Z, r24
				break;
			}

			Local_enuerrorState = ES_OK;
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	89 83       	std	Y+1, r24	; 0x01
    163a:	05 c0       	rjmp	.+10     	; 0x1646 <DIO_enuGetPortVlaue+0xaa>
		else
		{
			/**********************************************************
			 * Handle Out Of Range case.
			 **********************************************************/
			Local_enuerrorState = ES_OUT_OF_RANGE;
    163c:	83 e0       	ldi	r24, 0x03	; 3
    163e:	89 83       	std	Y+1, r24	; 0x01
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <DIO_enuGetPortVlaue+0xaa>
	else
	{
		/**********************************************************
		 * Handle null pointer case.
		 **********************************************************/
		Local_enuerrorState = ES_NULL_POINTER;
    1642:	82 e0       	ldi	r24, 0x02	; 2
    1644:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuerrorState  ;
    1646:	89 81       	ldd	r24, Y+1	; 0x01

}//End of DIO_enuGetPortVlaue().
    1648:	26 96       	adiw	r28, 0x06	; 6
    164a:	0f b6       	in	r0, 0x3f	; 63
    164c:	f8 94       	cli
    164e:	de bf       	out	0x3e, r29	; 62
    1650:	0f be       	out	0x3f, r0	; 63
    1652:	cd bf       	out	0x3d, r28	; 61
    1654:	cf 91       	pop	r28
    1656:	df 91       	pop	r29
    1658:	08 95       	ret

0000165a <DIO_enuSetPinDirection>:
/*                 : Arg.3: Copy_u8Dir.                                     */
/*                                       DIO_INPTU_PIN   ,   DIO_OUTPUT_PIN */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID, u8 Copy_u8PinID , u8 Copy_u8Dir)
{
    165a:	df 93       	push	r29
    165c:	cf 93       	push	r28
    165e:	00 d0       	rcall	.+0      	; 0x1660 <DIO_enuSetPinDirection+0x6>
    1660:	00 d0       	rcall	.+0      	; 0x1662 <DIO_enuSetPinDirection+0x8>
    1662:	00 d0       	rcall	.+0      	; 0x1664 <DIO_enuSetPinDirection+0xa>
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
    1668:	8a 83       	std	Y+2, r24	; 0x02
    166a:	6b 83       	std	Y+3, r22	; 0x03
    166c:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuerrorState = ES_NOK ;
    166e:	19 82       	std	Y+1, r1	; 0x01

	if( (Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <= DIO_PIN7) &&( Copy_u8Dir<= OUTPUT_PIN))
    1670:	8a 81       	ldd	r24, Y+2	; 0x02
    1672:	84 30       	cpi	r24, 0x04	; 4
    1674:	08 f0       	brcs	.+2      	; 0x1678 <DIO_enuSetPinDirection+0x1e>
    1676:	dc c0       	rjmp	.+440    	; 0x1830 <DIO_enuSetPinDirection+0x1d6>
    1678:	8b 81       	ldd	r24, Y+3	; 0x03
    167a:	88 30       	cpi	r24, 0x08	; 8
    167c:	08 f0       	brcs	.+2      	; 0x1680 <DIO_enuSetPinDirection+0x26>
    167e:	d8 c0       	rjmp	.+432    	; 0x1830 <DIO_enuSetPinDirection+0x1d6>
    1680:	8c 81       	ldd	r24, Y+4	; 0x04
    1682:	82 30       	cpi	r24, 0x02	; 2
    1684:	08 f0       	brcs	.+2      	; 0x1688 <DIO_enuSetPinDirection+0x2e>
    1686:	d4 c0       	rjmp	.+424    	; 0x1830 <DIO_enuSetPinDirection+0x1d6>
	{

		/**********************************************************
		 * Switching for the suitable case .
		 **********************************************************/
		switch( Copy_u8PortID )
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	28 2f       	mov	r18, r24
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	3e 83       	std	Y+6, r19	; 0x06
    1690:	2d 83       	std	Y+5, r18	; 0x05
    1692:	8d 81       	ldd	r24, Y+5	; 0x05
    1694:	9e 81       	ldd	r25, Y+6	; 0x06
    1696:	81 30       	cpi	r24, 0x01	; 1
    1698:	91 05       	cpc	r25, r1
    169a:	09 f4       	brne	.+2      	; 0x169e <DIO_enuSetPinDirection+0x44>
    169c:	43 c0       	rjmp	.+134    	; 0x1724 <DIO_enuSetPinDirection+0xca>
    169e:	2d 81       	ldd	r18, Y+5	; 0x05
    16a0:	3e 81       	ldd	r19, Y+6	; 0x06
    16a2:	22 30       	cpi	r18, 0x02	; 2
    16a4:	31 05       	cpc	r19, r1
    16a6:	2c f4       	brge	.+10     	; 0x16b2 <DIO_enuSetPinDirection+0x58>
    16a8:	8d 81       	ldd	r24, Y+5	; 0x05
    16aa:	9e 81       	ldd	r25, Y+6	; 0x06
    16ac:	00 97       	sbiw	r24, 0x00	; 0
    16ae:	71 f0       	breq	.+28     	; 0x16cc <DIO_enuSetPinDirection+0x72>
    16b0:	bc c0       	rjmp	.+376    	; 0x182a <DIO_enuSetPinDirection+0x1d0>
    16b2:	2d 81       	ldd	r18, Y+5	; 0x05
    16b4:	3e 81       	ldd	r19, Y+6	; 0x06
    16b6:	22 30       	cpi	r18, 0x02	; 2
    16b8:	31 05       	cpc	r19, r1
    16ba:	09 f4       	brne	.+2      	; 0x16be <DIO_enuSetPinDirection+0x64>
    16bc:	5f c0       	rjmp	.+190    	; 0x177c <DIO_enuSetPinDirection+0x122>
    16be:	8d 81       	ldd	r24, Y+5	; 0x05
    16c0:	9e 81       	ldd	r25, Y+6	; 0x06
    16c2:	83 30       	cpi	r24, 0x03	; 3
    16c4:	91 05       	cpc	r25, r1
    16c6:	09 f4       	brne	.+2      	; 0x16ca <DIO_enuSetPinDirection+0x70>
    16c8:	85 c0       	rjmp	.+266    	; 0x17d4 <DIO_enuSetPinDirection+0x17a>
    16ca:	af c0       	rjmp	.+350    	; 0x182a <DIO_enuSetPinDirection+0x1d0>
		{
		case DIO_PORTA :
			if( Copy_u8Dir == INPTU_PIN)
    16cc:	8c 81       	ldd	r24, Y+4	; 0x04
    16ce:	88 23       	and	r24, r24
    16d0:	a9 f4       	brne	.+42     	; 0x16fc <DIO_enuSetPinDirection+0xa2>
			{
				DDRA &=~(DIO_MASK_BIT<<Copy_u8PinID);
    16d2:	aa e3       	ldi	r26, 0x3A	; 58
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	ea e3       	ldi	r30, 0x3A	; 58
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	48 2f       	mov	r20, r24
    16de:	8b 81       	ldd	r24, Y+3	; 0x03
    16e0:	28 2f       	mov	r18, r24
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	02 2e       	mov	r0, r18
    16ea:	02 c0       	rjmp	.+4      	; 0x16f0 <DIO_enuSetPinDirection+0x96>
    16ec:	88 0f       	add	r24, r24
    16ee:	99 1f       	adc	r25, r25
    16f0:	0a 94       	dec	r0
    16f2:	e2 f7       	brpl	.-8      	; 0x16ec <DIO_enuSetPinDirection+0x92>
    16f4:	80 95       	com	r24
    16f6:	84 23       	and	r24, r20
    16f8:	8c 93       	st	X, r24
    16fa:	97 c0       	rjmp	.+302    	; 0x182a <DIO_enuSetPinDirection+0x1d0>
			}
			else
			{
				DDRA |=(DIO_MASK_BIT<<Copy_u8PinID);
    16fc:	aa e3       	ldi	r26, 0x3A	; 58
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	ea e3       	ldi	r30, 0x3A	; 58
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	48 2f       	mov	r20, r24
    1708:	8b 81       	ldd	r24, Y+3	; 0x03
    170a:	28 2f       	mov	r18, r24
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	02 2e       	mov	r0, r18
    1714:	02 c0       	rjmp	.+4      	; 0x171a <DIO_enuSetPinDirection+0xc0>
    1716:	88 0f       	add	r24, r24
    1718:	99 1f       	adc	r25, r25
    171a:	0a 94       	dec	r0
    171c:	e2 f7       	brpl	.-8      	; 0x1716 <DIO_enuSetPinDirection+0xbc>
    171e:	84 2b       	or	r24, r20
    1720:	8c 93       	st	X, r24
    1722:	83 c0       	rjmp	.+262    	; 0x182a <DIO_enuSetPinDirection+0x1d0>
			}

			break;

		case DIO_PORTB :
			if( Copy_u8Dir == INPTU_PIN)
    1724:	8c 81       	ldd	r24, Y+4	; 0x04
    1726:	88 23       	and	r24, r24
    1728:	a9 f4       	brne	.+42     	; 0x1754 <DIO_enuSetPinDirection+0xfa>
			{
				DDRB &=~(DIO_MASK_BIT<<Copy_u8PinID);
    172a:	a7 e3       	ldi	r26, 0x37	; 55
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	e7 e3       	ldi	r30, 0x37	; 55
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	48 2f       	mov	r20, r24
    1736:	8b 81       	ldd	r24, Y+3	; 0x03
    1738:	28 2f       	mov	r18, r24
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	02 2e       	mov	r0, r18
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <DIO_enuSetPinDirection+0xee>
    1744:	88 0f       	add	r24, r24
    1746:	99 1f       	adc	r25, r25
    1748:	0a 94       	dec	r0
    174a:	e2 f7       	brpl	.-8      	; 0x1744 <DIO_enuSetPinDirection+0xea>
    174c:	80 95       	com	r24
    174e:	84 23       	and	r24, r20
    1750:	8c 93       	st	X, r24
    1752:	6b c0       	rjmp	.+214    	; 0x182a <DIO_enuSetPinDirection+0x1d0>
			}
			else
			{
				DDRB |=(DIO_MASK_BIT<<Copy_u8PinID);
    1754:	a7 e3       	ldi	r26, 0x37	; 55
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	e7 e3       	ldi	r30, 0x37	; 55
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	48 2f       	mov	r20, r24
    1760:	8b 81       	ldd	r24, Y+3	; 0x03
    1762:	28 2f       	mov	r18, r24
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	02 2e       	mov	r0, r18
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <DIO_enuSetPinDirection+0x118>
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	0a 94       	dec	r0
    1774:	e2 f7       	brpl	.-8      	; 0x176e <DIO_enuSetPinDirection+0x114>
    1776:	84 2b       	or	r24, r20
    1778:	8c 93       	st	X, r24
    177a:	57 c0       	rjmp	.+174    	; 0x182a <DIO_enuSetPinDirection+0x1d0>
			}
			break;

		case DIO_PORTC :

			if( Copy_u8Dir == INPTU_PIN)
    177c:	8c 81       	ldd	r24, Y+4	; 0x04
    177e:	88 23       	and	r24, r24
    1780:	a9 f4       	brne	.+42     	; 0x17ac <DIO_enuSetPinDirection+0x152>
			{
				DDRC &=~(DIO_MASK_BIT<<Copy_u8PinID);
    1782:	a4 e3       	ldi	r26, 0x34	; 52
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	e4 e3       	ldi	r30, 0x34	; 52
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	48 2f       	mov	r20, r24
    178e:	8b 81       	ldd	r24, Y+3	; 0x03
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	02 2e       	mov	r0, r18
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <DIO_enuSetPinDirection+0x146>
    179c:	88 0f       	add	r24, r24
    179e:	99 1f       	adc	r25, r25
    17a0:	0a 94       	dec	r0
    17a2:	e2 f7       	brpl	.-8      	; 0x179c <DIO_enuSetPinDirection+0x142>
    17a4:	80 95       	com	r24
    17a6:	84 23       	and	r24, r20
    17a8:	8c 93       	st	X, r24
    17aa:	3f c0       	rjmp	.+126    	; 0x182a <DIO_enuSetPinDirection+0x1d0>
			}
			else
			{
				DDRC |=(DIO_MASK_BIT<<Copy_u8PinID);
    17ac:	a4 e3       	ldi	r26, 0x34	; 52
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	e4 e3       	ldi	r30, 0x34	; 52
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	48 2f       	mov	r20, r24
    17b8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ba:	28 2f       	mov	r18, r24
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	02 2e       	mov	r0, r18
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <DIO_enuSetPinDirection+0x170>
    17c6:	88 0f       	add	r24, r24
    17c8:	99 1f       	adc	r25, r25
    17ca:	0a 94       	dec	r0
    17cc:	e2 f7       	brpl	.-8      	; 0x17c6 <DIO_enuSetPinDirection+0x16c>
    17ce:	84 2b       	or	r24, r20
    17d0:	8c 93       	st	X, r24
    17d2:	2b c0       	rjmp	.+86     	; 0x182a <DIO_enuSetPinDirection+0x1d0>
			}
			break;

		case DIO_PORTD :
			if( Copy_u8Dir == INPTU_PIN)
    17d4:	8c 81       	ldd	r24, Y+4	; 0x04
    17d6:	88 23       	and	r24, r24
    17d8:	a9 f4       	brne	.+42     	; 0x1804 <DIO_enuSetPinDirection+0x1aa>
			{
				DDRD &=~(DIO_MASK_BIT<<Copy_u8PinID);
    17da:	a1 e3       	ldi	r26, 0x31	; 49
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	e1 e3       	ldi	r30, 0x31	; 49
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	48 2f       	mov	r20, r24
    17e6:	8b 81       	ldd	r24, Y+3	; 0x03
    17e8:	28 2f       	mov	r18, r24
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	02 2e       	mov	r0, r18
    17f2:	02 c0       	rjmp	.+4      	; 0x17f8 <DIO_enuSetPinDirection+0x19e>
    17f4:	88 0f       	add	r24, r24
    17f6:	99 1f       	adc	r25, r25
    17f8:	0a 94       	dec	r0
    17fa:	e2 f7       	brpl	.-8      	; 0x17f4 <DIO_enuSetPinDirection+0x19a>
    17fc:	80 95       	com	r24
    17fe:	84 23       	and	r24, r20
    1800:	8c 93       	st	X, r24
    1802:	13 c0       	rjmp	.+38     	; 0x182a <DIO_enuSetPinDirection+0x1d0>
			}
			else
			{
				DDRD |=(DIO_MASK_BIT<<Copy_u8PinID);
    1804:	a1 e3       	ldi	r26, 0x31	; 49
    1806:	b0 e0       	ldi	r27, 0x00	; 0
    1808:	e1 e3       	ldi	r30, 0x31	; 49
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	48 2f       	mov	r20, r24
    1810:	8b 81       	ldd	r24, Y+3	; 0x03
    1812:	28 2f       	mov	r18, r24
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	02 2e       	mov	r0, r18
    181c:	02 c0       	rjmp	.+4      	; 0x1822 <DIO_enuSetPinDirection+0x1c8>
    181e:	88 0f       	add	r24, r24
    1820:	99 1f       	adc	r25, r25
    1822:	0a 94       	dec	r0
    1824:	e2 f7       	brpl	.-8      	; 0x181e <DIO_enuSetPinDirection+0x1c4>
    1826:	84 2b       	or	r24, r20
    1828:	8c 93       	st	X, r24
			}
			break;

		}
		Local_enuerrorState = ES_OK;
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	89 83       	std	Y+1, r24	; 0x01
    182e:	02 c0       	rjmp	.+4      	; 0x1834 <DIO_enuSetPinDirection+0x1da>
	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
    1830:	83 e0       	ldi	r24, 0x03	; 3
    1832:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuerrorState  ;
    1834:	89 81       	ldd	r24, Y+1	; 0x01

}//End of DIO_enuSetPinDirection().
    1836:	26 96       	adiw	r28, 0x06	; 6
    1838:	0f b6       	in	r0, 0x3f	; 63
    183a:	f8 94       	cli
    183c:	de bf       	out	0x3e, r29	; 62
    183e:	0f be       	out	0x3f, r0	; 63
    1840:	cd bf       	out	0x3d, r28	; 61
    1842:	cf 91       	pop	r28
    1844:	df 91       	pop	r29
    1846:	08 95       	ret

00001848 <DIO_enuSetPinValue>:
/*                 : Arg.3: Copy_u8Val.                                     */
/*                                        DIO_LOW        ,   DIO_HIGH       */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuSetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID ,u8 Copy_u8Val)
{
    1848:	df 93       	push	r29
    184a:	cf 93       	push	r28
    184c:	00 d0       	rcall	.+0      	; 0x184e <DIO_enuSetPinValue+0x6>
    184e:	00 d0       	rcall	.+0      	; 0x1850 <DIO_enuSetPinValue+0x8>
    1850:	00 d0       	rcall	.+0      	; 0x1852 <DIO_enuSetPinValue+0xa>
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
    1856:	8a 83       	std	Y+2, r24	; 0x02
    1858:	6b 83       	std	Y+3, r22	; 0x03
    185a:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuerrorState = ES_NOK ;
    185c:	19 82       	std	Y+1, r1	; 0x01

	if( (Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <= DIO_PIN7) &&( Copy_u8Val<=DIO_HIGH))
    185e:	8a 81       	ldd	r24, Y+2	; 0x02
    1860:	84 30       	cpi	r24, 0x04	; 4
    1862:	08 f0       	brcs	.+2      	; 0x1866 <DIO_enuSetPinValue+0x1e>
    1864:	dc c0       	rjmp	.+440    	; 0x1a1e <DIO_enuSetPinValue+0x1d6>
    1866:	8b 81       	ldd	r24, Y+3	; 0x03
    1868:	88 30       	cpi	r24, 0x08	; 8
    186a:	08 f0       	brcs	.+2      	; 0x186e <DIO_enuSetPinValue+0x26>
    186c:	d8 c0       	rjmp	.+432    	; 0x1a1e <DIO_enuSetPinValue+0x1d6>
    186e:	8c 81       	ldd	r24, Y+4	; 0x04
    1870:	82 30       	cpi	r24, 0x02	; 2
    1872:	08 f0       	brcs	.+2      	; 0x1876 <DIO_enuSetPinValue+0x2e>
    1874:	d4 c0       	rjmp	.+424    	; 0x1a1e <DIO_enuSetPinValue+0x1d6>
	{

		/**********************************************************
		 * Switching for the suitable case .
		 **********************************************************/
		switch( Copy_u8PortID )
    1876:	8a 81       	ldd	r24, Y+2	; 0x02
    1878:	28 2f       	mov	r18, r24
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	3e 83       	std	Y+6, r19	; 0x06
    187e:	2d 83       	std	Y+5, r18	; 0x05
    1880:	8d 81       	ldd	r24, Y+5	; 0x05
    1882:	9e 81       	ldd	r25, Y+6	; 0x06
    1884:	81 30       	cpi	r24, 0x01	; 1
    1886:	91 05       	cpc	r25, r1
    1888:	09 f4       	brne	.+2      	; 0x188c <DIO_enuSetPinValue+0x44>
    188a:	43 c0       	rjmp	.+134    	; 0x1912 <DIO_enuSetPinValue+0xca>
    188c:	2d 81       	ldd	r18, Y+5	; 0x05
    188e:	3e 81       	ldd	r19, Y+6	; 0x06
    1890:	22 30       	cpi	r18, 0x02	; 2
    1892:	31 05       	cpc	r19, r1
    1894:	2c f4       	brge	.+10     	; 0x18a0 <DIO_enuSetPinValue+0x58>
    1896:	8d 81       	ldd	r24, Y+5	; 0x05
    1898:	9e 81       	ldd	r25, Y+6	; 0x06
    189a:	00 97       	sbiw	r24, 0x00	; 0
    189c:	71 f0       	breq	.+28     	; 0x18ba <DIO_enuSetPinValue+0x72>
    189e:	bc c0       	rjmp	.+376    	; 0x1a18 <DIO_enuSetPinValue+0x1d0>
    18a0:	2d 81       	ldd	r18, Y+5	; 0x05
    18a2:	3e 81       	ldd	r19, Y+6	; 0x06
    18a4:	22 30       	cpi	r18, 0x02	; 2
    18a6:	31 05       	cpc	r19, r1
    18a8:	09 f4       	brne	.+2      	; 0x18ac <DIO_enuSetPinValue+0x64>
    18aa:	5f c0       	rjmp	.+190    	; 0x196a <DIO_enuSetPinValue+0x122>
    18ac:	8d 81       	ldd	r24, Y+5	; 0x05
    18ae:	9e 81       	ldd	r25, Y+6	; 0x06
    18b0:	83 30       	cpi	r24, 0x03	; 3
    18b2:	91 05       	cpc	r25, r1
    18b4:	09 f4       	brne	.+2      	; 0x18b8 <DIO_enuSetPinValue+0x70>
    18b6:	85 c0       	rjmp	.+266    	; 0x19c2 <DIO_enuSetPinValue+0x17a>
    18b8:	af c0       	rjmp	.+350    	; 0x1a18 <DIO_enuSetPinValue+0x1d0>
		{
		case DIO_PORTA :
			if( Copy_u8Val == DIO_LOW)
    18ba:	8c 81       	ldd	r24, Y+4	; 0x04
    18bc:	88 23       	and	r24, r24
    18be:	a9 f4       	brne	.+42     	; 0x18ea <DIO_enuSetPinValue+0xa2>
			{
				PORTA &=~(DIO_MASK_BIT<<Copy_u8PinID);
    18c0:	ab e3       	ldi	r26, 0x3B	; 59
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	eb e3       	ldi	r30, 0x3B	; 59
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	48 2f       	mov	r20, r24
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	28 2f       	mov	r18, r24
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	02 2e       	mov	r0, r18
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <DIO_enuSetPinValue+0x96>
    18da:	88 0f       	add	r24, r24
    18dc:	99 1f       	adc	r25, r25
    18de:	0a 94       	dec	r0
    18e0:	e2 f7       	brpl	.-8      	; 0x18da <DIO_enuSetPinValue+0x92>
    18e2:	80 95       	com	r24
    18e4:	84 23       	and	r24, r20
    18e6:	8c 93       	st	X, r24
    18e8:	97 c0       	rjmp	.+302    	; 0x1a18 <DIO_enuSetPinValue+0x1d0>
			}
			else
			{
				PORTA |=(DIO_MASK_BIT<<Copy_u8PinID);
    18ea:	ab e3       	ldi	r26, 0x3B	; 59
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	eb e3       	ldi	r30, 0x3B	; 59
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	48 2f       	mov	r20, r24
    18f6:	8b 81       	ldd	r24, Y+3	; 0x03
    18f8:	28 2f       	mov	r18, r24
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	02 2e       	mov	r0, r18
    1902:	02 c0       	rjmp	.+4      	; 0x1908 <DIO_enuSetPinValue+0xc0>
    1904:	88 0f       	add	r24, r24
    1906:	99 1f       	adc	r25, r25
    1908:	0a 94       	dec	r0
    190a:	e2 f7       	brpl	.-8      	; 0x1904 <DIO_enuSetPinValue+0xbc>
    190c:	84 2b       	or	r24, r20
    190e:	8c 93       	st	X, r24
    1910:	83 c0       	rjmp	.+262    	; 0x1a18 <DIO_enuSetPinValue+0x1d0>
			}

			break;

		case DIO_PORTB :
			if( Copy_u8Val == DIO_LOW)
    1912:	8c 81       	ldd	r24, Y+4	; 0x04
    1914:	88 23       	and	r24, r24
    1916:	a9 f4       	brne	.+42     	; 0x1942 <DIO_enuSetPinValue+0xfa>
			{
				PORTB &=~(DIO_MASK_BIT<<Copy_u8PinID);
    1918:	a8 e3       	ldi	r26, 0x38	; 56
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	e8 e3       	ldi	r30, 0x38	; 56
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	48 2f       	mov	r20, r24
    1924:	8b 81       	ldd	r24, Y+3	; 0x03
    1926:	28 2f       	mov	r18, r24
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	02 2e       	mov	r0, r18
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <DIO_enuSetPinValue+0xee>
    1932:	88 0f       	add	r24, r24
    1934:	99 1f       	adc	r25, r25
    1936:	0a 94       	dec	r0
    1938:	e2 f7       	brpl	.-8      	; 0x1932 <DIO_enuSetPinValue+0xea>
    193a:	80 95       	com	r24
    193c:	84 23       	and	r24, r20
    193e:	8c 93       	st	X, r24
    1940:	6b c0       	rjmp	.+214    	; 0x1a18 <DIO_enuSetPinValue+0x1d0>
			}
			else
			{
				PORTB |=(DIO_MASK_BIT<<Copy_u8PinID);
    1942:	a8 e3       	ldi	r26, 0x38	; 56
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	e8 e3       	ldi	r30, 0x38	; 56
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	48 2f       	mov	r20, r24
    194e:	8b 81       	ldd	r24, Y+3	; 0x03
    1950:	28 2f       	mov	r18, r24
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	02 2e       	mov	r0, r18
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <DIO_enuSetPinValue+0x118>
    195c:	88 0f       	add	r24, r24
    195e:	99 1f       	adc	r25, r25
    1960:	0a 94       	dec	r0
    1962:	e2 f7       	brpl	.-8      	; 0x195c <DIO_enuSetPinValue+0x114>
    1964:	84 2b       	or	r24, r20
    1966:	8c 93       	st	X, r24
    1968:	57 c0       	rjmp	.+174    	; 0x1a18 <DIO_enuSetPinValue+0x1d0>

			break;

		case DIO_PORTC :

			if( Copy_u8Val == DIO_LOW)
    196a:	8c 81       	ldd	r24, Y+4	; 0x04
    196c:	88 23       	and	r24, r24
    196e:	a9 f4       	brne	.+42     	; 0x199a <DIO_enuSetPinValue+0x152>
			{
				PORTC &=~(DIO_MASK_BIT<<Copy_u8PinID);
    1970:	a5 e3       	ldi	r26, 0x35	; 53
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	e5 e3       	ldi	r30, 0x35	; 53
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	48 2f       	mov	r20, r24
    197c:	8b 81       	ldd	r24, Y+3	; 0x03
    197e:	28 2f       	mov	r18, r24
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	02 2e       	mov	r0, r18
    1988:	02 c0       	rjmp	.+4      	; 0x198e <DIO_enuSetPinValue+0x146>
    198a:	88 0f       	add	r24, r24
    198c:	99 1f       	adc	r25, r25
    198e:	0a 94       	dec	r0
    1990:	e2 f7       	brpl	.-8      	; 0x198a <DIO_enuSetPinValue+0x142>
    1992:	80 95       	com	r24
    1994:	84 23       	and	r24, r20
    1996:	8c 93       	st	X, r24
    1998:	3f c0       	rjmp	.+126    	; 0x1a18 <DIO_enuSetPinValue+0x1d0>
			}
			else
			{
				PORTC |=(DIO_MASK_BIT<<Copy_u8PinID);
    199a:	a5 e3       	ldi	r26, 0x35	; 53
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	e5 e3       	ldi	r30, 0x35	; 53
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	48 2f       	mov	r20, r24
    19a6:	8b 81       	ldd	r24, Y+3	; 0x03
    19a8:	28 2f       	mov	r18, r24
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	02 2e       	mov	r0, r18
    19b2:	02 c0       	rjmp	.+4      	; 0x19b8 <DIO_enuSetPinValue+0x170>
    19b4:	88 0f       	add	r24, r24
    19b6:	99 1f       	adc	r25, r25
    19b8:	0a 94       	dec	r0
    19ba:	e2 f7       	brpl	.-8      	; 0x19b4 <DIO_enuSetPinValue+0x16c>
    19bc:	84 2b       	or	r24, r20
    19be:	8c 93       	st	X, r24
    19c0:	2b c0       	rjmp	.+86     	; 0x1a18 <DIO_enuSetPinValue+0x1d0>
			}

			break;

		case DIO_PORTD :
			if( Copy_u8Val == DIO_LOW)
    19c2:	8c 81       	ldd	r24, Y+4	; 0x04
    19c4:	88 23       	and	r24, r24
    19c6:	a9 f4       	brne	.+42     	; 0x19f2 <DIO_enuSetPinValue+0x1aa>
			{
				PORTD &=~(DIO_MASK_BIT<<Copy_u8PinID);
    19c8:	a2 e3       	ldi	r26, 0x32	; 50
    19ca:	b0 e0       	ldi	r27, 0x00	; 0
    19cc:	e2 e3       	ldi	r30, 0x32	; 50
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	80 81       	ld	r24, Z
    19d2:	48 2f       	mov	r20, r24
    19d4:	8b 81       	ldd	r24, Y+3	; 0x03
    19d6:	28 2f       	mov	r18, r24
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	02 2e       	mov	r0, r18
    19e0:	02 c0       	rjmp	.+4      	; 0x19e6 <DIO_enuSetPinValue+0x19e>
    19e2:	88 0f       	add	r24, r24
    19e4:	99 1f       	adc	r25, r25
    19e6:	0a 94       	dec	r0
    19e8:	e2 f7       	brpl	.-8      	; 0x19e2 <DIO_enuSetPinValue+0x19a>
    19ea:	80 95       	com	r24
    19ec:	84 23       	and	r24, r20
    19ee:	8c 93       	st	X, r24
    19f0:	13 c0       	rjmp	.+38     	; 0x1a18 <DIO_enuSetPinValue+0x1d0>
			}
			else
			{
				PORTD |=(DIO_MASK_BIT<<Copy_u8PinID);
    19f2:	a2 e3       	ldi	r26, 0x32	; 50
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	e2 e3       	ldi	r30, 0x32	; 50
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	48 2f       	mov	r20, r24
    19fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1a00:	28 2f       	mov	r18, r24
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	02 2e       	mov	r0, r18
    1a0a:	02 c0       	rjmp	.+4      	; 0x1a10 <DIO_enuSetPinValue+0x1c8>
    1a0c:	88 0f       	add	r24, r24
    1a0e:	99 1f       	adc	r25, r25
    1a10:	0a 94       	dec	r0
    1a12:	e2 f7       	brpl	.-8      	; 0x1a0c <DIO_enuSetPinValue+0x1c4>
    1a14:	84 2b       	or	r24, r20
    1a16:	8c 93       	st	X, r24
			}

			break;

		}
		Local_enuerrorState = ES_OK;
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	89 83       	std	Y+1, r24	; 0x01
    1a1c:	02 c0       	rjmp	.+4      	; 0x1a22 <DIO_enuSetPinValue+0x1da>
	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
    1a1e:	83 e0       	ldi	r24, 0x03	; 3
    1a20:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuerrorState  ;
    1a22:	89 81       	ldd	r24, Y+1	; 0x01
}//End of DIO_enuSetPinValue().
    1a24:	26 96       	adiw	r28, 0x06	; 6
    1a26:	0f b6       	in	r0, 0x3f	; 63
    1a28:	f8 94       	cli
    1a2a:	de bf       	out	0x3e, r29	; 62
    1a2c:	0f be       	out	0x3f, r0	; 63
    1a2e:	cd bf       	out	0x3d, r28	; 61
    1a30:	cf 91       	pop	r28
    1a32:	df 91       	pop	r29
    1a34:	08 95       	ret

00001a36 <DIO_enuToggelPin>:
/*                                        DIO_PIN2       ,   DIO_PIN6       */
/*                                        DIO_PIN3       ,   DIO_PIN7       */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuToggelPin(u8  Copy_u8PortID, u8 Copy_u8PinID  )
{
    1a36:	df 93       	push	r29
    1a38:	cf 93       	push	r28
    1a3a:	00 d0       	rcall	.+0      	; 0x1a3c <DIO_enuToggelPin+0x6>
    1a3c:	00 d0       	rcall	.+0      	; 0x1a3e <DIO_enuToggelPin+0x8>
    1a3e:	0f 92       	push	r0
    1a40:	cd b7       	in	r28, 0x3d	; 61
    1a42:	de b7       	in	r29, 0x3e	; 62
    1a44:	8a 83       	std	Y+2, r24	; 0x02
    1a46:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuerrorState = ES_NOK ;
    1a48:	19 82       	std	Y+1, r1	; 0x01

	if( (Copy_u8PortID <= DIO_PORTD) &&  (Copy_u8PinID <= DIO_PIN7) )
    1a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4c:	84 30       	cpi	r24, 0x04	; 4
    1a4e:	08 f0       	brcs	.+2      	; 0x1a52 <DIO_enuToggelPin+0x1c>
    1a50:	75 c0       	rjmp	.+234    	; 0x1b3c <DIO_enuToggelPin+0x106>
    1a52:	8b 81       	ldd	r24, Y+3	; 0x03
    1a54:	88 30       	cpi	r24, 0x08	; 8
    1a56:	08 f0       	brcs	.+2      	; 0x1a5a <DIO_enuToggelPin+0x24>
    1a58:	71 c0       	rjmp	.+226    	; 0x1b3c <DIO_enuToggelPin+0x106>
	{
		/**********************************************************
		 * Switching for the suitable case .
		 **********************************************************/
		switch( Copy_u8PortID )
    1a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5c:	28 2f       	mov	r18, r24
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	3d 83       	std	Y+5, r19	; 0x05
    1a62:	2c 83       	std	Y+4, r18	; 0x04
    1a64:	8c 81       	ldd	r24, Y+4	; 0x04
    1a66:	9d 81       	ldd	r25, Y+5	; 0x05
    1a68:	81 30       	cpi	r24, 0x01	; 1
    1a6a:	91 05       	cpc	r25, r1
    1a6c:	49 f1       	breq	.+82     	; 0x1ac0 <DIO_enuToggelPin+0x8a>
    1a6e:	2c 81       	ldd	r18, Y+4	; 0x04
    1a70:	3d 81       	ldd	r19, Y+5	; 0x05
    1a72:	22 30       	cpi	r18, 0x02	; 2
    1a74:	31 05       	cpc	r19, r1
    1a76:	2c f4       	brge	.+10     	; 0x1a82 <DIO_enuToggelPin+0x4c>
    1a78:	8c 81       	ldd	r24, Y+4	; 0x04
    1a7a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a7c:	00 97       	sbiw	r24, 0x00	; 0
    1a7e:	61 f0       	breq	.+24     	; 0x1a98 <DIO_enuToggelPin+0x62>
    1a80:	5a c0       	rjmp	.+180    	; 0x1b36 <DIO_enuToggelPin+0x100>
    1a82:	2c 81       	ldd	r18, Y+4	; 0x04
    1a84:	3d 81       	ldd	r19, Y+5	; 0x05
    1a86:	22 30       	cpi	r18, 0x02	; 2
    1a88:	31 05       	cpc	r19, r1
    1a8a:	71 f1       	breq	.+92     	; 0x1ae8 <DIO_enuToggelPin+0xb2>
    1a8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a90:	83 30       	cpi	r24, 0x03	; 3
    1a92:	91 05       	cpc	r25, r1
    1a94:	e9 f1       	breq	.+122    	; 0x1b10 <DIO_enuToggelPin+0xda>
    1a96:	4f c0       	rjmp	.+158    	; 0x1b36 <DIO_enuToggelPin+0x100>
		{
		case DIO_PORTA :
			PORTA ^=(DIO_MASK_BIT<<Copy_u8PinID);
    1a98:	ab e3       	ldi	r26, 0x3B	; 59
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	eb e3       	ldi	r30, 0x3B	; 59
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	48 2f       	mov	r20, r24
    1aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa6:	28 2f       	mov	r18, r24
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	02 2e       	mov	r0, r18
    1ab0:	02 c0       	rjmp	.+4      	; 0x1ab6 <DIO_enuToggelPin+0x80>
    1ab2:	88 0f       	add	r24, r24
    1ab4:	99 1f       	adc	r25, r25
    1ab6:	0a 94       	dec	r0
    1ab8:	e2 f7       	brpl	.-8      	; 0x1ab2 <DIO_enuToggelPin+0x7c>
    1aba:	84 27       	eor	r24, r20
    1abc:	8c 93       	st	X, r24
    1abe:	3b c0       	rjmp	.+118    	; 0x1b36 <DIO_enuToggelPin+0x100>
			break;

		case DIO_PORTB :
			PORTB ^=(DIO_MASK_BIT<<Copy_u8PinID);
    1ac0:	a8 e3       	ldi	r26, 0x38	; 56
    1ac2:	b0 e0       	ldi	r27, 0x00	; 0
    1ac4:	e8 e3       	ldi	r30, 0x38	; 56
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	48 2f       	mov	r20, r24
    1acc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ace:	28 2f       	mov	r18, r24
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	02 2e       	mov	r0, r18
    1ad8:	02 c0       	rjmp	.+4      	; 0x1ade <DIO_enuToggelPin+0xa8>
    1ada:	88 0f       	add	r24, r24
    1adc:	99 1f       	adc	r25, r25
    1ade:	0a 94       	dec	r0
    1ae0:	e2 f7       	brpl	.-8      	; 0x1ada <DIO_enuToggelPin+0xa4>
    1ae2:	84 27       	eor	r24, r20
    1ae4:	8c 93       	st	X, r24
    1ae6:	27 c0       	rjmp	.+78     	; 0x1b36 <DIO_enuToggelPin+0x100>
			break;

		case DIO_PORTC :
			PORTC ^=(DIO_MASK_BIT<<Copy_u8PinID);
    1ae8:	a5 e3       	ldi	r26, 0x35	; 53
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	e5 e3       	ldi	r30, 0x35	; 53
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	48 2f       	mov	r20, r24
    1af4:	8b 81       	ldd	r24, Y+3	; 0x03
    1af6:	28 2f       	mov	r18, r24
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	02 2e       	mov	r0, r18
    1b00:	02 c0       	rjmp	.+4      	; 0x1b06 <DIO_enuToggelPin+0xd0>
    1b02:	88 0f       	add	r24, r24
    1b04:	99 1f       	adc	r25, r25
    1b06:	0a 94       	dec	r0
    1b08:	e2 f7       	brpl	.-8      	; 0x1b02 <DIO_enuToggelPin+0xcc>
    1b0a:	84 27       	eor	r24, r20
    1b0c:	8c 93       	st	X, r24
    1b0e:	13 c0       	rjmp	.+38     	; 0x1b36 <DIO_enuToggelPin+0x100>
			break;

		case DIO_PORTD :
			PORTD ^=(DIO_MASK_BIT<<Copy_u8PinID);
    1b10:	a2 e3       	ldi	r26, 0x32	; 50
    1b12:	b0 e0       	ldi	r27, 0x00	; 0
    1b14:	e2 e3       	ldi	r30, 0x32	; 50
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
    1b1a:	48 2f       	mov	r20, r24
    1b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1e:	28 2f       	mov	r18, r24
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	02 2e       	mov	r0, r18
    1b28:	02 c0       	rjmp	.+4      	; 0x1b2e <DIO_enuToggelPin+0xf8>
    1b2a:	88 0f       	add	r24, r24
    1b2c:	99 1f       	adc	r25, r25
    1b2e:	0a 94       	dec	r0
    1b30:	e2 f7       	brpl	.-8      	; 0x1b2a <DIO_enuToggelPin+0xf4>
    1b32:	84 27       	eor	r24, r20
    1b34:	8c 93       	st	X, r24
			break;
		}

		Local_enuerrorState = ES_OK;
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	89 83       	std	Y+1, r24	; 0x01
    1b3a:	02 c0       	rjmp	.+4      	; 0x1b40 <DIO_enuToggelPin+0x10a>

	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
    1b3c:	83 e0       	ldi	r24, 0x03	; 3
    1b3e:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuerrorState  ;
    1b40:	89 81       	ldd	r24, Y+1	; 0x01
}//End of DIO_enuToggelPin().
    1b42:	0f 90       	pop	r0
    1b44:	0f 90       	pop	r0
    1b46:	0f 90       	pop	r0
    1b48:	0f 90       	pop	r0
    1b4a:	0f 90       	pop	r0
    1b4c:	cf 91       	pop	r28
    1b4e:	df 91       	pop	r29
    1b50:	08 95       	ret

00001b52 <DIO_enuGetPinVlaue>:
/*                 : Arg.3: Address of u8 variable.                              */
/*                                                                               */
/* Return          : ERROR_STATE eum.                                            */
/*********************************************************************************/
ES_t DIO_enuGetPinVlaue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8* Copy_pu8PinVal)
{
    1b52:	df 93       	push	r29
    1b54:	cf 93       	push	r28
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62
    1b5a:	27 97       	sbiw	r28, 0x07	; 7
    1b5c:	0f b6       	in	r0, 0x3f	; 63
    1b5e:	f8 94       	cli
    1b60:	de bf       	out	0x3e, r29	; 62
    1b62:	0f be       	out	0x3f, r0	; 63
    1b64:	cd bf       	out	0x3d, r28	; 61
    1b66:	8a 83       	std	Y+2, r24	; 0x02
    1b68:	6b 83       	std	Y+3, r22	; 0x03
    1b6a:	5d 83       	std	Y+5, r21	; 0x05
    1b6c:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuerrorState = ES_NOK ;
    1b6e:	19 82       	std	Y+1, r1	; 0x01

	// Check to ensure that the passed address is not equal Null.
	if( Copy_pu8PinVal != NULL )
    1b70:	8c 81       	ldd	r24, Y+4	; 0x04
    1b72:	9d 81       	ldd	r25, Y+5	; 0x05
    1b74:	00 97       	sbiw	r24, 0x00	; 0
    1b76:	09 f4       	brne	.+2      	; 0x1b7a <DIO_enuGetPinVlaue+0x28>
    1b78:	7e c0       	rjmp	.+252    	; 0x1c76 <DIO_enuGetPinVlaue+0x124>
	{
		if( (Copy_u8PortID <= DIO_PORTD) &&  (Copy_u8PinID <= DIO_PIN7) )
    1b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7c:	84 30       	cpi	r24, 0x04	; 4
    1b7e:	08 f0       	brcs	.+2      	; 0x1b82 <DIO_enuGetPinVlaue+0x30>
    1b80:	77 c0       	rjmp	.+238    	; 0x1c70 <DIO_enuGetPinVlaue+0x11e>
    1b82:	8b 81       	ldd	r24, Y+3	; 0x03
    1b84:	88 30       	cpi	r24, 0x08	; 8
    1b86:	08 f0       	brcs	.+2      	; 0x1b8a <DIO_enuGetPinVlaue+0x38>
    1b88:	73 c0       	rjmp	.+230    	; 0x1c70 <DIO_enuGetPinVlaue+0x11e>
		{
			/**********************************************************
			 * Switching for the suitable case .
			 **********************************************************/
			switch( Copy_u8PortID )
    1b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8c:	28 2f       	mov	r18, r24
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	3f 83       	std	Y+7, r19	; 0x07
    1b92:	2e 83       	std	Y+6, r18	; 0x06
    1b94:	4e 81       	ldd	r20, Y+6	; 0x06
    1b96:	5f 81       	ldd	r21, Y+7	; 0x07
    1b98:	41 30       	cpi	r20, 0x01	; 1
    1b9a:	51 05       	cpc	r21, r1
    1b9c:	59 f1       	breq	.+86     	; 0x1bf4 <DIO_enuGetPinVlaue+0xa2>
    1b9e:	8e 81       	ldd	r24, Y+6	; 0x06
    1ba0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ba2:	82 30       	cpi	r24, 0x02	; 2
    1ba4:	91 05       	cpc	r25, r1
    1ba6:	34 f4       	brge	.+12     	; 0x1bb4 <DIO_enuGetPinVlaue+0x62>
    1ba8:	2e 81       	ldd	r18, Y+6	; 0x06
    1baa:	3f 81       	ldd	r19, Y+7	; 0x07
    1bac:	21 15       	cp	r18, r1
    1bae:	31 05       	cpc	r19, r1
    1bb0:	69 f0       	breq	.+26     	; 0x1bcc <DIO_enuGetPinVlaue+0x7a>
    1bb2:	5b c0       	rjmp	.+182    	; 0x1c6a <DIO_enuGetPinVlaue+0x118>
    1bb4:	4e 81       	ldd	r20, Y+6	; 0x06
    1bb6:	5f 81       	ldd	r21, Y+7	; 0x07
    1bb8:	42 30       	cpi	r20, 0x02	; 2
    1bba:	51 05       	cpc	r21, r1
    1bbc:	79 f1       	breq	.+94     	; 0x1c1c <DIO_enuGetPinVlaue+0xca>
    1bbe:	8e 81       	ldd	r24, Y+6	; 0x06
    1bc0:	9f 81       	ldd	r25, Y+7	; 0x07
    1bc2:	83 30       	cpi	r24, 0x03	; 3
    1bc4:	91 05       	cpc	r25, r1
    1bc6:	09 f4       	brne	.+2      	; 0x1bca <DIO_enuGetPinVlaue+0x78>
    1bc8:	3d c0       	rjmp	.+122    	; 0x1c44 <DIO_enuGetPinVlaue+0xf2>
    1bca:	4f c0       	rjmp	.+158    	; 0x1c6a <DIO_enuGetPinVlaue+0x118>
			{
			case DIO_PORTA :
				*Copy_pu8PinVal = (PINA>>Copy_u8PinID)&DIO_MASK_BIT;
    1bcc:	e9 e3       	ldi	r30, 0x39	; 57
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	80 81       	ld	r24, Z
    1bd2:	28 2f       	mov	r18, r24
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd8:	88 2f       	mov	r24, r24
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	a9 01       	movw	r20, r18
    1bde:	02 c0       	rjmp	.+4      	; 0x1be4 <DIO_enuGetPinVlaue+0x92>
    1be0:	55 95       	asr	r21
    1be2:	47 95       	ror	r20
    1be4:	8a 95       	dec	r24
    1be6:	e2 f7       	brpl	.-8      	; 0x1be0 <DIO_enuGetPinVlaue+0x8e>
    1be8:	ca 01       	movw	r24, r20
    1bea:	81 70       	andi	r24, 0x01	; 1
    1bec:	ec 81       	ldd	r30, Y+4	; 0x04
    1bee:	fd 81       	ldd	r31, Y+5	; 0x05
    1bf0:	80 83       	st	Z, r24
    1bf2:	3b c0       	rjmp	.+118    	; 0x1c6a <DIO_enuGetPinVlaue+0x118>
				break;

			case DIO_PORTB :
				*Copy_pu8PinVal = (PINB>>Copy_u8PinID)&DIO_MASK_BIT;
    1bf4:	e6 e3       	ldi	r30, 0x36	; 54
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	28 2f       	mov	r18, r24
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1c00:	88 2f       	mov	r24, r24
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	a9 01       	movw	r20, r18
    1c06:	02 c0       	rjmp	.+4      	; 0x1c0c <DIO_enuGetPinVlaue+0xba>
    1c08:	55 95       	asr	r21
    1c0a:	47 95       	ror	r20
    1c0c:	8a 95       	dec	r24
    1c0e:	e2 f7       	brpl	.-8      	; 0x1c08 <DIO_enuGetPinVlaue+0xb6>
    1c10:	ca 01       	movw	r24, r20
    1c12:	81 70       	andi	r24, 0x01	; 1
    1c14:	ec 81       	ldd	r30, Y+4	; 0x04
    1c16:	fd 81       	ldd	r31, Y+5	; 0x05
    1c18:	80 83       	st	Z, r24
    1c1a:	27 c0       	rjmp	.+78     	; 0x1c6a <DIO_enuGetPinVlaue+0x118>
				break;

			case DIO_PORTC :
				*Copy_pu8PinVal = (PINC>>Copy_u8PinID)&DIO_MASK_BIT;
    1c1c:	e3 e3       	ldi	r30, 0x33	; 51
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	28 2f       	mov	r18, r24
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	8b 81       	ldd	r24, Y+3	; 0x03
    1c28:	88 2f       	mov	r24, r24
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	a9 01       	movw	r20, r18
    1c2e:	02 c0       	rjmp	.+4      	; 0x1c34 <DIO_enuGetPinVlaue+0xe2>
    1c30:	55 95       	asr	r21
    1c32:	47 95       	ror	r20
    1c34:	8a 95       	dec	r24
    1c36:	e2 f7       	brpl	.-8      	; 0x1c30 <DIO_enuGetPinVlaue+0xde>
    1c38:	ca 01       	movw	r24, r20
    1c3a:	81 70       	andi	r24, 0x01	; 1
    1c3c:	ec 81       	ldd	r30, Y+4	; 0x04
    1c3e:	fd 81       	ldd	r31, Y+5	; 0x05
    1c40:	80 83       	st	Z, r24
    1c42:	13 c0       	rjmp	.+38     	; 0x1c6a <DIO_enuGetPinVlaue+0x118>
				break;

			case DIO_PORTD :
				*Copy_pu8PinVal = (PIND>>Copy_u8PinID)&DIO_MASK_BIT;
    1c44:	e0 e3       	ldi	r30, 0x30	; 48
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	80 81       	ld	r24, Z
    1c4a:	28 2f       	mov	r18, r24
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c50:	88 2f       	mov	r24, r24
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	a9 01       	movw	r20, r18
    1c56:	02 c0       	rjmp	.+4      	; 0x1c5c <DIO_enuGetPinVlaue+0x10a>
    1c58:	55 95       	asr	r21
    1c5a:	47 95       	ror	r20
    1c5c:	8a 95       	dec	r24
    1c5e:	e2 f7       	brpl	.-8      	; 0x1c58 <DIO_enuGetPinVlaue+0x106>
    1c60:	ca 01       	movw	r24, r20
    1c62:	81 70       	andi	r24, 0x01	; 1
    1c64:	ec 81       	ldd	r30, Y+4	; 0x04
    1c66:	fd 81       	ldd	r31, Y+5	; 0x05
    1c68:	80 83       	st	Z, r24
				break;
			}

			Local_enuerrorState = ES_OK;
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	89 83       	std	Y+1, r24	; 0x01
    1c6e:	05 c0       	rjmp	.+10     	; 0x1c7a <DIO_enuGetPinVlaue+0x128>

		}
		else
		{
			Local_enuerrorState = ES_OUT_OF_RANGE;
    1c70:	83 e0       	ldi	r24, 0x03	; 3
    1c72:	89 83       	std	Y+1, r24	; 0x01
    1c74:	02 c0       	rjmp	.+4      	; 0x1c7a <DIO_enuGetPinVlaue+0x128>
	else
	{
		/**********************************************************
		 * Handle null pointer case.
		 **********************************************************/
		Local_enuerrorState = ES_NULL_POINTER;
    1c76:	82 e0       	ldi	r24, 0x02	; 2
    1c78:	89 83       	std	Y+1, r24	; 0x01
	}



	return Local_enuerrorState  ;
    1c7a:	89 81       	ldd	r24, Y+1	; 0x01
}//End of DIO_enuGetPinVlaue().
    1c7c:	27 96       	adiw	r28, 0x07	; 7
    1c7e:	0f b6       	in	r0, 0x3f	; 63
    1c80:	f8 94       	cli
    1c82:	de bf       	out	0x3e, r29	; 62
    1c84:	0f be       	out	0x3f, r0	; 63
    1c86:	cd bf       	out	0x3d, r28	; 61
    1c88:	cf 91       	pop	r28
    1c8a:	df 91       	pop	r29
    1c8c:	08 95       	ret

00001c8e <Switch_enuInit>:
/* Description     : Utility function to initialize the array of switches.  */
/* Argument        : Address array of type SW_t.                            */
/* Return          : Error state of type ES_t.                              */
/*.................**********************************************************/
ES_t Switch_enuInit(SW_t* Copy_pstrSwitchs)
{
    1c8e:	df 93       	push	r29
    1c90:	cf 93       	push	r28
    1c92:	00 d0       	rcall	.+0      	; 0x1c94 <Switch_enuInit+0x6>
    1c94:	00 d0       	rcall	.+0      	; 0x1c96 <Switch_enuInit+0x8>
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62
    1c9a:	9c 83       	std	Y+4, r25	; 0x04
    1c9c:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK ;
    1c9e:	1a 82       	std	Y+2, r1	; 0x02

	u8 Local_u8Iterator ;

	if( Copy_pstrSwitchs != NULL   )
    1ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca4:	00 97       	sbiw	r24, 0x00	; 0
    1ca6:	09 f4       	brne	.+2      	; 0x1caa <Switch_enuInit+0x1c>
    1ca8:	5c c0       	rjmp	.+184    	; 0x1d62 <Switch_enuInit+0xd4>
	{
		for (Local_u8Iterator = 0 ; Local_u8Iterator < SW_NUM ; Local_u8Iterator++ )
    1caa:	19 82       	std	Y+1, r1	; 0x01
    1cac:	55 c0       	rjmp	.+170    	; 0x1d58 <Switch_enuInit+0xca>
		{

			Local_enuErrorState = DIO_enuSetPinDirection( Copy_pstrSwitchs[Local_u8Iterator].SW_PortID ,
    1cae:	89 81       	ldd	r24, Y+1	; 0x01
    1cb0:	28 2f       	mov	r18, r24
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	c9 01       	movw	r24, r18
    1cb6:	88 0f       	add	r24, r24
    1cb8:	99 1f       	adc	r25, r25
    1cba:	28 0f       	add	r18, r24
    1cbc:	39 1f       	adc	r19, r25
    1cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc2:	fc 01       	movw	r30, r24
    1cc4:	e2 0f       	add	r30, r18
    1cc6:	f3 1f       	adc	r31, r19
    1cc8:	40 81       	ld	r20, Z
    1cca:	89 81       	ldd	r24, Y+1	; 0x01
    1ccc:	28 2f       	mov	r18, r24
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	c9 01       	movw	r24, r18
    1cd2:	88 0f       	add	r24, r24
    1cd4:	99 1f       	adc	r25, r25
    1cd6:	28 0f       	add	r18, r24
    1cd8:	39 1f       	adc	r19, r25
    1cda:	8b 81       	ldd	r24, Y+3	; 0x03
    1cdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cde:	fc 01       	movw	r30, r24
    1ce0:	e2 0f       	add	r30, r18
    1ce2:	f3 1f       	adc	r31, r19
    1ce4:	91 81       	ldd	r25, Z+1	; 0x01
    1ce6:	84 2f       	mov	r24, r20
    1ce8:	69 2f       	mov	r22, r25
    1cea:	40 e0       	ldi	r20, 0x00	; 0
    1cec:	0e 94 2d 0b 	call	0x165a	; 0x165a <DIO_enuSetPinDirection>
    1cf0:	8a 83       	std	Y+2, r24	; 0x02
					Copy_pstrSwitchs[Local_u8Iterator].SW_PinID ,
					DIO_INPTU_PIN);

			Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrSwitchs[Local_u8Iterator].SW_PortID ,
    1cf2:	89 81       	ldd	r24, Y+1	; 0x01
    1cf4:	28 2f       	mov	r18, r24
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	c9 01       	movw	r24, r18
    1cfa:	88 0f       	add	r24, r24
    1cfc:	99 1f       	adc	r25, r25
    1cfe:	28 0f       	add	r18, r24
    1d00:	39 1f       	adc	r19, r25
    1d02:	8b 81       	ldd	r24, Y+3	; 0x03
    1d04:	9c 81       	ldd	r25, Y+4	; 0x04
    1d06:	fc 01       	movw	r30, r24
    1d08:	e2 0f       	add	r30, r18
    1d0a:	f3 1f       	adc	r31, r19
    1d0c:	50 81       	ld	r21, Z
    1d0e:	89 81       	ldd	r24, Y+1	; 0x01
    1d10:	28 2f       	mov	r18, r24
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	c9 01       	movw	r24, r18
    1d16:	88 0f       	add	r24, r24
    1d18:	99 1f       	adc	r25, r25
    1d1a:	28 0f       	add	r18, r24
    1d1c:	39 1f       	adc	r19, r25
    1d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d20:	9c 81       	ldd	r25, Y+4	; 0x04
    1d22:	fc 01       	movw	r30, r24
    1d24:	e2 0f       	add	r30, r18
    1d26:	f3 1f       	adc	r31, r19
    1d28:	41 81       	ldd	r20, Z+1	; 0x01
    1d2a:	89 81       	ldd	r24, Y+1	; 0x01
    1d2c:	28 2f       	mov	r18, r24
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	c9 01       	movw	r24, r18
    1d32:	88 0f       	add	r24, r24
    1d34:	99 1f       	adc	r25, r25
    1d36:	28 0f       	add	r18, r24
    1d38:	39 1f       	adc	r19, r25
    1d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d3e:	fc 01       	movw	r30, r24
    1d40:	e2 0f       	add	r30, r18
    1d42:	f3 1f       	adc	r31, r19
    1d44:	92 81       	ldd	r25, Z+2	; 0x02
    1d46:	85 2f       	mov	r24, r21
    1d48:	64 2f       	mov	r22, r20
    1d4a:	49 2f       	mov	r20, r25
    1d4c:	0e 94 24 0c 	call	0x1848	; 0x1848 <DIO_enuSetPinValue>
    1d50:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8Iterator ;

	if( Copy_pstrSwitchs != NULL   )
	{
		for (Local_u8Iterator = 0 ; Local_u8Iterator < SW_NUM ; Local_u8Iterator++ )
    1d52:	89 81       	ldd	r24, Y+1	; 0x01
    1d54:	8f 5f       	subi	r24, 0xFF	; 255
    1d56:	89 83       	std	Y+1, r24	; 0x01
    1d58:	89 81       	ldd	r24, Y+1	; 0x01
    1d5a:	88 23       	and	r24, r24
    1d5c:	09 f4       	brne	.+2      	; 0x1d60 <Switch_enuInit+0xd2>
    1d5e:	a7 cf       	rjmp	.-178    	; 0x1cae <Switch_enuInit+0x20>
    1d60:	02 c0       	rjmp	.+4      	; 0x1d66 <Switch_enuInit+0xd8>

		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER ;
    1d62:	82 e0       	ldi	r24, 0x02	; 2
    1d64:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_enuErrorState ;
    1d66:	8a 81       	ldd	r24, Y+2	; 0x02
}//End of Switch_enuInit.
    1d68:	0f 90       	pop	r0
    1d6a:	0f 90       	pop	r0
    1d6c:	0f 90       	pop	r0
    1d6e:	0f 90       	pop	r0
    1d70:	cf 91       	pop	r28
    1d72:	df 91       	pop	r29
    1d74:	08 95       	ret

00001d76 <Switch_enuGetState>:
/*                                       .               .                 */
/*                                                                         */
/* Return          : Error state of type ES_t.                             */
/*..........................************************************************/
ES_t Switch_enuGetState(SW_t* Copy_pstrSwitchs , u8* Copy_pu8SwState)
{
    1d76:	df 93       	push	r29
    1d78:	cf 93       	push	r28
    1d7a:	cd b7       	in	r28, 0x3d	; 61
    1d7c:	de b7       	in	r29, 0x3e	; 62
    1d7e:	27 97       	sbiw	r28, 0x07	; 7
    1d80:	0f b6       	in	r0, 0x3f	; 63
    1d82:	f8 94       	cli
    1d84:	de bf       	out	0x3e, r29	; 62
    1d86:	0f be       	out	0x3f, r0	; 63
    1d88:	cd bf       	out	0x3d, r28	; 61
    1d8a:	9d 83       	std	Y+5, r25	; 0x05
    1d8c:	8c 83       	std	Y+4, r24	; 0x04
    1d8e:	7f 83       	std	Y+7, r23	; 0x07
    1d90:	6e 83       	std	Y+6, r22	; 0x06
	ES_t Local_enuErrorState = ES_NOK ;
    1d92:	1a 82       	std	Y+2, r1	; 0x02

	if( (Copy_pstrSwitchs != NULL) && (Copy_pu8SwState != NULL))
    1d94:	8c 81       	ldd	r24, Y+4	; 0x04
    1d96:	9d 81       	ldd	r25, Y+5	; 0x05
    1d98:	00 97       	sbiw	r24, 0x00	; 0
    1d9a:	09 f4       	brne	.+2      	; 0x1d9e <Switch_enuGetState+0x28>
    1d9c:	43 c0       	rjmp	.+134    	; 0x1e24 <Switch_enuGetState+0xae>
    1d9e:	8e 81       	ldd	r24, Y+6	; 0x06
    1da0:	9f 81       	ldd	r25, Y+7	; 0x07
    1da2:	00 97       	sbiw	r24, 0x00	; 0
    1da4:	09 f4       	brne	.+2      	; 0x1da8 <Switch_enuGetState+0x32>
    1da6:	3e c0       	rjmp	.+124    	; 0x1e24 <Switch_enuGetState+0xae>
	{
		u8 Local_u8Connection = Copy_pstrSwitchs->SW_Status ;
    1da8:	ec 81       	ldd	r30, Y+4	; 0x04
    1daa:	fd 81       	ldd	r31, Y+5	; 0x05
    1dac:	82 81       	ldd	r24, Z+2	; 0x02
    1dae:	89 83       	std	Y+1, r24	; 0x01
		u8 Local_u8SwPinread = 0;
    1db0:	1b 82       	std	Y+3, r1	; 0x03

		if( Local_u8Connection == DIO_PULL_UP_PIN )
    1db2:	89 81       	ldd	r24, Y+1	; 0x01
    1db4:	81 30       	cpi	r24, 0x01	; 1
    1db6:	c9 f4       	brne	.+50     	; 0x1dea <Switch_enuGetState+0x74>
		{
			DIO_enuGetPinVlaue( Copy_pstrSwitchs->SW_PortID ,Copy_pstrSwitchs->SW_PinID , &Local_u8SwPinread);
    1db8:	ec 81       	ldd	r30, Y+4	; 0x04
    1dba:	fd 81       	ldd	r31, Y+5	; 0x05
    1dbc:	80 81       	ld	r24, Z
    1dbe:	ec 81       	ldd	r30, Y+4	; 0x04
    1dc0:	fd 81       	ldd	r31, Y+5	; 0x05
    1dc2:	91 81       	ldd	r25, Z+1	; 0x01
    1dc4:	9e 01       	movw	r18, r28
    1dc6:	2d 5f       	subi	r18, 0xFD	; 253
    1dc8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dca:	69 2f       	mov	r22, r25
    1dcc:	a9 01       	movw	r20, r18
    1dce:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_enuGetPinVlaue>

			if ( Local_u8SwPinread )
    1dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd4:	88 23       	and	r24, r24
    1dd6:	21 f0       	breq	.+8      	; 0x1de0 <Switch_enuGetState+0x6a>
			{
				//released .
				*Copy_pu8SwState  =  SW_RELEASED ;
    1dd8:	ee 81       	ldd	r30, Y+6	; 0x06
    1dda:	ff 81       	ldd	r31, Y+7	; 0x07
    1ddc:	10 82       	st	Z, r1
    1dde:	1f c0       	rjmp	.+62     	; 0x1e1e <Switch_enuGetState+0xa8>
			}
			else
			{
				//pressed.
				*Copy_pu8SwState  =  SW_PRESSED ;
    1de0:	ee 81       	ldd	r30, Y+6	; 0x06
    1de2:	ff 81       	ldd	r31, Y+7	; 0x07
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	80 83       	st	Z, r24
    1de8:	1a c0       	rjmp	.+52     	; 0x1e1e <Switch_enuGetState+0xa8>


		}
		else
		{
			DIO_enuGetPinVlaue( Copy_pstrSwitchs->SW_PortID ,Copy_pstrSwitchs->SW_PinID , &Local_u8SwPinread);
    1dea:	ec 81       	ldd	r30, Y+4	; 0x04
    1dec:	fd 81       	ldd	r31, Y+5	; 0x05
    1dee:	80 81       	ld	r24, Z
    1df0:	ec 81       	ldd	r30, Y+4	; 0x04
    1df2:	fd 81       	ldd	r31, Y+5	; 0x05
    1df4:	91 81       	ldd	r25, Z+1	; 0x01
    1df6:	9e 01       	movw	r18, r28
    1df8:	2d 5f       	subi	r18, 0xFD	; 253
    1dfa:	3f 4f       	sbci	r19, 0xFF	; 255
    1dfc:	69 2f       	mov	r22, r25
    1dfe:	a9 01       	movw	r20, r18
    1e00:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_enuGetPinVlaue>

			if ( Local_u8SwPinread )
    1e04:	8b 81       	ldd	r24, Y+3	; 0x03
    1e06:	88 23       	and	r24, r24
    1e08:	29 f0       	breq	.+10     	; 0x1e14 <Switch_enuGetState+0x9e>
			{
				// pressed  .
				*Copy_pu8SwState  =  SW_PRESSED ;
    1e0a:	ee 81       	ldd	r30, Y+6	; 0x06
    1e0c:	ff 81       	ldd	r31, Y+7	; 0x07
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	80 83       	st	Z, r24
    1e12:	03 c0       	rjmp	.+6      	; 0x1e1a <Switch_enuGetState+0xa4>
			}
			else
			{
				//released.
				*Copy_pu8SwState  =  SW_RELEASED ;
    1e14:	ee 81       	ldd	r30, Y+6	; 0x06
    1e16:	ff 81       	ldd	r31, Y+7	; 0x07
    1e18:	10 82       	st	Z, r1
			}
			Local_enuErrorState = ES_OK ;
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	8a 83       	std	Y+2, r24	; 0x02

		}
		Local_enuErrorState = ES_OK;
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	8a 83       	std	Y+2, r24	; 0x02
    1e22:	02 c0       	rjmp	.+4      	; 0x1e28 <Switch_enuGetState+0xb2>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER ;
    1e24:	82 e0       	ldi	r24, 0x02	; 2
    1e26:	8a 83       	std	Y+2, r24	; 0x02
	}


	return Local_enuErrorState ;
    1e28:	8a 81       	ldd	r24, Y+2	; 0x02
}//End of Swithc_enuGetState.
    1e2a:	27 96       	adiw	r28, 0x07	; 7
    1e2c:	0f b6       	in	r0, 0x3f	; 63
    1e2e:	f8 94       	cli
    1e30:	de bf       	out	0x3e, r29	; 62
    1e32:	0f be       	out	0x3f, r0	; 63
    1e34:	cd bf       	out	0x3d, r28	; 61
    1e36:	cf 91       	pop	r28
    1e38:	df 91       	pop	r29
    1e3a:	08 95       	ret

00001e3c <LED_enuInit>:
/* Description     : Utility function to initialize the array of Leds.      */
/* Argument        : Address array of type LED_t.                            */
/* Return          : Error state of type ES_t.                              */
/****************************************************************************/
ES_t LED_enuInit( LED_t* Copy_pstrLedConfig )
{
    1e3c:	df 93       	push	r29
    1e3e:	cf 93       	push	r28
    1e40:	00 d0       	rcall	.+0      	; 0x1e42 <LED_enuInit+0x6>
    1e42:	00 d0       	rcall	.+0      	; 0x1e44 <LED_enuInit+0x8>
    1e44:	cd b7       	in	r28, 0x3d	; 61
    1e46:	de b7       	in	r29, 0x3e	; 62
    1e48:	9c 83       	std	Y+4, r25	; 0x04
    1e4a:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK ;
    1e4c:	1a 82       	std	Y+2, r1	; 0x02

	if( Copy_pstrLedConfig !=NULL)
    1e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e50:	9c 81       	ldd	r25, Y+4	; 0x04
    1e52:	00 97       	sbiw	r24, 0x00	; 0
    1e54:	09 f4       	brne	.+2      	; 0x1e58 <LED_enuInit+0x1c>
    1e56:	1b c1       	rjmp	.+566    	; 0x208e <LED_enuInit+0x252>
	{
		u8 Local_u8Iterator = 0 ;
    1e58:	19 82       	std	Y+1, r1	; 0x01

		for( Local_u8Iterator = 0 ; Local_u8Iterator  < LED_NUM ; Local_u8Iterator++)
    1e5a:	19 82       	std	Y+1, r1	; 0x01
    1e5c:	11 c1       	rjmp	.+546    	; 0x2080 <LED_enuInit+0x244>
		{
			Local_enuErrorState = DIO_enuSetPinDirection( Copy_pstrLedConfig[Local_u8Iterator].LED_PortID,
    1e5e:	89 81       	ldd	r24, Y+1	; 0x01
    1e60:	88 2f       	mov	r24, r24
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	9c 01       	movw	r18, r24
    1e66:	22 0f       	add	r18, r18
    1e68:	33 1f       	adc	r19, r19
    1e6a:	22 0f       	add	r18, r18
    1e6c:	33 1f       	adc	r19, r19
    1e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e70:	9c 81       	ldd	r25, Y+4	; 0x04
    1e72:	fc 01       	movw	r30, r24
    1e74:	e2 0f       	add	r30, r18
    1e76:	f3 1f       	adc	r31, r19
    1e78:	40 81       	ld	r20, Z
    1e7a:	89 81       	ldd	r24, Y+1	; 0x01
    1e7c:	88 2f       	mov	r24, r24
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	9c 01       	movw	r18, r24
    1e82:	22 0f       	add	r18, r18
    1e84:	33 1f       	adc	r19, r19
    1e86:	22 0f       	add	r18, r18
    1e88:	33 1f       	adc	r19, r19
    1e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e8e:	fc 01       	movw	r30, r24
    1e90:	e2 0f       	add	r30, r18
    1e92:	f3 1f       	adc	r31, r19
    1e94:	91 81       	ldd	r25, Z+1	; 0x01
    1e96:	84 2f       	mov	r24, r20
    1e98:	69 2f       	mov	r22, r25
    1e9a:	41 e0       	ldi	r20, 0x01	; 1
    1e9c:	0e 94 2d 0b 	call	0x165a	; 0x165a <DIO_enuSetPinDirection>
    1ea0:	8a 83       	std	Y+2, r24	; 0x02
					Copy_pstrLedConfig[Local_u8Iterator].LED_PinID,
					DIO_OUTPUT_PIN);


			//LED_OFF Scenario Handling in tow Connection Cases  .
			if( Copy_pstrLedConfig[Local_u8Iterator].LED_Init_State == LED_OFF)
    1ea2:	89 81       	ldd	r24, Y+1	; 0x01
    1ea4:	88 2f       	mov	r24, r24
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	9c 01       	movw	r18, r24
    1eaa:	22 0f       	add	r18, r18
    1eac:	33 1f       	adc	r19, r19
    1eae:	22 0f       	add	r18, r18
    1eb0:	33 1f       	adc	r19, r19
    1eb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb6:	fc 01       	movw	r30, r24
    1eb8:	e2 0f       	add	r30, r18
    1eba:	f3 1f       	adc	r31, r19
    1ebc:	82 81       	ldd	r24, Z+2	; 0x02
    1ebe:	83 30       	cpi	r24, 0x03	; 3
    1ec0:	09 f0       	breq	.+2      	; 0x1ec4 <LED_enuInit+0x88>
    1ec2:	65 c0       	rjmp	.+202    	; 0x1f8e <LED_enuInit+0x152>
			{
				if(Copy_pstrLedConfig[Local_u8Iterator].LED_Connection_Style == LED_SINK )
    1ec4:	89 81       	ldd	r24, Y+1	; 0x01
    1ec6:	88 2f       	mov	r24, r24
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	9c 01       	movw	r18, r24
    1ecc:	22 0f       	add	r18, r18
    1ece:	33 1f       	adc	r19, r19
    1ed0:	22 0f       	add	r18, r18
    1ed2:	33 1f       	adc	r19, r19
    1ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed8:	fc 01       	movw	r30, r24
    1eda:	e2 0f       	add	r30, r18
    1edc:	f3 1f       	adc	r31, r19
    1ede:	83 81       	ldd	r24, Z+3	; 0x03
    1ee0:	81 30       	cpi	r24, 0x01	; 1
    1ee2:	19 f5       	brne	.+70     	; 0x1f2a <LED_enuInit+0xee>
				{
					Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedConfig[Local_u8Iterator].LED_PortID,
    1ee4:	89 81       	ldd	r24, Y+1	; 0x01
    1ee6:	88 2f       	mov	r24, r24
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	9c 01       	movw	r18, r24
    1eec:	22 0f       	add	r18, r18
    1eee:	33 1f       	adc	r19, r19
    1ef0:	22 0f       	add	r18, r18
    1ef2:	33 1f       	adc	r19, r19
    1ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef8:	fc 01       	movw	r30, r24
    1efa:	e2 0f       	add	r30, r18
    1efc:	f3 1f       	adc	r31, r19
    1efe:	40 81       	ld	r20, Z
    1f00:	89 81       	ldd	r24, Y+1	; 0x01
    1f02:	88 2f       	mov	r24, r24
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	9c 01       	movw	r18, r24
    1f08:	22 0f       	add	r18, r18
    1f0a:	33 1f       	adc	r19, r19
    1f0c:	22 0f       	add	r18, r18
    1f0e:	33 1f       	adc	r19, r19
    1f10:	8b 81       	ldd	r24, Y+3	; 0x03
    1f12:	9c 81       	ldd	r25, Y+4	; 0x04
    1f14:	fc 01       	movw	r30, r24
    1f16:	e2 0f       	add	r30, r18
    1f18:	f3 1f       	adc	r31, r19
    1f1a:	91 81       	ldd	r25, Z+1	; 0x01
    1f1c:	84 2f       	mov	r24, r20
    1f1e:	69 2f       	mov	r22, r25
    1f20:	41 e0       	ldi	r20, 0x01	; 1
    1f22:	0e 94 24 0c 	call	0x1848	; 0x1848 <DIO_enuSetPinValue>
    1f26:	8a 83       	std	Y+2, r24	; 0x02
    1f28:	32 c0       	rjmp	.+100    	; 0x1f8e <LED_enuInit+0x152>
							Copy_pstrLedConfig[Local_u8Iterator].LED_PinID,DIO_HIGH);
				}
				else if (Copy_pstrLedConfig[Local_u8Iterator].LED_Connection_Style == LED_SOURCE)
    1f2a:	89 81       	ldd	r24, Y+1	; 0x01
    1f2c:	88 2f       	mov	r24, r24
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	9c 01       	movw	r18, r24
    1f32:	22 0f       	add	r18, r18
    1f34:	33 1f       	adc	r19, r19
    1f36:	22 0f       	add	r18, r18
    1f38:	33 1f       	adc	r19, r19
    1f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f3e:	fc 01       	movw	r30, r24
    1f40:	e2 0f       	add	r30, r18
    1f42:	f3 1f       	adc	r31, r19
    1f44:	83 81       	ldd	r24, Z+3	; 0x03
    1f46:	82 30       	cpi	r24, 0x02	; 2
    1f48:	11 f5       	brne	.+68     	; 0x1f8e <LED_enuInit+0x152>
				{
					Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedConfig[Local_u8Iterator].LED_PortID,
    1f4a:	89 81       	ldd	r24, Y+1	; 0x01
    1f4c:	88 2f       	mov	r24, r24
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	9c 01       	movw	r18, r24
    1f52:	22 0f       	add	r18, r18
    1f54:	33 1f       	adc	r19, r19
    1f56:	22 0f       	add	r18, r18
    1f58:	33 1f       	adc	r19, r19
    1f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5e:	fc 01       	movw	r30, r24
    1f60:	e2 0f       	add	r30, r18
    1f62:	f3 1f       	adc	r31, r19
    1f64:	40 81       	ld	r20, Z
    1f66:	89 81       	ldd	r24, Y+1	; 0x01
    1f68:	88 2f       	mov	r24, r24
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	9c 01       	movw	r18, r24
    1f6e:	22 0f       	add	r18, r18
    1f70:	33 1f       	adc	r19, r19
    1f72:	22 0f       	add	r18, r18
    1f74:	33 1f       	adc	r19, r19
    1f76:	8b 81       	ldd	r24, Y+3	; 0x03
    1f78:	9c 81       	ldd	r25, Y+4	; 0x04
    1f7a:	fc 01       	movw	r30, r24
    1f7c:	e2 0f       	add	r30, r18
    1f7e:	f3 1f       	adc	r31, r19
    1f80:	91 81       	ldd	r25, Z+1	; 0x01
    1f82:	84 2f       	mov	r24, r20
    1f84:	69 2f       	mov	r22, r25
    1f86:	40 e0       	ldi	r20, 0x00	; 0
    1f88:	0e 94 24 0c 	call	0x1848	; 0x1848 <DIO_enuSetPinValue>
    1f8c:	8a 83       	std	Y+2, r24	; 0x02
			{

			}

			//LED_ON Scenario Handling in tow Connection Cases  .
			if( Copy_pstrLedConfig[Local_u8Iterator].LED_Init_State == LED_ON)
    1f8e:	89 81       	ldd	r24, Y+1	; 0x01
    1f90:	88 2f       	mov	r24, r24
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	9c 01       	movw	r18, r24
    1f96:	22 0f       	add	r18, r18
    1f98:	33 1f       	adc	r19, r19
    1f9a:	22 0f       	add	r18, r18
    1f9c:	33 1f       	adc	r19, r19
    1f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa2:	fc 01       	movw	r30, r24
    1fa4:	e2 0f       	add	r30, r18
    1fa6:	f3 1f       	adc	r31, r19
    1fa8:	82 81       	ldd	r24, Z+2	; 0x02
    1faa:	84 30       	cpi	r24, 0x04	; 4
    1fac:	09 f0       	breq	.+2      	; 0x1fb0 <LED_enuInit+0x174>
    1fae:	65 c0       	rjmp	.+202    	; 0x207a <LED_enuInit+0x23e>
			{
				if(Copy_pstrLedConfig[Local_u8Iterator].LED_Connection_Style == LED_SINK )
    1fb0:	89 81       	ldd	r24, Y+1	; 0x01
    1fb2:	88 2f       	mov	r24, r24
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	9c 01       	movw	r18, r24
    1fb8:	22 0f       	add	r18, r18
    1fba:	33 1f       	adc	r19, r19
    1fbc:	22 0f       	add	r18, r18
    1fbe:	33 1f       	adc	r19, r19
    1fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc4:	fc 01       	movw	r30, r24
    1fc6:	e2 0f       	add	r30, r18
    1fc8:	f3 1f       	adc	r31, r19
    1fca:	83 81       	ldd	r24, Z+3	; 0x03
    1fcc:	81 30       	cpi	r24, 0x01	; 1
    1fce:	19 f5       	brne	.+70     	; 0x2016 <LED_enuInit+0x1da>
				{
					Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedConfig[Local_u8Iterator].LED_PortID,
    1fd0:	89 81       	ldd	r24, Y+1	; 0x01
    1fd2:	88 2f       	mov	r24, r24
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	9c 01       	movw	r18, r24
    1fd8:	22 0f       	add	r18, r18
    1fda:	33 1f       	adc	r19, r19
    1fdc:	22 0f       	add	r18, r18
    1fde:	33 1f       	adc	r19, r19
    1fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe4:	fc 01       	movw	r30, r24
    1fe6:	e2 0f       	add	r30, r18
    1fe8:	f3 1f       	adc	r31, r19
    1fea:	40 81       	ld	r20, Z
    1fec:	89 81       	ldd	r24, Y+1	; 0x01
    1fee:	88 2f       	mov	r24, r24
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	9c 01       	movw	r18, r24
    1ff4:	22 0f       	add	r18, r18
    1ff6:	33 1f       	adc	r19, r19
    1ff8:	22 0f       	add	r18, r18
    1ffa:	33 1f       	adc	r19, r19
    1ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    2000:	fc 01       	movw	r30, r24
    2002:	e2 0f       	add	r30, r18
    2004:	f3 1f       	adc	r31, r19
    2006:	91 81       	ldd	r25, Z+1	; 0x01
    2008:	84 2f       	mov	r24, r20
    200a:	69 2f       	mov	r22, r25
    200c:	40 e0       	ldi	r20, 0x00	; 0
    200e:	0e 94 24 0c 	call	0x1848	; 0x1848 <DIO_enuSetPinValue>
    2012:	8a 83       	std	Y+2, r24	; 0x02
    2014:	32 c0       	rjmp	.+100    	; 0x207a <LED_enuInit+0x23e>
							Copy_pstrLedConfig[Local_u8Iterator].LED_PinID,DIO_LOW);
				}
				else if (Copy_pstrLedConfig[Local_u8Iterator].LED_Connection_Style == LED_SOURCE)
    2016:	89 81       	ldd	r24, Y+1	; 0x01
    2018:	88 2f       	mov	r24, r24
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	9c 01       	movw	r18, r24
    201e:	22 0f       	add	r18, r18
    2020:	33 1f       	adc	r19, r19
    2022:	22 0f       	add	r18, r18
    2024:	33 1f       	adc	r19, r19
    2026:	8b 81       	ldd	r24, Y+3	; 0x03
    2028:	9c 81       	ldd	r25, Y+4	; 0x04
    202a:	fc 01       	movw	r30, r24
    202c:	e2 0f       	add	r30, r18
    202e:	f3 1f       	adc	r31, r19
    2030:	83 81       	ldd	r24, Z+3	; 0x03
    2032:	82 30       	cpi	r24, 0x02	; 2
    2034:	11 f5       	brne	.+68     	; 0x207a <LED_enuInit+0x23e>
				{
					Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedConfig[Local_u8Iterator].LED_PortID,
    2036:	89 81       	ldd	r24, Y+1	; 0x01
    2038:	88 2f       	mov	r24, r24
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	9c 01       	movw	r18, r24
    203e:	22 0f       	add	r18, r18
    2040:	33 1f       	adc	r19, r19
    2042:	22 0f       	add	r18, r18
    2044:	33 1f       	adc	r19, r19
    2046:	8b 81       	ldd	r24, Y+3	; 0x03
    2048:	9c 81       	ldd	r25, Y+4	; 0x04
    204a:	fc 01       	movw	r30, r24
    204c:	e2 0f       	add	r30, r18
    204e:	f3 1f       	adc	r31, r19
    2050:	40 81       	ld	r20, Z
    2052:	89 81       	ldd	r24, Y+1	; 0x01
    2054:	88 2f       	mov	r24, r24
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	9c 01       	movw	r18, r24
    205a:	22 0f       	add	r18, r18
    205c:	33 1f       	adc	r19, r19
    205e:	22 0f       	add	r18, r18
    2060:	33 1f       	adc	r19, r19
    2062:	8b 81       	ldd	r24, Y+3	; 0x03
    2064:	9c 81       	ldd	r25, Y+4	; 0x04
    2066:	fc 01       	movw	r30, r24
    2068:	e2 0f       	add	r30, r18
    206a:	f3 1f       	adc	r31, r19
    206c:	91 81       	ldd	r25, Z+1	; 0x01
    206e:	84 2f       	mov	r24, r20
    2070:	69 2f       	mov	r22, r25
    2072:	41 e0       	ldi	r20, 0x01	; 1
    2074:	0e 94 24 0c 	call	0x1848	; 0x1848 <DIO_enuSetPinValue>
    2078:	8a 83       	std	Y+2, r24	; 0x02

	if( Copy_pstrLedConfig !=NULL)
	{
		u8 Local_u8Iterator = 0 ;

		for( Local_u8Iterator = 0 ; Local_u8Iterator  < LED_NUM ; Local_u8Iterator++)
    207a:	89 81       	ldd	r24, Y+1	; 0x01
    207c:	8f 5f       	subi	r24, 0xFF	; 255
    207e:	89 83       	std	Y+1, r24	; 0x01
    2080:	89 81       	ldd	r24, Y+1	; 0x01
    2082:	88 23       	and	r24, r24
    2084:	09 f4       	brne	.+2      	; 0x2088 <LED_enuInit+0x24c>
    2086:	eb ce       	rjmp	.-554    	; 0x1e5e <LED_enuInit+0x22>

			}

		}

		Local_enuErrorState = ES_OK;
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	8a 83       	std	Y+2, r24	; 0x02
    208c:	02 c0       	rjmp	.+4      	; 0x2092 <LED_enuInit+0x256>

	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    208e:	82 e0       	ldi	r24, 0x02	; 2
    2090:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_enuErrorState;
    2092:	8a 81       	ldd	r24, Y+2	; 0x02
}//End ofLED_enuInit.
    2094:	0f 90       	pop	r0
    2096:	0f 90       	pop	r0
    2098:	0f 90       	pop	r0
    209a:	0f 90       	pop	r0
    209c:	cf 91       	pop	r28
    209e:	df 91       	pop	r29
    20a0:	08 95       	ret

000020a2 <LED_enuLedON>:



ES_t LED_enuLedON( LED_t* Copy_pstrLedConfig )
{
    20a2:	df 93       	push	r29
    20a4:	cf 93       	push	r28
    20a6:	00 d0       	rcall	.+0      	; 0x20a8 <LED_enuLedON+0x6>
    20a8:	0f 92       	push	r0
    20aa:	cd b7       	in	r28, 0x3d	; 61
    20ac:	de b7       	in	r29, 0x3e	; 62
    20ae:	9b 83       	std	Y+3, r25	; 0x03
    20b0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK ;
    20b2:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pstrLedConfig != NULL )
    20b4:	8a 81       	ldd	r24, Y+2	; 0x02
    20b6:	9b 81       	ldd	r25, Y+3	; 0x03
    20b8:	00 97       	sbiw	r24, 0x00	; 0
    20ba:	11 f1       	breq	.+68     	; 0x2100 <LED_enuLedON+0x5e>
	{
		if(Copy_pstrLedConfig->LED_Connection_Style == LED_SINK)
    20bc:	ea 81       	ldd	r30, Y+2	; 0x02
    20be:	fb 81       	ldd	r31, Y+3	; 0x03
    20c0:	83 81       	ldd	r24, Z+3	; 0x03
    20c2:	81 30       	cpi	r24, 0x01	; 1
    20c4:	61 f4       	brne	.+24     	; 0x20de <LED_enuLedON+0x3c>
		{
			Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedConfig->LED_PortID,
    20c6:	ea 81       	ldd	r30, Y+2	; 0x02
    20c8:	fb 81       	ldd	r31, Y+3	; 0x03
    20ca:	80 81       	ld	r24, Z
    20cc:	ea 81       	ldd	r30, Y+2	; 0x02
    20ce:	fb 81       	ldd	r31, Y+3	; 0x03
    20d0:	91 81       	ldd	r25, Z+1	; 0x01
    20d2:	69 2f       	mov	r22, r25
    20d4:	40 e0       	ldi	r20, 0x00	; 0
    20d6:	0e 94 24 0c 	call	0x1848	; 0x1848 <DIO_enuSetPinValue>
    20da:	89 83       	std	Y+1, r24	; 0x01
    20dc:	13 c0       	rjmp	.+38     	; 0x2104 <LED_enuLedON+0x62>
					Copy_pstrLedConfig->LED_PinID,DIO_LOW);

		}
		else if ( Copy_pstrLedConfig->LED_Connection_Style == LED_SOURCE )
    20de:	ea 81       	ldd	r30, Y+2	; 0x02
    20e0:	fb 81       	ldd	r31, Y+3	; 0x03
    20e2:	83 81       	ldd	r24, Z+3	; 0x03
    20e4:	82 30       	cpi	r24, 0x02	; 2
    20e6:	71 f4       	brne	.+28     	; 0x2104 <LED_enuLedON+0x62>
		{
			Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedConfig->LED_PortID,
    20e8:	ea 81       	ldd	r30, Y+2	; 0x02
    20ea:	fb 81       	ldd	r31, Y+3	; 0x03
    20ec:	80 81       	ld	r24, Z
    20ee:	ea 81       	ldd	r30, Y+2	; 0x02
    20f0:	fb 81       	ldd	r31, Y+3	; 0x03
    20f2:	91 81       	ldd	r25, Z+1	; 0x01
    20f4:	69 2f       	mov	r22, r25
    20f6:	41 e0       	ldi	r20, 0x01	; 1
    20f8:	0e 94 24 0c 	call	0x1848	; 0x1848 <DIO_enuSetPinValue>
    20fc:	89 83       	std	Y+1, r24	; 0x01
    20fe:	02 c0       	rjmp	.+4      	; 0x2104 <LED_enuLedON+0x62>
		}

	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    2100:	82 e0       	ldi	r24, 0x02	; 2
    2102:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    2104:	89 81       	ldd	r24, Y+1	; 0x01
}//End of LED_enuLedON.
    2106:	0f 90       	pop	r0
    2108:	0f 90       	pop	r0
    210a:	0f 90       	pop	r0
    210c:	cf 91       	pop	r28
    210e:	df 91       	pop	r29
    2110:	08 95       	ret

00002112 <LED_enuLedOFF>:


ES_t LED_enuLedOFF( LED_t* Copy_pstrLedConfig )
{
    2112:	df 93       	push	r29
    2114:	cf 93       	push	r28
    2116:	00 d0       	rcall	.+0      	; 0x2118 <LED_enuLedOFF+0x6>
    2118:	0f 92       	push	r0
    211a:	cd b7       	in	r28, 0x3d	; 61
    211c:	de b7       	in	r29, 0x3e	; 62
    211e:	9b 83       	std	Y+3, r25	; 0x03
    2120:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK ;
    2122:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pstrLedConfig != NULL )
    2124:	8a 81       	ldd	r24, Y+2	; 0x02
    2126:	9b 81       	ldd	r25, Y+3	; 0x03
    2128:	00 97       	sbiw	r24, 0x00	; 0
    212a:	11 f1       	breq	.+68     	; 0x2170 <LED_enuLedOFF+0x5e>
	{
		if(Copy_pstrLedConfig->LED_Connection_Style == LED_SINK)
    212c:	ea 81       	ldd	r30, Y+2	; 0x02
    212e:	fb 81       	ldd	r31, Y+3	; 0x03
    2130:	83 81       	ldd	r24, Z+3	; 0x03
    2132:	81 30       	cpi	r24, 0x01	; 1
    2134:	61 f4       	brne	.+24     	; 0x214e <LED_enuLedOFF+0x3c>
		{
			Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedConfig->LED_PortID,
    2136:	ea 81       	ldd	r30, Y+2	; 0x02
    2138:	fb 81       	ldd	r31, Y+3	; 0x03
    213a:	80 81       	ld	r24, Z
    213c:	ea 81       	ldd	r30, Y+2	; 0x02
    213e:	fb 81       	ldd	r31, Y+3	; 0x03
    2140:	91 81       	ldd	r25, Z+1	; 0x01
    2142:	69 2f       	mov	r22, r25
    2144:	41 e0       	ldi	r20, 0x01	; 1
    2146:	0e 94 24 0c 	call	0x1848	; 0x1848 <DIO_enuSetPinValue>
    214a:	89 83       	std	Y+1, r24	; 0x01
    214c:	13 c0       	rjmp	.+38     	; 0x2174 <LED_enuLedOFF+0x62>
					Copy_pstrLedConfig->LED_PinID,DIO_HIGH);

		}
		else if ( Copy_pstrLedConfig->LED_Connection_Style == LED_SOURCE )
    214e:	ea 81       	ldd	r30, Y+2	; 0x02
    2150:	fb 81       	ldd	r31, Y+3	; 0x03
    2152:	83 81       	ldd	r24, Z+3	; 0x03
    2154:	82 30       	cpi	r24, 0x02	; 2
    2156:	71 f4       	brne	.+28     	; 0x2174 <LED_enuLedOFF+0x62>
		{
			Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedConfig->LED_PortID,
    2158:	ea 81       	ldd	r30, Y+2	; 0x02
    215a:	fb 81       	ldd	r31, Y+3	; 0x03
    215c:	80 81       	ld	r24, Z
    215e:	ea 81       	ldd	r30, Y+2	; 0x02
    2160:	fb 81       	ldd	r31, Y+3	; 0x03
    2162:	91 81       	ldd	r25, Z+1	; 0x01
    2164:	69 2f       	mov	r22, r25
    2166:	40 e0       	ldi	r20, 0x00	; 0
    2168:	0e 94 24 0c 	call	0x1848	; 0x1848 <DIO_enuSetPinValue>
    216c:	89 83       	std	Y+1, r24	; 0x01
    216e:	02 c0       	rjmp	.+4      	; 0x2174 <LED_enuLedOFF+0x62>
		}

	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    2170:	82 e0       	ldi	r24, 0x02	; 2
    2172:	89 83       	std	Y+1, r24	; 0x01
	}



	return Local_enuErrorState;
    2174:	89 81       	ldd	r24, Y+1	; 0x01
}//End of LED_enuLedOFF.
    2176:	0f 90       	pop	r0
    2178:	0f 90       	pop	r0
    217a:	0f 90       	pop	r0
    217c:	cf 91       	pop	r28
    217e:	df 91       	pop	r29
    2180:	08 95       	ret

00002182 <LED_enuLedGetState>:
/*                                       .               .                 */
/*                                                                         */
/* Return          : Error state of type ES_t.                             */
/***************************************************************************/
ES_t LED_enuLedGetState(LED_t* Copy_pstrLedConfig ,u8* Copy_pu8LedState )
{
    2182:	df 93       	push	r29
    2184:	cf 93       	push	r28
    2186:	00 d0       	rcall	.+0      	; 0x2188 <LED_enuLedGetState+0x6>
    2188:	00 d0       	rcall	.+0      	; 0x218a <LED_enuLedGetState+0x8>
    218a:	00 d0       	rcall	.+0      	; 0x218c <LED_enuLedGetState+0xa>
    218c:	cd b7       	in	r28, 0x3d	; 61
    218e:	de b7       	in	r29, 0x3e	; 62
    2190:	9c 83       	std	Y+4, r25	; 0x04
    2192:	8b 83       	std	Y+3, r24	; 0x03
    2194:	7e 83       	std	Y+6, r23	; 0x06
    2196:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrorState = ES_NOK ;
    2198:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_pstrLedConfig != NULL )
    219a:	8b 81       	ldd	r24, Y+3	; 0x03
    219c:	9c 81       	ldd	r25, Y+4	; 0x04
    219e:	00 97       	sbiw	r24, 0x00	; 0
    21a0:	09 f4       	brne	.+2      	; 0x21a4 <LED_enuLedGetState+0x22>
    21a2:	47 c0       	rjmp	.+142    	; 0x2232 <LED_enuLedGetState+0xb0>
	{
		u8 Local_u8LedState = 0 ;
    21a4:	1a 82       	std	Y+2, r1	; 0x02
		if(Copy_pstrLedConfig->LED_Connection_Style == LED_SINK)
    21a6:	eb 81       	ldd	r30, Y+3	; 0x03
    21a8:	fc 81       	ldd	r31, Y+4	; 0x04
    21aa:	83 81       	ldd	r24, Z+3	; 0x03
    21ac:	81 30       	cpi	r24, 0x01	; 1
    21ae:	f1 f4       	brne	.+60     	; 0x21ec <LED_enuLedGetState+0x6a>
		{

			Local_enuErrorState = DIO_enuGetPinVlaue( Copy_pstrLedConfig->LED_PortID,Copy_pstrLedConfig->LED_PinID,&Local_u8LedState);
    21b0:	eb 81       	ldd	r30, Y+3	; 0x03
    21b2:	fc 81       	ldd	r31, Y+4	; 0x04
    21b4:	80 81       	ld	r24, Z
    21b6:	eb 81       	ldd	r30, Y+3	; 0x03
    21b8:	fc 81       	ldd	r31, Y+4	; 0x04
    21ba:	91 81       	ldd	r25, Z+1	; 0x01
    21bc:	9e 01       	movw	r18, r28
    21be:	2e 5f       	subi	r18, 0xFE	; 254
    21c0:	3f 4f       	sbci	r19, 0xFF	; 255
    21c2:	69 2f       	mov	r22, r25
    21c4:	a9 01       	movw	r20, r18
    21c6:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_enuGetPinVlaue>
    21ca:	89 83       	std	Y+1, r24	; 0x01

			if ( !Local_u8LedState )
    21cc:	8a 81       	ldd	r24, Y+2	; 0x02
    21ce:	88 23       	and	r24, r24
    21d0:	29 f4       	brne	.+10     	; 0x21dc <LED_enuLedGetState+0x5a>
			{
				//LED ON
				*Copy_pu8LedState = LED_ON;
    21d2:	ed 81       	ldd	r30, Y+5	; 0x05
    21d4:	fe 81       	ldd	r31, Y+6	; 0x06
    21d6:	84 e0       	ldi	r24, 0x04	; 4
    21d8:	80 83       	st	Z, r24
    21da:	2d c0       	rjmp	.+90     	; 0x2236 <LED_enuLedGetState+0xb4>
			}
			else if (Local_u8LedState)
    21dc:	8a 81       	ldd	r24, Y+2	; 0x02
    21de:	88 23       	and	r24, r24
    21e0:	51 f1       	breq	.+84     	; 0x2236 <LED_enuLedGetState+0xb4>
			{
				//LED OFF
				*Copy_pu8LedState = LED_OFF;
    21e2:	ed 81       	ldd	r30, Y+5	; 0x05
    21e4:	fe 81       	ldd	r31, Y+6	; 0x06
    21e6:	83 e0       	ldi	r24, 0x03	; 3
    21e8:	80 83       	st	Z, r24
    21ea:	25 c0       	rjmp	.+74     	; 0x2236 <LED_enuLedGetState+0xb4>
			{

			}

		}
		else if ( Copy_pstrLedConfig->LED_Connection_Style == LED_SOURCE )
    21ec:	eb 81       	ldd	r30, Y+3	; 0x03
    21ee:	fc 81       	ldd	r31, Y+4	; 0x04
    21f0:	83 81       	ldd	r24, Z+3	; 0x03
    21f2:	82 30       	cpi	r24, 0x02	; 2
    21f4:	01 f5       	brne	.+64     	; 0x2236 <LED_enuLedGetState+0xb4>
		{
			Local_enuErrorState = DIO_enuGetPinVlaue( Copy_pstrLedConfig->LED_PortID,Copy_pstrLedConfig->LED_PinID,&Local_u8LedState);
    21f6:	eb 81       	ldd	r30, Y+3	; 0x03
    21f8:	fc 81       	ldd	r31, Y+4	; 0x04
    21fa:	80 81       	ld	r24, Z
    21fc:	eb 81       	ldd	r30, Y+3	; 0x03
    21fe:	fc 81       	ldd	r31, Y+4	; 0x04
    2200:	91 81       	ldd	r25, Z+1	; 0x01
    2202:	9e 01       	movw	r18, r28
    2204:	2e 5f       	subi	r18, 0xFE	; 254
    2206:	3f 4f       	sbci	r19, 0xFF	; 255
    2208:	69 2f       	mov	r22, r25
    220a:	a9 01       	movw	r20, r18
    220c:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_enuGetPinVlaue>
    2210:	89 83       	std	Y+1, r24	; 0x01

			if ( !Local_u8LedState )
    2212:	8a 81       	ldd	r24, Y+2	; 0x02
    2214:	88 23       	and	r24, r24
    2216:	29 f4       	brne	.+10     	; 0x2222 <LED_enuLedGetState+0xa0>
			{
				//LED ON
				*Copy_pu8LedState = LED_OFF;
    2218:	ed 81       	ldd	r30, Y+5	; 0x05
    221a:	fe 81       	ldd	r31, Y+6	; 0x06
    221c:	83 e0       	ldi	r24, 0x03	; 3
    221e:	80 83       	st	Z, r24
    2220:	0a c0       	rjmp	.+20     	; 0x2236 <LED_enuLedGetState+0xb4>
			}
			else if (Local_u8LedState)
    2222:	8a 81       	ldd	r24, Y+2	; 0x02
    2224:	88 23       	and	r24, r24
    2226:	39 f0       	breq	.+14     	; 0x2236 <LED_enuLedGetState+0xb4>
			{
				//LED OFF
				*Copy_pu8LedState = LED_ON;
    2228:	ed 81       	ldd	r30, Y+5	; 0x05
    222a:	fe 81       	ldd	r31, Y+6	; 0x06
    222c:	84 e0       	ldi	r24, 0x04	; 4
    222e:	80 83       	st	Z, r24
    2230:	02 c0       	rjmp	.+4      	; 0x2236 <LED_enuLedGetState+0xb4>
		}

	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    2232:	82 e0       	ldi	r24, 0x02	; 2
    2234:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
    2236:	89 81       	ldd	r24, Y+1	; 0x01
}//End of LED_enuLedGetState.
    2238:	26 96       	adiw	r28, 0x06	; 6
    223a:	0f b6       	in	r0, 0x3f	; 63
    223c:	f8 94       	cli
    223e:	de bf       	out	0x3e, r29	; 62
    2240:	0f be       	out	0x3f, r0	; 63
    2242:	cd bf       	out	0x3d, r28	; 61
    2244:	cf 91       	pop	r28
    2246:	df 91       	pop	r29
    2248:	08 95       	ret

0000224a <LED_enuLedToggle>:
/*                                      .                      .           */
/*                                                                         */
/* Return          : Error state of type ES_t.                             */
/****..................*****************************************************/
ES_t LED_enuLedToggle(LED_t* Copy_pstrLedConfig  )
{
    224a:	df 93       	push	r29
    224c:	cf 93       	push	r28
    224e:	00 d0       	rcall	.+0      	; 0x2250 <LED_enuLedToggle+0x6>
    2250:	0f 92       	push	r0
    2252:	cd b7       	in	r28, 0x3d	; 61
    2254:	de b7       	in	r29, 0x3e	; 62
    2256:	9b 83       	std	Y+3, r25	; 0x03
    2258:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK ;
    225a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pstrLedConfig != NULL )
    225c:	8a 81       	ldd	r24, Y+2	; 0x02
    225e:	9b 81       	ldd	r25, Y+3	; 0x03
    2260:	00 97       	sbiw	r24, 0x00	; 0
    2262:	59 f0       	breq	.+22     	; 0x227a <LED_enuLedToggle+0x30>
	{

		Local_enuErrorState =DIO_enuToggelPin( Copy_pstrLedConfig->LED_PortID , Copy_pstrLedConfig->LED_PinID );
    2264:	ea 81       	ldd	r30, Y+2	; 0x02
    2266:	fb 81       	ldd	r31, Y+3	; 0x03
    2268:	80 81       	ld	r24, Z
    226a:	ea 81       	ldd	r30, Y+2	; 0x02
    226c:	fb 81       	ldd	r31, Y+3	; 0x03
    226e:	91 81       	ldd	r25, Z+1	; 0x01
    2270:	69 2f       	mov	r22, r25
    2272:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <DIO_enuToggelPin>
    2276:	89 83       	std	Y+1, r24	; 0x01
    2278:	02 c0       	rjmp	.+4      	; 0x227e <LED_enuLedToggle+0x34>

	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    227a:	82 e0       	ldi	r24, 0x02	; 2
    227c:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
    227e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2280:	0f 90       	pop	r0
    2282:	0f 90       	pop	r0
    2284:	0f 90       	pop	r0
    2286:	cf 91       	pop	r28
    2288:	df 91       	pop	r29
    228a:	08 95       	ret

0000228c <ADC_enuInit>:
/* Description     : Utility function to initialize the ADC .                */
/* Argument        : None .                                                  */
/* Return          : Error state of type ES_t.                               */
/**.............**************************************************************/
ES_t ADC_enuInit(void)
{
    228c:	df 93       	push	r29
    228e:	cf 93       	push	r28
    2290:	0f 92       	push	r0
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK ;
    2296:	19 82       	std	Y+1, r1	; 0x01


	/*************************************************************************/
	/*ADC Voltage Reference cases Handling.                                  */
	/*************************************************************************/
	ADMUX  &=~((ADC_MSK_BIT<<REFS1)|(ADC_MSK_BIT<<REFS0));
    2298:	a7 e2       	ldi	r26, 0x27	; 39
    229a:	b0 e0       	ldi	r27, 0x00	; 0
    229c:	e7 e2       	ldi	r30, 0x27	; 39
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	80 81       	ld	r24, Z
    22a2:	8f 73       	andi	r24, 0x3F	; 63
    22a4:	8c 93       	st	X, r24

#if      ADC_REF_VOLT   ==    AREF_REF
	//Do nothing.

#elif    ADC_REF_VOLT   ==    AVCC_REF
	ADMUX  |=(ADC_MSK_BIT<<REFS0);
    22a6:	a7 e2       	ldi	r26, 0x27	; 39
    22a8:	b0 e0       	ldi	r27, 0x00	; 0
    22aa:	e7 e2       	ldi	r30, 0x27	; 39
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	80 81       	ld	r24, Z
    22b0:	80 64       	ori	r24, 0x40	; 64
    22b2:	8c 93       	st	X, r24


	/****************************************************************************************/
	/*ADC Prescaler cases Handling and Right Presentation of the ADC result is Selected.    */
	/****************************************************************************************/
	ADCSRA  &=~((ADC_MSK_BIT<<ADPS0)|(ADC_MSK_BIT<<ADPS1)|(ADC_MSK_BIT<<ADPS2));
    22b4:	a6 e2       	ldi	r26, 0x26	; 38
    22b6:	b0 e0       	ldi	r27, 0x00	; 0
    22b8:	e6 e2       	ldi	r30, 0x26	; 38
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	80 81       	ld	r24, Z
    22be:	88 7f       	andi	r24, 0xF8	; 248
    22c0:	8c 93       	st	X, r24

#elif    ADC_PRES   ==    PRES_4
	ADCSRA |=(ADC_MSK_BIT<<ADPS1);

#elif    ADC_PRES   ==    PRES_8
	ADCSRA |=(ADC_MSK_BIT<<ADPS0)|(ADC_MSK_BIT<<ADPS1);
    22c2:	a6 e2       	ldi	r26, 0x26	; 38
    22c4:	b0 e0       	ldi	r27, 0x00	; 0
    22c6:	e6 e2       	ldi	r30, 0x26	; 38
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	80 81       	ld	r24, Z
    22cc:	83 60       	ori	r24, 0x03	; 3
    22ce:	8c 93       	st	X, r24

#error "Not valid ADC_PRES value!!."

#endif

	return Local_enuErrorState   ;
    22d0:	89 81       	ldd	r24, Y+1	; 0x01
}//End of ADC_enuInit.
    22d2:	0f 90       	pop	r0
    22d4:	cf 91       	pop	r28
    22d6:	df 91       	pop	r29
    22d8:	08 95       	ret

000022da <ADC_enuEnable>:
/* Description     : Utility function to Enable ADC .                         */
/* Argument        : None .                                                   */
/* Return          : Error state of type ES_t.                                */
/**.....................*******************************************************/
ES_t ADC_enuEnable(void)
{
    22da:	df 93       	push	r29
    22dc:	cf 93       	push	r28
    22de:	0f 92       	push	r0
    22e0:	cd b7       	in	r28, 0x3d	; 61
    22e2:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK ;
    22e4:	19 82       	std	Y+1, r1	; 0x01

	if( !((ADCSRA>>ADEN)& ADC_MSK_BIT) )
    22e6:	e6 e2       	ldi	r30, 0x26	; 38
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	80 81       	ld	r24, Z
    22ec:	88 23       	and	r24, r24
    22ee:	54 f0       	brlt	.+20     	; 0x2304 <ADC_enuEnable+0x2a>
	{
		/* Enable ADC .             */
		ADCSRA |= (ADC_MSK_BIT<<ADEN);
    22f0:	a6 e2       	ldi	r26, 0x26	; 38
    22f2:	b0 e0       	ldi	r27, 0x00	; 0
    22f4:	e6 e2       	ldi	r30, 0x26	; 38
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	80 81       	ld	r24, Z
    22fa:	80 68       	ori	r24, 0x80	; 128
    22fc:	8c 93       	st	X, r24

		Local_enuErrorState = ES_OK ;
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	89 83       	std	Y+1, r24	; 0x01
    2302:	02 c0       	rjmp	.+4      	; 0x2308 <ADC_enuEnable+0x2e>

	}
	else
	{
		Local_enuErrorState = ES_OK ;
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState   ;
    2308:	89 81       	ldd	r24, Y+1	; 0x01
}//End of ADC_enuEnable.
    230a:	0f 90       	pop	r0
    230c:	cf 91       	pop	r28
    230e:	df 91       	pop	r29
    2310:	08 95       	ret

00002312 <ADC_enuDisable>:
/* Description     : Utility function to Disable ADC .                        */
/* Argument        : None .                                                   */
/* Return          : Error state of type ES_t.                                */
/**.....................*******************************************************/
ES_t ADC_enuDisable(void)
{
    2312:	df 93       	push	r29
    2314:	cf 93       	push	r28
    2316:	0f 92       	push	r0
    2318:	cd b7       	in	r28, 0x3d	; 61
    231a:	de b7       	in	r29, 0x3e	; 62

	ES_t Local_enuErrorState = ES_NOK ;
    231c:	19 82       	std	Y+1, r1	; 0x01

	if( ((ADCSRA>>ADEN)& ADC_MSK_BIT) )
    231e:	e6 e2       	ldi	r30, 0x26	; 38
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	80 81       	ld	r24, Z
    2324:	88 23       	and	r24, r24
    2326:	54 f4       	brge	.+20     	; 0x233c <ADC_enuDisable+0x2a>
	{
		/* Disable ADC .             */
		ADCSRA &=~(ADC_MSK_BIT<<ADEN);
    2328:	a6 e2       	ldi	r26, 0x26	; 38
    232a:	b0 e0       	ldi	r27, 0x00	; 0
    232c:	e6 e2       	ldi	r30, 0x26	; 38
    232e:	f0 e0       	ldi	r31, 0x00	; 0
    2330:	80 81       	ld	r24, Z
    2332:	8f 77       	andi	r24, 0x7F	; 127
    2334:	8c 93       	st	X, r24

		Local_enuErrorState = ES_OK ;
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	89 83       	std	Y+1, r24	; 0x01
    233a:	02 c0       	rjmp	.+4      	; 0x2340 <ADC_enuDisable+0x2e>

	}
	else
	{
		Local_enuErrorState = ES_OK ;
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	89 83       	std	Y+1, r24	; 0x01
	}

	/* Report the Final State.   */
	return Local_enuErrorState    ;
    2340:	89 81       	ldd	r24, Y+1	; 0x01

}//End of ADC_enuEnable.
    2342:	0f 90       	pop	r0
    2344:	cf 91       	pop	r28
    2346:	df 91       	pop	r29
    2348:	08 95       	ret

0000234a <ADC_enuStartConversion>:
/* Description     : Utility function to Trigger ADC Start Conversion.        */
/* Argument        : None .                                                   */
/* Return          : Error state of type ES_t.                                */
/**.................***********************************************************/
ES_t ADC_enuStartConversion(void)
{
    234a:	df 93       	push	r29
    234c:	cf 93       	push	r28
    234e:	0f 92       	push	r0
    2350:	cd b7       	in	r28, 0x3d	; 61
    2352:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK ;
    2354:	19 82       	std	Y+1, r1	; 0x01

	if( !((ADCSRA>>ADSC)&ADC_MSK_BIT) )
    2356:	e6 e2       	ldi	r30, 0x26	; 38
    2358:	f0 e0       	ldi	r31, 0x00	; 0
    235a:	80 81       	ld	r24, Z
    235c:	82 95       	swap	r24
    235e:	86 95       	lsr	r24
    2360:	86 95       	lsr	r24
    2362:	83 70       	andi	r24, 0x03	; 3
    2364:	88 2f       	mov	r24, r24
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	81 70       	andi	r24, 0x01	; 1
    236a:	90 70       	andi	r25, 0x00	; 0
    236c:	00 97       	sbiw	r24, 0x00	; 0
    236e:	49 f4       	brne	.+18     	; 0x2382 <ADC_enuStartConversion+0x38>
	{
		ADCSRA |=(ADC_MSK_BIT<<ADSC);
    2370:	a6 e2       	ldi	r26, 0x26	; 38
    2372:	b0 e0       	ldi	r27, 0x00	; 0
    2374:	e6 e2       	ldi	r30, 0x26	; 38
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	80 81       	ld	r24, Z
    237a:	80 64       	ori	r24, 0x40	; 64
    237c:	8c 93       	st	X, r24

		Local_enuErrorState = ES_OK;
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	89 83       	std	Y+1, r24	; 0x01
	{
		//Do nothing.
	}

	/* Report the Final State.   */
	return Local_enuErrorState    ;
    2382:	89 81       	ldd	r24, Y+1	; 0x01

}//End of ADC_enuStartConversion.
    2384:	0f 90       	pop	r0
    2386:	cf 91       	pop	r28
    2388:	df 91       	pop	r29
    238a:	08 95       	ret

0000238c <ADC_enuPollingSys>:
/*                   using polling Technique.                                 */
/* Argument        : None .                                                   */
/* Return          : Error state of type ES_t.                                */
/**.................***********************************************************/
ES_t ADC_enuPollingSys(void)
{
    238c:	df 93       	push	r29
    238e:	cf 93       	push	r28
    2390:	0f 92       	push	r0
    2392:	cd b7       	in	r28, 0x3d	; 61
    2394:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK ;
    2396:	19 82       	std	Y+1, r1	; 0x01


	/* Monitor the ADC interrupt flag. */
	while( !((ADCSRA>>ADIF)&ADC_MSK_BIT) );
    2398:	e6 e2       	ldi	r30, 0x26	; 38
    239a:	f0 e0       	ldi	r31, 0x00	; 0
    239c:	80 81       	ld	r24, Z
    239e:	82 95       	swap	r24
    23a0:	8f 70       	andi	r24, 0x0F	; 15
    23a2:	88 2f       	mov	r24, r24
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	81 70       	andi	r24, 0x01	; 1
    23a8:	90 70       	andi	r25, 0x00	; 0
    23aa:	00 97       	sbiw	r24, 0x00	; 0
    23ac:	a9 f3       	breq	.-22     	; 0x2398 <ADC_enuPollingSys+0xc>

	/* Earase the flag.        */
	ADCSRA |=(ADC_MSK_BIT<<ADIF);
    23ae:	a6 e2       	ldi	r26, 0x26	; 38
    23b0:	b0 e0       	ldi	r27, 0x00	; 0
    23b2:	e6 e2       	ldi	r30, 0x26	; 38
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	80 81       	ld	r24, Z
    23b8:	80 61       	ori	r24, 0x10	; 16
    23ba:	8c 93       	st	X, r24

	/* Report the Final State.   */
	return Local_enuErrorState    ;
    23bc:	89 81       	ldd	r24, Y+1	; 0x01

}//End of ADC_enuPollingSys.
    23be:	0f 90       	pop	r0
    23c0:	cf 91       	pop	r28
    23c2:	df 91       	pop	r29
    23c4:	08 95       	ret

000023c6 <ADC_enuRead>:
/* Description     : Utility Function Read whole ten bits of ADC Data Register. */
/* Argument        : Address Variable of u8 Type .                              */
/* Return          : Error state of type ES_t.                                  */
/**.................*************************************************************/
ES_t ADC_enuRead(u16* Cpy_pu16Value )
{
    23c6:	df 93       	push	r29
    23c8:	cf 93       	push	r28
    23ca:	00 d0       	rcall	.+0      	; 0x23cc <ADC_enuRead+0x6>
    23cc:	0f 92       	push	r0
    23ce:	cd b7       	in	r28, 0x3d	; 61
    23d0:	de b7       	in	r29, 0x3e	; 62
    23d2:	9b 83       	std	Y+3, r25	; 0x03
    23d4:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK ;
    23d6:	19 82       	std	Y+1, r1	; 0x01

	*Cpy_pu16Value   =  ADCL ;
    23d8:	e4 e2       	ldi	r30, 0x24	; 36
    23da:	f0 e0       	ldi	r31, 0x00	; 0
    23dc:	80 81       	ld	r24, Z
    23de:	88 2f       	mov	r24, r24
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	ea 81       	ldd	r30, Y+2	; 0x02
    23e4:	fb 81       	ldd	r31, Y+3	; 0x03
    23e6:	91 83       	std	Z+1, r25	; 0x01
    23e8:	80 83       	st	Z, r24

	*Cpy_pu16Value  |=  ((u16)ADCH<< SHIFT_EIGHT_BIT) ;
    23ea:	ea 81       	ldd	r30, Y+2	; 0x02
    23ec:	fb 81       	ldd	r31, Y+3	; 0x03
    23ee:	20 81       	ld	r18, Z
    23f0:	31 81       	ldd	r19, Z+1	; 0x01
    23f2:	e5 e2       	ldi	r30, 0x25	; 37
    23f4:	f0 e0       	ldi	r31, 0x00	; 0
    23f6:	80 81       	ld	r24, Z
    23f8:	88 2f       	mov	r24, r24
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	98 2f       	mov	r25, r24
    23fe:	88 27       	eor	r24, r24
    2400:	82 2b       	or	r24, r18
    2402:	93 2b       	or	r25, r19
    2404:	ea 81       	ldd	r30, Y+2	; 0x02
    2406:	fb 81       	ldd	r31, Y+3	; 0x03
    2408:	91 83       	std	Z+1, r25	; 0x01
    240a:	80 83       	st	Z, r24

	/* Report the Final State.   */
	return Local_enuErrorState    ;
    240c:	89 81       	ldd	r24, Y+1	; 0x01

}//End of ADC_enuRead.
    240e:	0f 90       	pop	r0
    2410:	0f 90       	pop	r0
    2412:	0f 90       	pop	r0
    2414:	cf 91       	pop	r28
    2416:	df 91       	pop	r29
    2418:	08 95       	ret

0000241a <ADC_enuReadHighValue>:
/* Description     : Utility Function Read whole ten bits of ADC Data Register. */
/* Argument        : Address Variable of u8 Type .                              */
/* Return          : Error state of type ES_t.                                  */
/**.................*************************************************************/
ES_t ADC_enuReadHighValue(u8 * Copy_pu8Value)
{
    241a:	df 93       	push	r29
    241c:	cf 93       	push	r28
    241e:	00 d0       	rcall	.+0      	; 0x2420 <ADC_enuReadHighValue+0x6>
    2420:	0f 92       	push	r0
    2422:	cd b7       	in	r28, 0x3d	; 61
    2424:	de b7       	in	r29, 0x3e	; 62
    2426:	9b 83       	std	Y+3, r25	; 0x03
    2428:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    242a:	19 82       	std	Y+1, r1	; 0x01


	*Copy_pu8Value  = (ADCL >> 2);
    242c:	e4 e2       	ldi	r30, 0x24	; 36
    242e:	f0 e0       	ldi	r31, 0x00	; 0
    2430:	80 81       	ld	r24, Z
    2432:	86 95       	lsr	r24
    2434:	86 95       	lsr	r24
    2436:	ea 81       	ldd	r30, Y+2	; 0x02
    2438:	fb 81       	ldd	r31, Y+3	; 0x03
    243a:	80 83       	st	Z, r24
	*Copy_pu8Value |= (ADCH << 6);
    243c:	ea 81       	ldd	r30, Y+2	; 0x02
    243e:	fb 81       	ldd	r31, Y+3	; 0x03
    2440:	80 81       	ld	r24, Z
    2442:	28 2f       	mov	r18, r24
    2444:	e5 e2       	ldi	r30, 0x25	; 37
    2446:	f0 e0       	ldi	r31, 0x00	; 0
    2448:	80 81       	ld	r24, Z
    244a:	88 2f       	mov	r24, r24
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	00 24       	eor	r0, r0
    2450:	96 95       	lsr	r25
    2452:	87 95       	ror	r24
    2454:	07 94       	ror	r0
    2456:	96 95       	lsr	r25
    2458:	87 95       	ror	r24
    245a:	07 94       	ror	r0
    245c:	98 2f       	mov	r25, r24
    245e:	80 2d       	mov	r24, r0
    2460:	82 2b       	or	r24, r18
    2462:	ea 81       	ldd	r30, Y+2	; 0x02
    2464:	fb 81       	ldd	r31, Y+3	; 0x03
    2466:	80 83       	st	Z, r24

	return Local_enuErrorState;
    2468:	89 81       	ldd	r24, Y+1	; 0x01
}
    246a:	0f 90       	pop	r0
    246c:	0f 90       	pop	r0
    246e:	0f 90       	pop	r0
    2470:	cf 91       	pop	r28
    2472:	df 91       	pop	r29
    2474:	08 95       	ret

00002476 <ADC_enuSelectChannel>:
/*                                          ADC_CHANNEL_1_1  ,  ADC_CHANNEL_3_2  */
/*                                                                               */
/* Return          : Error state of type ES_t.                                   */
/**......................*********************************************************/
ES_t ADC_enuSelectChannel(u8 Cpy_u8ChannelID )
{
    2476:	df 93       	push	r29
    2478:	cf 93       	push	r28
    247a:	00 d0       	rcall	.+0      	; 0x247c <ADC_enuSelectChannel+0x6>
    247c:	cd b7       	in	r28, 0x3d	; 61
    247e:	de b7       	in	r29, 0x3e	; 62
    2480:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK ;
    2482:	19 82       	std	Y+1, r1	; 0x01

	/* Check that the Passed Arg. is in the Correct range. */
	if( Cpy_u8ChannelID <= CHANNEL_4_2 )
    2484:	8a 81       	ldd	r24, Y+2	; 0x02
    2486:	8d 31       	cpi	r24, 0x1D	; 29
    2488:	90 f4       	brcc	.+36     	; 0x24ae <ADC_enuSelectChannel+0x38>
	{
		/* Clearing the previous Choice.    */
		ADMUX &=~( (ADC_MSK_BIT<<MUX4)|(ADC_MSK_BIT<<MUX3)|(ADC_MSK_BIT<<MUX2)|(ADC_MSK_BIT<<MUX1)|(ADC_MSK_BIT<<MUX0)  );
    248a:	a7 e2       	ldi	r26, 0x27	; 39
    248c:	b0 e0       	ldi	r27, 0x00	; 0
    248e:	e7 e2       	ldi	r30, 0x27	; 39
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	80 81       	ld	r24, Z
    2494:	80 7e       	andi	r24, 0xE0	; 224
    2496:	8c 93       	st	X, r24

		/* Write the New Choice in the ADMUX Register. */
		ADMUX |= Cpy_u8ChannelID ;
    2498:	a7 e2       	ldi	r26, 0x27	; 39
    249a:	b0 e0       	ldi	r27, 0x00	; 0
    249c:	e7 e2       	ldi	r30, 0x27	; 39
    249e:	f0 e0       	ldi	r31, 0x00	; 0
    24a0:	90 81       	ld	r25, Z
    24a2:	8a 81       	ldd	r24, Y+2	; 0x02
    24a4:	89 2b       	or	r24, r25
    24a6:	8c 93       	st	X, r24

		/* Report that the Selected channel has been Selected.*/
		Local_enuErrorState = ES_OK ;
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	89 83       	std	Y+1, r24	; 0x01
    24ac:	02 c0       	rjmp	.+4      	; 0x24b2 <ADC_enuSelectChannel+0x3c>
	}
	else
	{
		/* Report that the passed Channel is Not Valid to Selected.*/
		Local_enuErrorState = ES_OUT_OF_RANGE ;
    24ae:	83 e0       	ldi	r24, 0x03	; 3
    24b0:	89 83       	std	Y+1, r24	; 0x01
	}

	/* Report the Final State.   */
	return Local_enuErrorState    ;
    24b2:	89 81       	ldd	r24, Y+1	; 0x01

}//End of ADC_enuSelectChannel.
    24b4:	0f 90       	pop	r0
    24b6:	0f 90       	pop	r0
    24b8:	cf 91       	pop	r28
    24ba:	df 91       	pop	r29
    24bc:	08 95       	ret

000024be <ADC_enuEnableTriggeringMode>:
/*                                                                               */
/*                                                                               */
/* Return          : Error state of type ES_t.                                   */
/**..............................*************************************************/
ES_t ADC_enuEnableTriggeringMode(u8 Cpy_u8TriggingSource)
{
    24be:	df 93       	push	r29
    24c0:	cf 93       	push	r28
    24c2:	00 d0       	rcall	.+0      	; 0x24c4 <ADC_enuEnableTriggeringMode+0x6>
    24c4:	00 d0       	rcall	.+0      	; 0x24c6 <ADC_enuEnableTriggeringMode+0x8>
    24c6:	cd b7       	in	r28, 0x3d	; 61
    24c8:	de b7       	in	r29, 0x3e	; 62
    24ca:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK ;
    24cc:	19 82       	std	Y+1, r1	; 0x01


	if( Cpy_u8TriggingSource <= EXTI1_CAP_EVNT )
    24ce:	8a 81       	ldd	r24, Y+2	; 0x02
    24d0:	88 30       	cpi	r24, 0x08	; 8
    24d2:	08 f0       	brcs	.+2      	; 0x24d6 <ADC_enuEnableTriggeringMode+0x18>
    24d4:	a2 c0       	rjmp	.+324    	; 0x261a <ADC_enuEnableTriggeringMode+0x15c>
	{
		/* Disable auto triggering source.  */
		ADCSRA  &=~(ADC_MSK_BIT<<ADATE);
    24d6:	a6 e2       	ldi	r26, 0x26	; 38
    24d8:	b0 e0       	ldi	r27, 0x00	; 0
    24da:	e6 e2       	ldi	r30, 0x26	; 38
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	80 81       	ld	r24, Z
    24e0:	8f 7d       	andi	r24, 0xDF	; 223
    24e2:	8c 93       	st	X, r24

		/* Reset the Auto_triggering Source Selection Bits.                                 */
		SFIOR &=~(  (ADC_MSK_BIT<<ADTS2) | ( ADC_MSK_BIT<<ADTS1 ) | (ADC_MSK_BIT<<ADTS0)   );
    24e4:	a0 e5       	ldi	r26, 0x50	; 80
    24e6:	b0 e0       	ldi	r27, 0x00	; 0
    24e8:	e0 e5       	ldi	r30, 0x50	; 80
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	80 81       	ld	r24, Z
    24ee:	8f 71       	andi	r24, 0x1F	; 31
    24f0:	8c 93       	st	X, r24

		/* Switch to the Suitable Triggrinning Source.*/
		switch( Cpy_u8TriggingSource )
    24f2:	8a 81       	ldd	r24, Y+2	; 0x02
    24f4:	28 2f       	mov	r18, r24
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	3c 83       	std	Y+4, r19	; 0x04
    24fa:	2b 83       	std	Y+3, r18	; 0x03
    24fc:	8b 81       	ldd	r24, Y+3	; 0x03
    24fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2500:	83 30       	cpi	r24, 0x03	; 3
    2502:	91 05       	cpc	r25, r1
    2504:	b1 f1       	breq	.+108    	; 0x2572 <ADC_enuEnableTriggeringMode+0xb4>
    2506:	2b 81       	ldd	r18, Y+3	; 0x03
    2508:	3c 81       	ldd	r19, Y+4	; 0x04
    250a:	24 30       	cpi	r18, 0x04	; 4
    250c:	31 05       	cpc	r19, r1
    250e:	5c f4       	brge	.+22     	; 0x2526 <ADC_enuEnableTriggeringMode+0x68>
    2510:	8b 81       	ldd	r24, Y+3	; 0x03
    2512:	9c 81       	ldd	r25, Y+4	; 0x04
    2514:	81 30       	cpi	r24, 0x01	; 1
    2516:	91 05       	cpc	r25, r1
    2518:	e1 f0       	breq	.+56     	; 0x2552 <ADC_enuEnableTriggeringMode+0x94>
    251a:	2b 81       	ldd	r18, Y+3	; 0x03
    251c:	3c 81       	ldd	r19, Y+4	; 0x04
    251e:	22 30       	cpi	r18, 0x02	; 2
    2520:	31 05       	cpc	r19, r1
    2522:	fc f4       	brge	.+62     	; 0x2562 <ADC_enuEnableTriggeringMode+0xa4>
    2524:	70 c0       	rjmp	.+224    	; 0x2606 <ADC_enuEnableTriggeringMode+0x148>
    2526:	8b 81       	ldd	r24, Y+3	; 0x03
    2528:	9c 81       	ldd	r25, Y+4	; 0x04
    252a:	85 30       	cpi	r24, 0x05	; 5
    252c:	91 05       	cpc	r25, r1
    252e:	c1 f1       	breq	.+112    	; 0x25a0 <ADC_enuEnableTriggeringMode+0xe2>
    2530:	2b 81       	ldd	r18, Y+3	; 0x03
    2532:	3c 81       	ldd	r19, Y+4	; 0x04
    2534:	25 30       	cpi	r18, 0x05	; 5
    2536:	31 05       	cpc	r19, r1
    2538:	5c f1       	brlt	.+86     	; 0x2590 <ADC_enuEnableTriggeringMode+0xd2>
    253a:	8b 81       	ldd	r24, Y+3	; 0x03
    253c:	9c 81       	ldd	r25, Y+4	; 0x04
    253e:	86 30       	cpi	r24, 0x06	; 6
    2540:	91 05       	cpc	r25, r1
    2542:	e9 f1       	breq	.+122    	; 0x25be <ADC_enuEnableTriggeringMode+0x100>
    2544:	2b 81       	ldd	r18, Y+3	; 0x03
    2546:	3c 81       	ldd	r19, Y+4	; 0x04
    2548:	27 30       	cpi	r18, 0x07	; 7
    254a:	31 05       	cpc	r19, r1
    254c:	09 f4       	brne	.+2      	; 0x2550 <ADC_enuEnableTriggeringMode+0x92>
    254e:	46 c0       	rjmp	.+140    	; 0x25dc <ADC_enuEnableTriggeringMode+0x11e>
    2550:	5a c0       	rjmp	.+180    	; 0x2606 <ADC_enuEnableTriggeringMode+0x148>
		{
		case FREE_RUNNING :
			break;

		case ANALOG_COMPARATOR :
			SFIOR |=(ADC_MSK_BIT<<ADTS0) ;
    2552:	a0 e5       	ldi	r26, 0x50	; 80
    2554:	b0 e0       	ldi	r27, 0x00	; 0
    2556:	e0 e5       	ldi	r30, 0x50	; 80
    2558:	f0 e0       	ldi	r31, 0x00	; 0
    255a:	80 81       	ld	r24, Z
    255c:	80 62       	ori	r24, 0x20	; 32
    255e:	8c 93       	st	X, r24
    2560:	52 c0       	rjmp	.+164    	; 0x2606 <ADC_enuEnableTriggeringMode+0x148>
			break;

		case EXTI0 :
			SFIOR |=(ADC_MSK_BIT<<ADTS1) ;
    2562:	a0 e5       	ldi	r26, 0x50	; 80
    2564:	b0 e0       	ldi	r27, 0x00	; 0
    2566:	e0 e5       	ldi	r30, 0x50	; 80
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	80 81       	ld	r24, Z
    256c:	80 64       	ori	r24, 0x40	; 64
    256e:	8c 93       	st	X, r24
    2570:	4a c0       	rjmp	.+148    	; 0x2606 <ADC_enuEnableTriggeringMode+0x148>
			break;

		case EXTI0_CTC :
			SFIOR |=(ADC_MSK_BIT<<ADTS0) ;
    2572:	a0 e5       	ldi	r26, 0x50	; 80
    2574:	b0 e0       	ldi	r27, 0x00	; 0
    2576:	e0 e5       	ldi	r30, 0x50	; 80
    2578:	f0 e0       	ldi	r31, 0x00	; 0
    257a:	80 81       	ld	r24, Z
    257c:	80 62       	ori	r24, 0x20	; 32
    257e:	8c 93       	st	X, r24
			SFIOR |=(ADC_MSK_BIT<<ADTS1) ;
    2580:	a0 e5       	ldi	r26, 0x50	; 80
    2582:	b0 e0       	ldi	r27, 0x00	; 0
    2584:	e0 e5       	ldi	r30, 0x50	; 80
    2586:	f0 e0       	ldi	r31, 0x00	; 0
    2588:	80 81       	ld	r24, Z
    258a:	80 64       	ori	r24, 0x40	; 64
    258c:	8c 93       	st	X, r24
    258e:	3b c0       	rjmp	.+118    	; 0x2606 <ADC_enuEnableTriggeringMode+0x148>
			break;

		case EXTI0_OVF :
			SFIOR |=(ADC_MSK_BIT<<ADTS2) ;
    2590:	a0 e5       	ldi	r26, 0x50	; 80
    2592:	b0 e0       	ldi	r27, 0x00	; 0
    2594:	e0 e5       	ldi	r30, 0x50	; 80
    2596:	f0 e0       	ldi	r31, 0x00	; 0
    2598:	80 81       	ld	r24, Z
    259a:	80 68       	ori	r24, 0x80	; 128
    259c:	8c 93       	st	X, r24
    259e:	33 c0       	rjmp	.+102    	; 0x2606 <ADC_enuEnableTriggeringMode+0x148>
			break;

		case EXTI0_CTC_B :
			SFIOR |=(ADC_MSK_BIT<<ADTS0) ;
    25a0:	a0 e5       	ldi	r26, 0x50	; 80
    25a2:	b0 e0       	ldi	r27, 0x00	; 0
    25a4:	e0 e5       	ldi	r30, 0x50	; 80
    25a6:	f0 e0       	ldi	r31, 0x00	; 0
    25a8:	80 81       	ld	r24, Z
    25aa:	80 62       	ori	r24, 0x20	; 32
    25ac:	8c 93       	st	X, r24
			SFIOR |=(ADC_MSK_BIT<<ADTS2) ;
    25ae:	a0 e5       	ldi	r26, 0x50	; 80
    25b0:	b0 e0       	ldi	r27, 0x00	; 0
    25b2:	e0 e5       	ldi	r30, 0x50	; 80
    25b4:	f0 e0       	ldi	r31, 0x00	; 0
    25b6:	80 81       	ld	r24, Z
    25b8:	80 68       	ori	r24, 0x80	; 128
    25ba:	8c 93       	st	X, r24
    25bc:	24 c0       	rjmp	.+72     	; 0x2606 <ADC_enuEnableTriggeringMode+0x148>
			break;

		case EXTI1_OVF :
			SFIOR |=(ADC_MSK_BIT<<ADTS2) ;
    25be:	a0 e5       	ldi	r26, 0x50	; 80
    25c0:	b0 e0       	ldi	r27, 0x00	; 0
    25c2:	e0 e5       	ldi	r30, 0x50	; 80
    25c4:	f0 e0       	ldi	r31, 0x00	; 0
    25c6:	80 81       	ld	r24, Z
    25c8:	80 68       	ori	r24, 0x80	; 128
    25ca:	8c 93       	st	X, r24
			SFIOR |=(ADC_MSK_BIT<<ADTS1) ;
    25cc:	a0 e5       	ldi	r26, 0x50	; 80
    25ce:	b0 e0       	ldi	r27, 0x00	; 0
    25d0:	e0 e5       	ldi	r30, 0x50	; 80
    25d2:	f0 e0       	ldi	r31, 0x00	; 0
    25d4:	80 81       	ld	r24, Z
    25d6:	80 64       	ori	r24, 0x40	; 64
    25d8:	8c 93       	st	X, r24
    25da:	15 c0       	rjmp	.+42     	; 0x2606 <ADC_enuEnableTriggeringMode+0x148>
			break;

		case EXTI1_CAP_EVNT :
			SFIOR |=(ADC_MSK_BIT<<ADTS0) ;
    25dc:	a0 e5       	ldi	r26, 0x50	; 80
    25de:	b0 e0       	ldi	r27, 0x00	; 0
    25e0:	e0 e5       	ldi	r30, 0x50	; 80
    25e2:	f0 e0       	ldi	r31, 0x00	; 0
    25e4:	80 81       	ld	r24, Z
    25e6:	80 62       	ori	r24, 0x20	; 32
    25e8:	8c 93       	st	X, r24
			SFIOR |=(ADC_MSK_BIT<<ADTS1) ;
    25ea:	a0 e5       	ldi	r26, 0x50	; 80
    25ec:	b0 e0       	ldi	r27, 0x00	; 0
    25ee:	e0 e5       	ldi	r30, 0x50	; 80
    25f0:	f0 e0       	ldi	r31, 0x00	; 0
    25f2:	80 81       	ld	r24, Z
    25f4:	80 64       	ori	r24, 0x40	; 64
    25f6:	8c 93       	st	X, r24
			SFIOR |=(ADC_MSK_BIT<<ADTS2) ;
    25f8:	a0 e5       	ldi	r26, 0x50	; 80
    25fa:	b0 e0       	ldi	r27, 0x00	; 0
    25fc:	e0 e5       	ldi	r30, 0x50	; 80
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	80 81       	ld	r24, Z
    2602:	80 68       	ori	r24, 0x80	; 128
    2604:	8c 93       	st	X, r24
		default:;

		}

		//Enable auto triggering source.
		ADCSRA  |=(ADC_MSK_BIT<<ADATE);
    2606:	a6 e2       	ldi	r26, 0x26	; 38
    2608:	b0 e0       	ldi	r27, 0x00	; 0
    260a:	e6 e2       	ldi	r30, 0x26	; 38
    260c:	f0 e0       	ldi	r31, 0x00	; 0
    260e:	80 81       	ld	r24, Z
    2610:	80 62       	ori	r24, 0x20	; 32
    2612:	8c 93       	st	X, r24

		/* Report that the Triggerring Source has been Selected.*/
		Local_enuErrorState = ES_OK ;
    2614:	81 e0       	ldi	r24, 0x01	; 1
    2616:	89 83       	std	Y+1, r24	; 0x01
    2618:	02 c0       	rjmp	.+4      	; 0x261e <ADC_enuEnableTriggeringMode+0x160>
	}
	else
	{
		/* Report that the passed Triggerring Sourc is Not Valid.*/
		Local_enuErrorState =  ES_OUT_OF_RANGE ;
    261a:	83 e0       	ldi	r24, 0x03	; 3
    261c:	89 83       	std	Y+1, r24	; 0x01
	}

	/* Report the Final State.   */
	return Local_enuErrorState    ;
    261e:	89 81       	ldd	r24, Y+1	; 0x01


}//End of ADC_enuEnableTriggeringMode.
    2620:	0f 90       	pop	r0
    2622:	0f 90       	pop	r0
    2624:	0f 90       	pop	r0
    2626:	0f 90       	pop	r0
    2628:	cf 91       	pop	r28
    262a:	df 91       	pop	r29
    262c:	08 95       	ret

0000262e <ADC_enuDisableTriggeringMode>:
/* Description     : Utility Fuction to Disable the AutoTriggerring mode.     */
/* Argument        : None.                                                    */
/* Return          : Error state of type ES_t.                                */
/**..............................**********************************************/
ES_t ADC_enuDisableTriggeringMode(void)
{
    262e:	df 93       	push	r29
    2630:	cf 93       	push	r28
    2632:	0f 92       	push	r0
    2634:	cd b7       	in	r28, 0x3d	; 61
    2636:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK ;
    2638:	19 82       	std	Y+1, r1	; 0x01


	// Check if the ADC is enabled.
	if( ((ADCSRA>>ADATE)&ADC_MSK_BIT) )
    263a:	e6 e2       	ldi	r30, 0x26	; 38
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	80 81       	ld	r24, Z
    2640:	82 95       	swap	r24
    2642:	86 95       	lsr	r24
    2644:	87 70       	andi	r24, 0x07	; 7
    2646:	88 2f       	mov	r24, r24
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	81 70       	andi	r24, 0x01	; 1
    264c:	90 70       	andi	r25, 0x00	; 0
    264e:	88 23       	and	r24, r24
    2650:	49 f0       	breq	.+18     	; 0x2664 <ADC_enuDisableTriggeringMode+0x36>
	{
		// Disable the ADC.
		ADCSRA  &=~(ADC_MSK_BIT<<ADATE);
    2652:	a6 e2       	ldi	r26, 0x26	; 38
    2654:	b0 e0       	ldi	r27, 0x00	; 0
    2656:	e6 e2       	ldi	r30, 0x26	; 38
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	80 81       	ld	r24, Z
    265c:	8f 7d       	andi	r24, 0xDF	; 223
    265e:	8c 93       	st	X, r24

		// Update the Error State.
		Local_enuErrorState = ES_OK ;
    2660:	81 e0       	ldi	r24, 0x01	; 1
    2662:	89 83       	std	Y+1, r24	; 0x01
	{
		//Do nothing.
	}

	/* Report the Final State.   */
	return Local_enuErrorState    ;
    2664:	89 81       	ldd	r24, Y+1	; 0x01

}//End of ADC_enuDisableTriggeringMode.
    2666:	0f 90       	pop	r0
    2668:	cf 91       	pop	r28
    266a:	df 91       	pop	r29
    266c:	08 95       	ret

0000266e <ADC_enuEnableInterruptMode>:
/*                   Conversion is compolet.                                  */
/* Argument        : None.                                                    */
/* Return          : Error state of type ES_t.                                */
/**............................************************************************/
ES_t ADC_enuEnableInterruptMode(void)
{
    266e:	df 93       	push	r29
    2670:	cf 93       	push	r28
    2672:	0f 92       	push	r0
    2674:	cd b7       	in	r28, 0x3d	; 61
    2676:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK ;
    2678:	19 82       	std	Y+1, r1	; 0x01

	/* -Check if the interrupt is already Enabled.  */
	if( !((ADCSRA>>ADIE)&ADC_MSK_BIT) )
    267a:	e6 e2       	ldi	r30, 0x26	; 38
    267c:	f0 e0       	ldi	r31, 0x00	; 0
    267e:	80 81       	ld	r24, Z
    2680:	86 95       	lsr	r24
    2682:	86 95       	lsr	r24
    2684:	86 95       	lsr	r24
    2686:	88 2f       	mov	r24, r24
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	81 70       	andi	r24, 0x01	; 1
    268c:	90 70       	andi	r25, 0x00	; 0
    268e:	00 97       	sbiw	r24, 0x00	; 0
    2690:	49 f4       	brne	.+18     	; 0x26a4 <ADC_enuEnableInterruptMode+0x36>
	{
		// Enable the ADC Interrupt.
		ADCSRA |=(ADC_MSK_BIT<<ADIE);
    2692:	a6 e2       	ldi	r26, 0x26	; 38
    2694:	b0 e0       	ldi	r27, 0x00	; 0
    2696:	e6 e2       	ldi	r30, 0x26	; 38
    2698:	f0 e0       	ldi	r31, 0x00	; 0
    269a:	80 81       	ld	r24, Z
    269c:	88 60       	ori	r24, 0x08	; 8
    269e:	8c 93       	st	X, r24

		// Update the Error State.
		Local_enuErrorState = ES_OK ;
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	89 83       	std	Y+1, r24	; 0x01
	{
		//Do nothing.
	}

	/* Report the Final State.   */
	return Local_enuErrorState    ;
    26a4:	89 81       	ldd	r24, Y+1	; 0x01

}//End ofADC_enuEnableInterruptMode.
    26a6:	0f 90       	pop	r0
    26a8:	cf 91       	pop	r28
    26aa:	df 91       	pop	r29
    26ac:	08 95       	ret

000026ae <ADC_enuDisableInterruptMode>:
/* Description     : Utility Function to Disable the ADC.                     */
/* Argument        : None.                                                    */
/* Return          : Error state of type ES_t.                                */
/**.................***********************************************************/
ES_t ADC_enuDisableInterruptMode(void)
{
    26ae:	df 93       	push	r29
    26b0:	cf 93       	push	r28
    26b2:	0f 92       	push	r0
    26b4:	cd b7       	in	r28, 0x3d	; 61
    26b6:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK ;
    26b8:	19 82       	std	Y+1, r1	; 0x01

	/* Check if the interrupt is already Disabled.  */
	if( ((ADCSRA>>ADIE)&ADC_MSK_BIT) )
    26ba:	e6 e2       	ldi	r30, 0x26	; 38
    26bc:	f0 e0       	ldi	r31, 0x00	; 0
    26be:	80 81       	ld	r24, Z
    26c0:	86 95       	lsr	r24
    26c2:	86 95       	lsr	r24
    26c4:	86 95       	lsr	r24
    26c6:	88 2f       	mov	r24, r24
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	81 70       	andi	r24, 0x01	; 1
    26cc:	90 70       	andi	r25, 0x00	; 0
    26ce:	88 23       	and	r24, r24
    26d0:	49 f0       	breq	.+18     	; 0x26e4 <ADC_enuDisableInterruptMode+0x36>
	{
		// Disable the ADC interrupt.
		ADCSRA &=~(ADC_MSK_BIT<<ADIE);
    26d2:	a6 e2       	ldi	r26, 0x26	; 38
    26d4:	b0 e0       	ldi	r27, 0x00	; 0
    26d6:	e6 e2       	ldi	r30, 0x26	; 38
    26d8:	f0 e0       	ldi	r31, 0x00	; 0
    26da:	80 81       	ld	r24, Z
    26dc:	87 7f       	andi	r24, 0xF7	; 247
    26de:	8c 93       	st	X, r24

		// Report that the interrupt is Disabled.
		Local_enuErrorState = ES_OK ;
    26e0:	81 e0       	ldi	r24, 0x01	; 1
    26e2:	89 83       	std	Y+1, r24	; 0x01
	{
		// Do nothing.
	}

	// Report the final State.
	return Local_enuErrorState   ;
    26e4:	89 81       	ldd	r24, Y+1	; 0x01

}//End of ADC_enuDisableInterruptMode.
    26e6:	0f 90       	pop	r0
    26e8:	cf 91       	pop	r28
    26ea:	df 91       	pop	r29
    26ec:	08 95       	ret

000026ee <ADC_enuCallBack>:

/*********************************************************/
/*********************************************************/
/*********************************************************/
ES_t ADC_enuCallBack(volatile void(*Cpy_pfunAppFunc)(void*) ,  void* Cpy_pvidAppPara)
{
    26ee:	df 93       	push	r29
    26f0:	cf 93       	push	r28
    26f2:	00 d0       	rcall	.+0      	; 0x26f4 <ADC_enuCallBack+0x6>
    26f4:	00 d0       	rcall	.+0      	; 0x26f6 <ADC_enuCallBack+0x8>
    26f6:	0f 92       	push	r0
    26f8:	cd b7       	in	r28, 0x3d	; 61
    26fa:	de b7       	in	r29, 0x3e	; 62
    26fc:	9b 83       	std	Y+3, r25	; 0x03
    26fe:	8a 83       	std	Y+2, r24	; 0x02
    2700:	7d 83       	std	Y+5, r23	; 0x05
    2702:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK ;
    2704:	19 82       	std	Y+1, r1	; 0x01

	if( Cpy_pfunAppFunc != NULL )
    2706:	8a 81       	ldd	r24, Y+2	; 0x02
    2708:	9b 81       	ldd	r25, Y+3	; 0x03
    270a:	00 97       	sbiw	r24, 0x00	; 0
    270c:	79 f0       	breq	.+30     	; 0x272c <ADC_enuCallBack+0x3e>
	{
		ADC_pvidfunISRFunc   = Cpy_pfunAppFunc ;
    270e:	8a 81       	ldd	r24, Y+2	; 0x02
    2710:	9b 81       	ldd	r25, Y+3	; 0x03
    2712:	90 93 7f 00 	sts	0x007F, r25
    2716:	80 93 7e 00 	sts	0x007E, r24

		ADC_pvidISRParameter = Cpy_pvidAppPara ;
    271a:	8c 81       	ldd	r24, Y+4	; 0x04
    271c:	9d 81       	ldd	r25, Y+5	; 0x05
    271e:	90 93 81 00 	sts	0x0081, r25
    2722:	80 93 80 00 	sts	0x0080, r24

		Local_enuErrorState  = ES_OK ;
    2726:	81 e0       	ldi	r24, 0x01	; 1
    2728:	89 83       	std	Y+1, r24	; 0x01
    272a:	02 c0       	rjmp	.+4      	; 0x2730 <ADC_enuCallBack+0x42>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER  ;
    272c:	82 e0       	ldi	r24, 0x02	; 2
    272e:	89 83       	std	Y+1, r24	; 0x01
	}

	/* Report the Final State.   */
	return Local_enuErrorState    ;
    2730:	89 81       	ldd	r24, Y+1	; 0x01

}//End of
    2732:	0f 90       	pop	r0
    2734:	0f 90       	pop	r0
    2736:	0f 90       	pop	r0
    2738:	0f 90       	pop	r0
    273a:	0f 90       	pop	r0
    273c:	cf 91       	pop	r28
    273e:	df 91       	pop	r29
    2740:	08 95       	ret

00002742 <__vector_16>:


ISR(VECT_ADC)
{
    2742:	1f 92       	push	r1
    2744:	0f 92       	push	r0
    2746:	0f b6       	in	r0, 0x3f	; 63
    2748:	0f 92       	push	r0
    274a:	11 24       	eor	r1, r1
    274c:	2f 93       	push	r18
    274e:	3f 93       	push	r19
    2750:	4f 93       	push	r20
    2752:	5f 93       	push	r21
    2754:	6f 93       	push	r22
    2756:	7f 93       	push	r23
    2758:	8f 93       	push	r24
    275a:	9f 93       	push	r25
    275c:	af 93       	push	r26
    275e:	bf 93       	push	r27
    2760:	ef 93       	push	r30
    2762:	ff 93       	push	r31
    2764:	df 93       	push	r29
    2766:	cf 93       	push	r28
    2768:	cd b7       	in	r28, 0x3d	; 61
    276a:	de b7       	in	r29, 0x3e	; 62

	if (ADC_pvidfunISRFunc != NULL)
    276c:	80 91 7e 00 	lds	r24, 0x007E
    2770:	90 91 7f 00 	lds	r25, 0x007F
    2774:	00 97       	sbiw	r24, 0x00	; 0
    2776:	49 f0       	breq	.+18     	; 0x278a <__vector_16+0x48>
	{
		ADC_pvidfunISRFunc(ADC_pvidISRParameter);
    2778:	e0 91 7e 00 	lds	r30, 0x007E
    277c:	f0 91 7f 00 	lds	r31, 0x007F
    2780:	80 91 80 00 	lds	r24, 0x0080
    2784:	90 91 81 00 	lds	r25, 0x0081
    2788:	09 95       	icall
	}

}
    278a:	cf 91       	pop	r28
    278c:	df 91       	pop	r29
    278e:	ff 91       	pop	r31
    2790:	ef 91       	pop	r30
    2792:	bf 91       	pop	r27
    2794:	af 91       	pop	r26
    2796:	9f 91       	pop	r25
    2798:	8f 91       	pop	r24
    279a:	7f 91       	pop	r23
    279c:	6f 91       	pop	r22
    279e:	5f 91       	pop	r21
    27a0:	4f 91       	pop	r20
    27a2:	3f 91       	pop	r19
    27a4:	2f 91       	pop	r18
    27a6:	0f 90       	pop	r0
    27a8:	0f be       	out	0x3f, r0	; 63
    27aa:	0f 90       	pop	r0
    27ac:	1f 90       	pop	r1
    27ae:	18 95       	reti

000027b0 <main>:
#include "ADC_Cnfg.h"
#include "ADC_interface.h"

#include <util\delay.h>
int main(void)
{
    27b0:	df 93       	push	r29
    27b2:	cf 93       	push	r28
    27b4:	cd b7       	in	r28, 0x3d	; 61
    27b6:	de b7       	in	r29, 0x3e	; 62
    27b8:	69 97       	sbiw	r28, 0x19	; 25
    27ba:	0f b6       	in	r0, 0x3f	; 63
    27bc:	f8 94       	cli
    27be:	de bf       	out	0x3e, r29	; 62
    27c0:	0f be       	out	0x3f, r0	; 63
    27c2:	cd bf       	out	0x3d, r28	; 61
	u8 ADC_Read = 0 ;
    27c4:	19 8e       	std	Y+25, r1	; 0x19

	DIO_enuSetPortDirection( DIO_PORTD , DIO_OUTPUT_PORT );
    27c6:	83 e0       	ldi	r24, 0x03	; 3
    27c8:	6f ef       	ldi	r22, 0xFF	; 255
    27ca:	0e 94 dd 09 	call	0x13ba	; 0x13ba <DIO_enuSetPortDirection>
	DIO_enuSetPortValue(DIO_PORTD , 0xFF);
    27ce:	83 e0       	ldi	r24, 0x03	; 3
    27d0:	6f ef       	ldi	r22, 0xFF	; 255
    27d2:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DIO_enuSetPortValue>

	DIO_enuSetPinDirection(DIO_PORTA ,DIO_PIN0, DIO_INPTU_PIN );
    27d6:	80 e0       	ldi	r24, 0x00	; 0
    27d8:	60 e0       	ldi	r22, 0x00	; 0
    27da:	40 e0       	ldi	r20, 0x00	; 0
    27dc:	0e 94 2d 0b 	call	0x165a	; 0x165a <DIO_enuSetPinDirection>

	ADC_enuInit();
    27e0:	0e 94 46 11 	call	0x228c	; 0x228c <ADC_enuInit>
	ADC_enuSelectChannel( ADC_CHANNEL_0);
    27e4:	80 e0       	ldi	r24, 0x00	; 0
    27e6:	0e 94 3b 12 	call	0x2476	; 0x2476 <ADC_enuSelectChannel>
	ADC_enuEnable();
    27ea:	0e 94 6d 11 	call	0x22da	; 0x22da <ADC_enuEnable>


	while(1)
	{
		ADC_enuStartConversion();
    27ee:	0e 94 a5 11 	call	0x234a	; 0x234a <ADC_enuStartConversion>
		ADC_enuPollingSys();
    27f2:	0e 94 c6 11 	call	0x238c	; 0x238c <ADC_enuPollingSys>
    27f6:	80 e0       	ldi	r24, 0x00	; 0
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	a0 e2       	ldi	r26, 0x20	; 32
    27fc:	b1 e4       	ldi	r27, 0x41	; 65
    27fe:	8d 8b       	std	Y+21, r24	; 0x15
    2800:	9e 8b       	std	Y+22, r25	; 0x16
    2802:	af 8b       	std	Y+23, r26	; 0x17
    2804:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2806:	6d 89       	ldd	r22, Y+21	; 0x15
    2808:	7e 89       	ldd	r23, Y+22	; 0x16
    280a:	8f 89       	ldd	r24, Y+23	; 0x17
    280c:	98 8d       	ldd	r25, Y+24	; 0x18
    280e:	2b ea       	ldi	r18, 0xAB	; 171
    2810:	3a ea       	ldi	r19, 0xAA	; 170
    2812:	4a ea       	ldi	r20, 0xAA	; 170
    2814:	5e e3       	ldi	r21, 0x3E	; 62
    2816:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    281a:	dc 01       	movw	r26, r24
    281c:	cb 01       	movw	r24, r22
    281e:	89 8b       	std	Y+17, r24	; 0x11
    2820:	9a 8b       	std	Y+18, r25	; 0x12
    2822:	ab 8b       	std	Y+19, r26	; 0x13
    2824:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2826:	69 89       	ldd	r22, Y+17	; 0x11
    2828:	7a 89       	ldd	r23, Y+18	; 0x12
    282a:	8b 89       	ldd	r24, Y+19	; 0x13
    282c:	9c 89       	ldd	r25, Y+20	; 0x14
    282e:	20 e0       	ldi	r18, 0x00	; 0
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	40 e8       	ldi	r20, 0x80	; 128
    2834:	5f e3       	ldi	r21, 0x3F	; 63
    2836:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    283a:	88 23       	and	r24, r24
    283c:	1c f4       	brge	.+6      	; 0x2844 <main+0x94>
		__ticks = 1;
    283e:	81 e0       	ldi	r24, 0x01	; 1
    2840:	88 8b       	std	Y+16, r24	; 0x10
    2842:	91 c0       	rjmp	.+290    	; 0x2966 <main+0x1b6>
	else if (__tmp > 255)
    2844:	69 89       	ldd	r22, Y+17	; 0x11
    2846:	7a 89       	ldd	r23, Y+18	; 0x12
    2848:	8b 89       	ldd	r24, Y+19	; 0x13
    284a:	9c 89       	ldd	r25, Y+20	; 0x14
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	4f e7       	ldi	r20, 0x7F	; 127
    2852:	53 e4       	ldi	r21, 0x43	; 67
    2854:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2858:	18 16       	cp	r1, r24
    285a:	0c f0       	brlt	.+2      	; 0x285e <main+0xae>
    285c:	7b c0       	rjmp	.+246    	; 0x2954 <main+0x1a4>
	{
		_delay_ms(__us / 1000.0);
    285e:	6d 89       	ldd	r22, Y+21	; 0x15
    2860:	7e 89       	ldd	r23, Y+22	; 0x16
    2862:	8f 89       	ldd	r24, Y+23	; 0x17
    2864:	98 8d       	ldd	r25, Y+24	; 0x18
    2866:	20 e0       	ldi	r18, 0x00	; 0
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	4a e7       	ldi	r20, 0x7A	; 122
    286c:	54 e4       	ldi	r21, 0x44	; 68
    286e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2872:	dc 01       	movw	r26, r24
    2874:	cb 01       	movw	r24, r22
    2876:	8c 87       	std	Y+12, r24	; 0x0c
    2878:	9d 87       	std	Y+13, r25	; 0x0d
    287a:	ae 87       	std	Y+14, r26	; 0x0e
    287c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    287e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2880:	7d 85       	ldd	r23, Y+13	; 0x0d
    2882:	8e 85       	ldd	r24, Y+14	; 0x0e
    2884:	9f 85       	ldd	r25, Y+15	; 0x0f
    2886:	20 e0       	ldi	r18, 0x00	; 0
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	4a e7       	ldi	r20, 0x7A	; 122
    288c:	53 e4       	ldi	r21, 0x43	; 67
    288e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2892:	dc 01       	movw	r26, r24
    2894:	cb 01       	movw	r24, r22
    2896:	88 87       	std	Y+8, r24	; 0x08
    2898:	99 87       	std	Y+9, r25	; 0x09
    289a:	aa 87       	std	Y+10, r26	; 0x0a
    289c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    289e:	68 85       	ldd	r22, Y+8	; 0x08
    28a0:	79 85       	ldd	r23, Y+9	; 0x09
    28a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    28a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	40 e8       	ldi	r20, 0x80	; 128
    28ac:	5f e3       	ldi	r21, 0x3F	; 63
    28ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28b2:	88 23       	and	r24, r24
    28b4:	2c f4       	brge	.+10     	; 0x28c0 <main+0x110>
		__ticks = 1;
    28b6:	81 e0       	ldi	r24, 0x01	; 1
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	9f 83       	std	Y+7, r25	; 0x07
    28bc:	8e 83       	std	Y+6, r24	; 0x06
    28be:	3f c0       	rjmp	.+126    	; 0x293e <main+0x18e>
	else if (__tmp > 65535)
    28c0:	68 85       	ldd	r22, Y+8	; 0x08
    28c2:	79 85       	ldd	r23, Y+9	; 0x09
    28c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    28c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	3f ef       	ldi	r19, 0xFF	; 255
    28cc:	4f e7       	ldi	r20, 0x7F	; 127
    28ce:	57 e4       	ldi	r21, 0x47	; 71
    28d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28d4:	18 16       	cp	r1, r24
    28d6:	4c f5       	brge	.+82     	; 0x292a <main+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28d8:	6c 85       	ldd	r22, Y+12	; 0x0c
    28da:	7d 85       	ldd	r23, Y+13	; 0x0d
    28dc:	8e 85       	ldd	r24, Y+14	; 0x0e
    28de:	9f 85       	ldd	r25, Y+15	; 0x0f
    28e0:	20 e0       	ldi	r18, 0x00	; 0
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	40 e2       	ldi	r20, 0x20	; 32
    28e6:	51 e4       	ldi	r21, 0x41	; 65
    28e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ec:	dc 01       	movw	r26, r24
    28ee:	cb 01       	movw	r24, r22
    28f0:	bc 01       	movw	r22, r24
    28f2:	cd 01       	movw	r24, r26
    28f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f8:	dc 01       	movw	r26, r24
    28fa:	cb 01       	movw	r24, r22
    28fc:	9f 83       	std	Y+7, r25	; 0x07
    28fe:	8e 83       	std	Y+6, r24	; 0x06
    2900:	0f c0       	rjmp	.+30     	; 0x2920 <main+0x170>
    2902:	89 e1       	ldi	r24, 0x19	; 25
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	9d 83       	std	Y+5, r25	; 0x05
    2908:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    290a:	8c 81       	ldd	r24, Y+4	; 0x04
    290c:	9d 81       	ldd	r25, Y+5	; 0x05
    290e:	01 97       	sbiw	r24, 0x01	; 1
    2910:	f1 f7       	brne	.-4      	; 0x290e <main+0x15e>
    2912:	9d 83       	std	Y+5, r25	; 0x05
    2914:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2916:	8e 81       	ldd	r24, Y+6	; 0x06
    2918:	9f 81       	ldd	r25, Y+7	; 0x07
    291a:	01 97       	sbiw	r24, 0x01	; 1
    291c:	9f 83       	std	Y+7, r25	; 0x07
    291e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2920:	8e 81       	ldd	r24, Y+6	; 0x06
    2922:	9f 81       	ldd	r25, Y+7	; 0x07
    2924:	00 97       	sbiw	r24, 0x00	; 0
    2926:	69 f7       	brne	.-38     	; 0x2902 <main+0x152>
    2928:	24 c0       	rjmp	.+72     	; 0x2972 <main+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    292a:	68 85       	ldd	r22, Y+8	; 0x08
    292c:	79 85       	ldd	r23, Y+9	; 0x09
    292e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2930:	9b 85       	ldd	r25, Y+11	; 0x0b
    2932:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2936:	dc 01       	movw	r26, r24
    2938:	cb 01       	movw	r24, r22
    293a:	9f 83       	std	Y+7, r25	; 0x07
    293c:	8e 83       	std	Y+6, r24	; 0x06
    293e:	8e 81       	ldd	r24, Y+6	; 0x06
    2940:	9f 81       	ldd	r25, Y+7	; 0x07
    2942:	9b 83       	std	Y+3, r25	; 0x03
    2944:	8a 83       	std	Y+2, r24	; 0x02
    2946:	8a 81       	ldd	r24, Y+2	; 0x02
    2948:	9b 81       	ldd	r25, Y+3	; 0x03
    294a:	01 97       	sbiw	r24, 0x01	; 1
    294c:	f1 f7       	brne	.-4      	; 0x294a <main+0x19a>
    294e:	9b 83       	std	Y+3, r25	; 0x03
    2950:	8a 83       	std	Y+2, r24	; 0x02
    2952:	0f c0       	rjmp	.+30     	; 0x2972 <main+0x1c2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2954:	69 89       	ldd	r22, Y+17	; 0x11
    2956:	7a 89       	ldd	r23, Y+18	; 0x12
    2958:	8b 89       	ldd	r24, Y+19	; 0x13
    295a:	9c 89       	ldd	r25, Y+20	; 0x14
    295c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2960:	dc 01       	movw	r26, r24
    2962:	cb 01       	movw	r24, r22
    2964:	88 8b       	std	Y+16, r24	; 0x10
    2966:	88 89       	ldd	r24, Y+16	; 0x10
    2968:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    296a:	89 81       	ldd	r24, Y+1	; 0x01
    296c:	8a 95       	dec	r24
    296e:	f1 f7       	brne	.-4      	; 0x296c <main+0x1bc>
    2970:	89 83       	std	Y+1, r24	; 0x01

		_delay_us(10);
		ADC_enuReadHighValue(&ADC_Read);
    2972:	ce 01       	movw	r24, r28
    2974:	49 96       	adiw	r24, 0x19	; 25
    2976:	0e 94 0d 12 	call	0x241a	; 0x241a <ADC_enuReadHighValue>

		//ADC_enuRead(&ADC_Read );
		DIO_enuSetPortValue(DIO_PORTD ,ADC_Read );
    297a:	99 8d       	ldd	r25, Y+25	; 0x19
    297c:	83 e0       	ldi	r24, 0x03	; 3
    297e:	69 2f       	mov	r22, r25
    2980:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DIO_enuSetPortValue>
    2984:	34 cf       	rjmp	.-408    	; 0x27ee <main+0x3e>

00002986 <__prologue_saves__>:
    2986:	2f 92       	push	r2
    2988:	3f 92       	push	r3
    298a:	4f 92       	push	r4
    298c:	5f 92       	push	r5
    298e:	6f 92       	push	r6
    2990:	7f 92       	push	r7
    2992:	8f 92       	push	r8
    2994:	9f 92       	push	r9
    2996:	af 92       	push	r10
    2998:	bf 92       	push	r11
    299a:	cf 92       	push	r12
    299c:	df 92       	push	r13
    299e:	ef 92       	push	r14
    29a0:	ff 92       	push	r15
    29a2:	0f 93       	push	r16
    29a4:	1f 93       	push	r17
    29a6:	cf 93       	push	r28
    29a8:	df 93       	push	r29
    29aa:	cd b7       	in	r28, 0x3d	; 61
    29ac:	de b7       	in	r29, 0x3e	; 62
    29ae:	ca 1b       	sub	r28, r26
    29b0:	db 0b       	sbc	r29, r27
    29b2:	0f b6       	in	r0, 0x3f	; 63
    29b4:	f8 94       	cli
    29b6:	de bf       	out	0x3e, r29	; 62
    29b8:	0f be       	out	0x3f, r0	; 63
    29ba:	cd bf       	out	0x3d, r28	; 61
    29bc:	09 94       	ijmp

000029be <__epilogue_restores__>:
    29be:	2a 88       	ldd	r2, Y+18	; 0x12
    29c0:	39 88       	ldd	r3, Y+17	; 0x11
    29c2:	48 88       	ldd	r4, Y+16	; 0x10
    29c4:	5f 84       	ldd	r5, Y+15	; 0x0f
    29c6:	6e 84       	ldd	r6, Y+14	; 0x0e
    29c8:	7d 84       	ldd	r7, Y+13	; 0x0d
    29ca:	8c 84       	ldd	r8, Y+12	; 0x0c
    29cc:	9b 84       	ldd	r9, Y+11	; 0x0b
    29ce:	aa 84       	ldd	r10, Y+10	; 0x0a
    29d0:	b9 84       	ldd	r11, Y+9	; 0x09
    29d2:	c8 84       	ldd	r12, Y+8	; 0x08
    29d4:	df 80       	ldd	r13, Y+7	; 0x07
    29d6:	ee 80       	ldd	r14, Y+6	; 0x06
    29d8:	fd 80       	ldd	r15, Y+5	; 0x05
    29da:	0c 81       	ldd	r16, Y+4	; 0x04
    29dc:	1b 81       	ldd	r17, Y+3	; 0x03
    29de:	aa 81       	ldd	r26, Y+2	; 0x02
    29e0:	b9 81       	ldd	r27, Y+1	; 0x01
    29e2:	ce 0f       	add	r28, r30
    29e4:	d1 1d       	adc	r29, r1
    29e6:	0f b6       	in	r0, 0x3f	; 63
    29e8:	f8 94       	cli
    29ea:	de bf       	out	0x3e, r29	; 62
    29ec:	0f be       	out	0x3f, r0	; 63
    29ee:	cd bf       	out	0x3d, r28	; 61
    29f0:	ed 01       	movw	r28, r26
    29f2:	08 95       	ret

000029f4 <_exit>:
    29f4:	f8 94       	cli

000029f6 <__stop_program>:
    29f6:	ff cf       	rjmp	.-2      	; 0x29f6 <__stop_program>
