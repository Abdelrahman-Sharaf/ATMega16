
EXTI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001698  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00001698  0000172c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  0080006a  0080006a  00001736  2**0
                  ALLOC
  3 .stab         00002064  00000000  00000000  00001738  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fe9  00000000  00000000  0000379c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 75 0a 	jmp	0x14ea	; 0x14ea <__vector_1>
       8:	0c 94 ac 0a 	jmp	0x1558	; 0x1558 <__vector_2>
       c:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e9       	ldi	r30, 0x98	; 152
      68:	f6 e1       	ldi	r31, 0x16	; 22
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 37       	cpi	r26, 0x76	; 118
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1a 0b 	call	0x1634	; 0x1634 <main>
      8a:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_enuSetPortDirection>:
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	00 d0       	rcall	.+0      	; 0x98 <DIO_enuSetPortDirection+0x6>
      98:	00 d0       	rcall	.+0      	; 0x9a <DIO_enuSetPortDirection+0x8>
      9a:	0f 92       	push	r0
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	8a 83       	std	Y+2, r24	; 0x02
      a2:	6b 83       	std	Y+3, r22	; 0x03
      a4:	19 82       	std	Y+1, r1	; 0x01
      a6:	8a 81       	ldd	r24, Y+2	; 0x02
      a8:	84 30       	cpi	r24, 0x04	; 4
      aa:	a8 f5       	brcc	.+106    	; 0x116 <DIO_enuSetPortDirection+0x84>
      ac:	8a 81       	ldd	r24, Y+2	; 0x02
      ae:	28 2f       	mov	r18, r24
      b0:	30 e0       	ldi	r19, 0x00	; 0
      b2:	3d 83       	std	Y+5, r19	; 0x05
      b4:	2c 83       	std	Y+4, r18	; 0x04
      b6:	8c 81       	ldd	r24, Y+4	; 0x04
      b8:	9d 81       	ldd	r25, Y+5	; 0x05
      ba:	81 30       	cpi	r24, 0x01	; 1
      bc:	91 05       	cpc	r25, r1
      be:	d1 f0       	breq	.+52     	; 0xf4 <DIO_enuSetPortDirection+0x62>
      c0:	2c 81       	ldd	r18, Y+4	; 0x04
      c2:	3d 81       	ldd	r19, Y+5	; 0x05
      c4:	22 30       	cpi	r18, 0x02	; 2
      c6:	31 05       	cpc	r19, r1
      c8:	2c f4       	brge	.+10     	; 0xd4 <DIO_enuSetPortDirection+0x42>
      ca:	8c 81       	ldd	r24, Y+4	; 0x04
      cc:	9d 81       	ldd	r25, Y+5	; 0x05
      ce:	00 97       	sbiw	r24, 0x00	; 0
      d0:	61 f0       	breq	.+24     	; 0xea <DIO_enuSetPortDirection+0x58>
      d2:	1e c0       	rjmp	.+60     	; 0x110 <DIO_enuSetPortDirection+0x7e>
      d4:	2c 81       	ldd	r18, Y+4	; 0x04
      d6:	3d 81       	ldd	r19, Y+5	; 0x05
      d8:	22 30       	cpi	r18, 0x02	; 2
      da:	31 05       	cpc	r19, r1
      dc:	81 f0       	breq	.+32     	; 0xfe <DIO_enuSetPortDirection+0x6c>
      de:	8c 81       	ldd	r24, Y+4	; 0x04
      e0:	9d 81       	ldd	r25, Y+5	; 0x05
      e2:	83 30       	cpi	r24, 0x03	; 3
      e4:	91 05       	cpc	r25, r1
      e6:	81 f0       	breq	.+32     	; 0x108 <DIO_enuSetPortDirection+0x76>
      e8:	13 c0       	rjmp	.+38     	; 0x110 <DIO_enuSetPortDirection+0x7e>
      ea:	ea e3       	ldi	r30, 0x3A	; 58
      ec:	f0 e0       	ldi	r31, 0x00	; 0
      ee:	8b 81       	ldd	r24, Y+3	; 0x03
      f0:	80 83       	st	Z, r24
      f2:	0e c0       	rjmp	.+28     	; 0x110 <DIO_enuSetPortDirection+0x7e>
      f4:	e7 e3       	ldi	r30, 0x37	; 55
      f6:	f0 e0       	ldi	r31, 0x00	; 0
      f8:	8b 81       	ldd	r24, Y+3	; 0x03
      fa:	80 83       	st	Z, r24
      fc:	09 c0       	rjmp	.+18     	; 0x110 <DIO_enuSetPortDirection+0x7e>
      fe:	e4 e3       	ldi	r30, 0x34	; 52
     100:	f0 e0       	ldi	r31, 0x00	; 0
     102:	8b 81       	ldd	r24, Y+3	; 0x03
     104:	80 83       	st	Z, r24
     106:	04 c0       	rjmp	.+8      	; 0x110 <DIO_enuSetPortDirection+0x7e>
     108:	e1 e3       	ldi	r30, 0x31	; 49
     10a:	f0 e0       	ldi	r31, 0x00	; 0
     10c:	8b 81       	ldd	r24, Y+3	; 0x03
     10e:	80 83       	st	Z, r24
     110:	81 e0       	ldi	r24, 0x01	; 1
     112:	89 83       	std	Y+1, r24	; 0x01
     114:	02 c0       	rjmp	.+4      	; 0x11a <DIO_enuSetPortDirection+0x88>
     116:	83 e0       	ldi	r24, 0x03	; 3
     118:	89 83       	std	Y+1, r24	; 0x01
     11a:	89 81       	ldd	r24, Y+1	; 0x01
     11c:	0f 90       	pop	r0
     11e:	0f 90       	pop	r0
     120:	0f 90       	pop	r0
     122:	0f 90       	pop	r0
     124:	0f 90       	pop	r0
     126:	cf 91       	pop	r28
     128:	df 91       	pop	r29
     12a:	08 95       	ret

0000012c <DIO_enuSetPortValue>:
/*                 : Arg.2: Copy_u8Val:                                     */
/*                                        DIO_INPTU_PIN  ,  DIO_OUTPUT_PIN  */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuSetPortValue(u8 Copy_u8PortID, u8 Copy_u8Val)
{
     12c:	df 93       	push	r29
     12e:	cf 93       	push	r28
     130:	00 d0       	rcall	.+0      	; 0x132 <DIO_enuSetPortValue+0x6>
     132:	00 d0       	rcall	.+0      	; 0x134 <DIO_enuSetPortValue+0x8>
     134:	0f 92       	push	r0
     136:	cd b7       	in	r28, 0x3d	; 61
     138:	de b7       	in	r29, 0x3e	; 62
     13a:	8a 83       	std	Y+2, r24	; 0x02
     13c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuerrorState = ES_NOK ;
     13e:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_u8PortID <= DIO_PORTD )
     140:	8a 81       	ldd	r24, Y+2	; 0x02
     142:	84 30       	cpi	r24, 0x04	; 4
     144:	a8 f5       	brcc	.+106    	; 0x1b0 <DIO_enuSetPortValue+0x84>
	{
		switch( Copy_u8PortID )
     146:	8a 81       	ldd	r24, Y+2	; 0x02
     148:	28 2f       	mov	r18, r24
     14a:	30 e0       	ldi	r19, 0x00	; 0
     14c:	3d 83       	std	Y+5, r19	; 0x05
     14e:	2c 83       	std	Y+4, r18	; 0x04
     150:	8c 81       	ldd	r24, Y+4	; 0x04
     152:	9d 81       	ldd	r25, Y+5	; 0x05
     154:	81 30       	cpi	r24, 0x01	; 1
     156:	91 05       	cpc	r25, r1
     158:	d1 f0       	breq	.+52     	; 0x18e <DIO_enuSetPortValue+0x62>
     15a:	2c 81       	ldd	r18, Y+4	; 0x04
     15c:	3d 81       	ldd	r19, Y+5	; 0x05
     15e:	22 30       	cpi	r18, 0x02	; 2
     160:	31 05       	cpc	r19, r1
     162:	2c f4       	brge	.+10     	; 0x16e <DIO_enuSetPortValue+0x42>
     164:	8c 81       	ldd	r24, Y+4	; 0x04
     166:	9d 81       	ldd	r25, Y+5	; 0x05
     168:	00 97       	sbiw	r24, 0x00	; 0
     16a:	61 f0       	breq	.+24     	; 0x184 <DIO_enuSetPortValue+0x58>
     16c:	1e c0       	rjmp	.+60     	; 0x1aa <DIO_enuSetPortValue+0x7e>
     16e:	2c 81       	ldd	r18, Y+4	; 0x04
     170:	3d 81       	ldd	r19, Y+5	; 0x05
     172:	22 30       	cpi	r18, 0x02	; 2
     174:	31 05       	cpc	r19, r1
     176:	81 f0       	breq	.+32     	; 0x198 <DIO_enuSetPortValue+0x6c>
     178:	8c 81       	ldd	r24, Y+4	; 0x04
     17a:	9d 81       	ldd	r25, Y+5	; 0x05
     17c:	83 30       	cpi	r24, 0x03	; 3
     17e:	91 05       	cpc	r25, r1
     180:	81 f0       	breq	.+32     	; 0x1a2 <DIO_enuSetPortValue+0x76>
     182:	13 c0       	rjmp	.+38     	; 0x1aa <DIO_enuSetPortValue+0x7e>
		{
		case DIO_PORTA :
			PORTA = Copy_u8Val;
     184:	eb e3       	ldi	r30, 0x3B	; 59
     186:	f0 e0       	ldi	r31, 0x00	; 0
     188:	8b 81       	ldd	r24, Y+3	; 0x03
     18a:	80 83       	st	Z, r24
     18c:	0e c0       	rjmp	.+28     	; 0x1aa <DIO_enuSetPortValue+0x7e>
			break;

		case DIO_PORTB :
			PORTB = Copy_u8Val;
     18e:	e8 e3       	ldi	r30, 0x38	; 56
     190:	f0 e0       	ldi	r31, 0x00	; 0
     192:	8b 81       	ldd	r24, Y+3	; 0x03
     194:	80 83       	st	Z, r24
     196:	09 c0       	rjmp	.+18     	; 0x1aa <DIO_enuSetPortValue+0x7e>
			break;

		case DIO_PORTC :
			PORTC = Copy_u8Val;
     198:	e5 e3       	ldi	r30, 0x35	; 53
     19a:	f0 e0       	ldi	r31, 0x00	; 0
     19c:	8b 81       	ldd	r24, Y+3	; 0x03
     19e:	80 83       	st	Z, r24
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <DIO_enuSetPortValue+0x7e>
			break;

		case DIO_PORTD :
			PORTD = Copy_u8Val;
     1a2:	e2 e3       	ldi	r30, 0x32	; 50
     1a4:	f0 e0       	ldi	r31, 0x00	; 0
     1a6:	8b 81       	ldd	r24, Y+3	; 0x03
     1a8:	80 83       	st	Z, r24
			break;
		}

		Local_enuerrorState = ES_OK;
     1aa:	81 e0       	ldi	r24, 0x01	; 1
     1ac:	89 83       	std	Y+1, r24	; 0x01
     1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_enuSetPortValue+0x88>

	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
     1b0:	83 e0       	ldi	r24, 0x03	; 3
     1b2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuerrorState  ;
     1b4:	89 81       	ldd	r24, Y+1	; 0x01
}//End of DIO_enuSetPortValue().
     1b6:	0f 90       	pop	r0
     1b8:	0f 90       	pop	r0
     1ba:	0f 90       	pop	r0
     1bc:	0f 90       	pop	r0
     1be:	0f 90       	pop	r0
     1c0:	cf 91       	pop	r28
     1c2:	df 91       	pop	r29
     1c4:	08 95       	ret

000001c6 <DIO_enuToggelPort>:
/*                                        DIO_PORTA      ,   DIO_PORTA      */
/*                                        DIO_PORTA      ,   DIO_PORTA      */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuToggelPort(u8  Copy_u8PortID )
{
     1c6:	df 93       	push	r29
     1c8:	cf 93       	push	r28
     1ca:	00 d0       	rcall	.+0      	; 0x1cc <DIO_enuToggelPort+0x6>
     1cc:	00 d0       	rcall	.+0      	; 0x1ce <DIO_enuToggelPort+0x8>
     1ce:	cd b7       	in	r28, 0x3d	; 61
     1d0:	de b7       	in	r29, 0x3e	; 62
     1d2:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuerrorState = ES_NOK ;
     1d4:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_u8PortID <= DIO_PORTD )
     1d6:	8a 81       	ldd	r24, Y+2	; 0x02
     1d8:	84 30       	cpi	r24, 0x04	; 4
     1da:	08 f0       	brcs	.+2      	; 0x1de <DIO_enuToggelPort+0x18>
     1dc:	41 c0       	rjmp	.+130    	; 0x260 <DIO_enuToggelPort+0x9a>
	{
		switch( Copy_u8PortID )
     1de:	8a 81       	ldd	r24, Y+2	; 0x02
     1e0:	28 2f       	mov	r18, r24
     1e2:	30 e0       	ldi	r19, 0x00	; 0
     1e4:	3c 83       	std	Y+4, r19	; 0x04
     1e6:	2b 83       	std	Y+3, r18	; 0x03
     1e8:	8b 81       	ldd	r24, Y+3	; 0x03
     1ea:	9c 81       	ldd	r25, Y+4	; 0x04
     1ec:	81 30       	cpi	r24, 0x01	; 1
     1ee:	91 05       	cpc	r25, r1
     1f0:	e9 f0       	breq	.+58     	; 0x22c <DIO_enuToggelPort+0x66>
     1f2:	2b 81       	ldd	r18, Y+3	; 0x03
     1f4:	3c 81       	ldd	r19, Y+4	; 0x04
     1f6:	22 30       	cpi	r18, 0x02	; 2
     1f8:	31 05       	cpc	r19, r1
     1fa:	2c f4       	brge	.+10     	; 0x206 <DIO_enuToggelPort+0x40>
     1fc:	8b 81       	ldd	r24, Y+3	; 0x03
     1fe:	9c 81       	ldd	r25, Y+4	; 0x04
     200:	00 97       	sbiw	r24, 0x00	; 0
     202:	61 f0       	breq	.+24     	; 0x21c <DIO_enuToggelPort+0x56>
     204:	2a c0       	rjmp	.+84     	; 0x25a <DIO_enuToggelPort+0x94>
     206:	2b 81       	ldd	r18, Y+3	; 0x03
     208:	3c 81       	ldd	r19, Y+4	; 0x04
     20a:	22 30       	cpi	r18, 0x02	; 2
     20c:	31 05       	cpc	r19, r1
     20e:	b1 f0       	breq	.+44     	; 0x23c <DIO_enuToggelPort+0x76>
     210:	8b 81       	ldd	r24, Y+3	; 0x03
     212:	9c 81       	ldd	r25, Y+4	; 0x04
     214:	83 30       	cpi	r24, 0x03	; 3
     216:	91 05       	cpc	r25, r1
     218:	c9 f0       	breq	.+50     	; 0x24c <DIO_enuToggelPort+0x86>
     21a:	1f c0       	rjmp	.+62     	; 0x25a <DIO_enuToggelPort+0x94>
		{
		case DIO_PORTA :
			PORTA = ~PORTA;
     21c:	ab e3       	ldi	r26, 0x3B	; 59
     21e:	b0 e0       	ldi	r27, 0x00	; 0
     220:	eb e3       	ldi	r30, 0x3B	; 59
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	80 81       	ld	r24, Z
     226:	80 95       	com	r24
     228:	8c 93       	st	X, r24
     22a:	17 c0       	rjmp	.+46     	; 0x25a <DIO_enuToggelPort+0x94>
			break;

		case DIO_PORTB :
			PORTB = ~PORTB;
     22c:	a8 e3       	ldi	r26, 0x38	; 56
     22e:	b0 e0       	ldi	r27, 0x00	; 0
     230:	e8 e3       	ldi	r30, 0x38	; 56
     232:	f0 e0       	ldi	r31, 0x00	; 0
     234:	80 81       	ld	r24, Z
     236:	80 95       	com	r24
     238:	8c 93       	st	X, r24
     23a:	0f c0       	rjmp	.+30     	; 0x25a <DIO_enuToggelPort+0x94>
			break;

		case DIO_PORTC :
			PORTC = ~PORTC;
     23c:	a5 e3       	ldi	r26, 0x35	; 53
     23e:	b0 e0       	ldi	r27, 0x00	; 0
     240:	e5 e3       	ldi	r30, 0x35	; 53
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	80 81       	ld	r24, Z
     246:	80 95       	com	r24
     248:	8c 93       	st	X, r24
     24a:	07 c0       	rjmp	.+14     	; 0x25a <DIO_enuToggelPort+0x94>
			break;

		case DIO_PORTD :
			PORTD = ~PORTD ;
     24c:	a2 e3       	ldi	r26, 0x32	; 50
     24e:	b0 e0       	ldi	r27, 0x00	; 0
     250:	e2 e3       	ldi	r30, 0x32	; 50
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	80 81       	ld	r24, Z
     256:	80 95       	com	r24
     258:	8c 93       	st	X, r24
			break;
		}

		Local_enuerrorState = ES_OK;
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	89 83       	std	Y+1, r24	; 0x01
     25e:	02 c0       	rjmp	.+4      	; 0x264 <DIO_enuToggelPort+0x9e>

	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
     260:	83 e0       	ldi	r24, 0x03	; 3
     262:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuerrorState  ;
     264:	89 81       	ldd	r24, Y+1	; 0x01
}//End of DIO_enuToggelPort().
     266:	0f 90       	pop	r0
     268:	0f 90       	pop	r0
     26a:	0f 90       	pop	r0
     26c:	0f 90       	pop	r0
     26e:	cf 91       	pop	r28
     270:	df 91       	pop	r29
     272:	08 95       	ret

00000274 <DIO_enuGetPortVlaue>:
/*                                                                          */
/*                 : Arg.2: Address of u8 variable.                         */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuGetPortVlaue(u8 Copy_u8PortID, u8* Copy_pu8PortVal)
{
     274:	df 93       	push	r29
     276:	cf 93       	push	r28
     278:	00 d0       	rcall	.+0      	; 0x27a <DIO_enuGetPortVlaue+0x6>
     27a:	00 d0       	rcall	.+0      	; 0x27c <DIO_enuGetPortVlaue+0x8>
     27c:	00 d0       	rcall	.+0      	; 0x27e <DIO_enuGetPortVlaue+0xa>
     27e:	cd b7       	in	r28, 0x3d	; 61
     280:	de b7       	in	r29, 0x3e	; 62
     282:	8a 83       	std	Y+2, r24	; 0x02
     284:	7c 83       	std	Y+4, r23	; 0x04
     286:	6b 83       	std	Y+3, r22	; 0x03
	//Local Variable to
	ES_t Local_enuerrorState = ES_NOK ;
     288:	19 82       	std	Y+1, r1	; 0x01

	// Check to ensure that the passed address is not equal Null.
	if( Copy_pu8PortVal != NULL )
     28a:	8b 81       	ldd	r24, Y+3	; 0x03
     28c:	9c 81       	ldd	r25, Y+4	; 0x04
     28e:	00 97       	sbiw	r24, 0x00	; 0
     290:	09 f4       	brne	.+2      	; 0x294 <DIO_enuGetPortVlaue+0x20>
     292:	43 c0       	rjmp	.+134    	; 0x31a <DIO_enuGetPortVlaue+0xa6>
	{
		// Check to ensure that the passed PortID is in range.
		if( Copy_u8PortID <= DIO_PORTD )
     294:	8a 81       	ldd	r24, Y+2	; 0x02
     296:	84 30       	cpi	r24, 0x04	; 4
     298:	e8 f5       	brcc	.+122    	; 0x314 <DIO_enuGetPortVlaue+0xa0>
		{

			/**********************************************************
			 * Switching for the suitable case .
			 **********************************************************/
			switch( Copy_u8PortID )
     29a:	8a 81       	ldd	r24, Y+2	; 0x02
     29c:	28 2f       	mov	r18, r24
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	3e 83       	std	Y+6, r19	; 0x06
     2a2:	2d 83       	std	Y+5, r18	; 0x05
     2a4:	8d 81       	ldd	r24, Y+5	; 0x05
     2a6:	9e 81       	ldd	r25, Y+6	; 0x06
     2a8:	81 30       	cpi	r24, 0x01	; 1
     2aa:	91 05       	cpc	r25, r1
     2ac:	e1 f0       	breq	.+56     	; 0x2e6 <DIO_enuGetPortVlaue+0x72>
     2ae:	2d 81       	ldd	r18, Y+5	; 0x05
     2b0:	3e 81       	ldd	r19, Y+6	; 0x06
     2b2:	22 30       	cpi	r18, 0x02	; 2
     2b4:	31 05       	cpc	r19, r1
     2b6:	2c f4       	brge	.+10     	; 0x2c2 <DIO_enuGetPortVlaue+0x4e>
     2b8:	8d 81       	ldd	r24, Y+5	; 0x05
     2ba:	9e 81       	ldd	r25, Y+6	; 0x06
     2bc:	00 97       	sbiw	r24, 0x00	; 0
     2be:	61 f0       	breq	.+24     	; 0x2d8 <DIO_enuGetPortVlaue+0x64>
     2c0:	26 c0       	rjmp	.+76     	; 0x30e <DIO_enuGetPortVlaue+0x9a>
     2c2:	2d 81       	ldd	r18, Y+5	; 0x05
     2c4:	3e 81       	ldd	r19, Y+6	; 0x06
     2c6:	22 30       	cpi	r18, 0x02	; 2
     2c8:	31 05       	cpc	r19, r1
     2ca:	a1 f0       	breq	.+40     	; 0x2f4 <DIO_enuGetPortVlaue+0x80>
     2cc:	8d 81       	ldd	r24, Y+5	; 0x05
     2ce:	9e 81       	ldd	r25, Y+6	; 0x06
     2d0:	83 30       	cpi	r24, 0x03	; 3
     2d2:	91 05       	cpc	r25, r1
     2d4:	b1 f0       	breq	.+44     	; 0x302 <DIO_enuGetPortVlaue+0x8e>
     2d6:	1b c0       	rjmp	.+54     	; 0x30e <DIO_enuGetPortVlaue+0x9a>
			{
			case DIO_PORTA :
				*Copy_pu8PortVal = PINA;
     2d8:	e9 e3       	ldi	r30, 0x39	; 57
     2da:	f0 e0       	ldi	r31, 0x00	; 0
     2dc:	80 81       	ld	r24, Z
     2de:	eb 81       	ldd	r30, Y+3	; 0x03
     2e0:	fc 81       	ldd	r31, Y+4	; 0x04
     2e2:	80 83       	st	Z, r24
     2e4:	14 c0       	rjmp	.+40     	; 0x30e <DIO_enuGetPortVlaue+0x9a>
				break;

			case DIO_PORTB :
				*Copy_pu8PortVal = PINB;
     2e6:	e6 e3       	ldi	r30, 0x36	; 54
     2e8:	f0 e0       	ldi	r31, 0x00	; 0
     2ea:	80 81       	ld	r24, Z
     2ec:	eb 81       	ldd	r30, Y+3	; 0x03
     2ee:	fc 81       	ldd	r31, Y+4	; 0x04
     2f0:	80 83       	st	Z, r24
     2f2:	0d c0       	rjmp	.+26     	; 0x30e <DIO_enuGetPortVlaue+0x9a>
				break;

			case DIO_PORTC :
				*Copy_pu8PortVal = PINC;
     2f4:	e3 e3       	ldi	r30, 0x33	; 51
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	80 81       	ld	r24, Z
     2fa:	eb 81       	ldd	r30, Y+3	; 0x03
     2fc:	fc 81       	ldd	r31, Y+4	; 0x04
     2fe:	80 83       	st	Z, r24
     300:	06 c0       	rjmp	.+12     	; 0x30e <DIO_enuGetPortVlaue+0x9a>
				break;

			case DIO_PORTD :
				*Copy_pu8PortVal = PIND ;
     302:	e0 e3       	ldi	r30, 0x30	; 48
     304:	f0 e0       	ldi	r31, 0x00	; 0
     306:	80 81       	ld	r24, Z
     308:	eb 81       	ldd	r30, Y+3	; 0x03
     30a:	fc 81       	ldd	r31, Y+4	; 0x04
     30c:	80 83       	st	Z, r24
				break;
			}

			Local_enuerrorState = ES_OK;
     30e:	81 e0       	ldi	r24, 0x01	; 1
     310:	89 83       	std	Y+1, r24	; 0x01
     312:	05 c0       	rjmp	.+10     	; 0x31e <DIO_enuGetPortVlaue+0xaa>
		else
		{
			/**********************************************************
			 * Handle Out Of Range case.
			 **********************************************************/
			Local_enuerrorState = ES_OUT_OF_RANGE;
     314:	83 e0       	ldi	r24, 0x03	; 3
     316:	89 83       	std	Y+1, r24	; 0x01
     318:	02 c0       	rjmp	.+4      	; 0x31e <DIO_enuGetPortVlaue+0xaa>
	else
	{
		/**********************************************************
		 * Handle null pointer case.
		 **********************************************************/
		Local_enuerrorState = ES_NULL_POINTER;
     31a:	82 e0       	ldi	r24, 0x02	; 2
     31c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuerrorState  ;
     31e:	89 81       	ldd	r24, Y+1	; 0x01

}//End of DIO_enuGetPortVlaue().
     320:	26 96       	adiw	r28, 0x06	; 6
     322:	0f b6       	in	r0, 0x3f	; 63
     324:	f8 94       	cli
     326:	de bf       	out	0x3e, r29	; 62
     328:	0f be       	out	0x3f, r0	; 63
     32a:	cd bf       	out	0x3d, r28	; 61
     32c:	cf 91       	pop	r28
     32e:	df 91       	pop	r29
     330:	08 95       	ret

00000332 <DIO_enuSetPinDirection>:
/*                 : Arg.3: Copy_u8Dir.                                     */
/*                                       DIO_INPTU_PIN   ,   DIO_OUTPUT_PIN */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID, u8 Copy_u8PinID , u8 Copy_u8Dir)
{
     332:	df 93       	push	r29
     334:	cf 93       	push	r28
     336:	00 d0       	rcall	.+0      	; 0x338 <DIO_enuSetPinDirection+0x6>
     338:	00 d0       	rcall	.+0      	; 0x33a <DIO_enuSetPinDirection+0x8>
     33a:	00 d0       	rcall	.+0      	; 0x33c <DIO_enuSetPinDirection+0xa>
     33c:	cd b7       	in	r28, 0x3d	; 61
     33e:	de b7       	in	r29, 0x3e	; 62
     340:	8a 83       	std	Y+2, r24	; 0x02
     342:	6b 83       	std	Y+3, r22	; 0x03
     344:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuerrorState = ES_NOK ;
     346:	19 82       	std	Y+1, r1	; 0x01

	if( (Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <= DIO_PIN7) &&( Copy_u8Dir<= OUTPUT_PIN))
     348:	8a 81       	ldd	r24, Y+2	; 0x02
     34a:	84 30       	cpi	r24, 0x04	; 4
     34c:	08 f0       	brcs	.+2      	; 0x350 <DIO_enuSetPinDirection+0x1e>
     34e:	dc c0       	rjmp	.+440    	; 0x508 <__stack+0xa9>
     350:	8b 81       	ldd	r24, Y+3	; 0x03
     352:	88 30       	cpi	r24, 0x08	; 8
     354:	08 f0       	brcs	.+2      	; 0x358 <DIO_enuSetPinDirection+0x26>
     356:	d8 c0       	rjmp	.+432    	; 0x508 <__stack+0xa9>
     358:	8c 81       	ldd	r24, Y+4	; 0x04
     35a:	82 30       	cpi	r24, 0x02	; 2
     35c:	08 f0       	brcs	.+2      	; 0x360 <DIO_enuSetPinDirection+0x2e>
     35e:	d4 c0       	rjmp	.+424    	; 0x508 <__stack+0xa9>
	{

		/**********************************************************
		 * Switching for the suitable case .
		 **********************************************************/
		switch( Copy_u8PortID )
     360:	8a 81       	ldd	r24, Y+2	; 0x02
     362:	28 2f       	mov	r18, r24
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	3e 83       	std	Y+6, r19	; 0x06
     368:	2d 83       	std	Y+5, r18	; 0x05
     36a:	8d 81       	ldd	r24, Y+5	; 0x05
     36c:	9e 81       	ldd	r25, Y+6	; 0x06
     36e:	81 30       	cpi	r24, 0x01	; 1
     370:	91 05       	cpc	r25, r1
     372:	09 f4       	brne	.+2      	; 0x376 <DIO_enuSetPinDirection+0x44>
     374:	43 c0       	rjmp	.+134    	; 0x3fc <DIO_enuSetPinDirection+0xca>
     376:	2d 81       	ldd	r18, Y+5	; 0x05
     378:	3e 81       	ldd	r19, Y+6	; 0x06
     37a:	22 30       	cpi	r18, 0x02	; 2
     37c:	31 05       	cpc	r19, r1
     37e:	2c f4       	brge	.+10     	; 0x38a <DIO_enuSetPinDirection+0x58>
     380:	8d 81       	ldd	r24, Y+5	; 0x05
     382:	9e 81       	ldd	r25, Y+6	; 0x06
     384:	00 97       	sbiw	r24, 0x00	; 0
     386:	71 f0       	breq	.+28     	; 0x3a4 <DIO_enuSetPinDirection+0x72>
     388:	bc c0       	rjmp	.+376    	; 0x502 <__stack+0xa3>
     38a:	2d 81       	ldd	r18, Y+5	; 0x05
     38c:	3e 81       	ldd	r19, Y+6	; 0x06
     38e:	22 30       	cpi	r18, 0x02	; 2
     390:	31 05       	cpc	r19, r1
     392:	09 f4       	brne	.+2      	; 0x396 <DIO_enuSetPinDirection+0x64>
     394:	5f c0       	rjmp	.+190    	; 0x454 <DIO_enuSetPinDirection+0x122>
     396:	8d 81       	ldd	r24, Y+5	; 0x05
     398:	9e 81       	ldd	r25, Y+6	; 0x06
     39a:	83 30       	cpi	r24, 0x03	; 3
     39c:	91 05       	cpc	r25, r1
     39e:	09 f4       	brne	.+2      	; 0x3a2 <DIO_enuSetPinDirection+0x70>
     3a0:	85 c0       	rjmp	.+266    	; 0x4ac <__stack+0x4d>
     3a2:	af c0       	rjmp	.+350    	; 0x502 <__stack+0xa3>
		{
		case DIO_PORTA :
			if( Copy_u8Dir == INPTU_PIN)
     3a4:	8c 81       	ldd	r24, Y+4	; 0x04
     3a6:	88 23       	and	r24, r24
     3a8:	a9 f4       	brne	.+42     	; 0x3d4 <DIO_enuSetPinDirection+0xa2>
			{
				DDRA &=~(DIO_MASK_BIT<<Copy_u8PinID);
     3aa:	aa e3       	ldi	r26, 0x3A	; 58
     3ac:	b0 e0       	ldi	r27, 0x00	; 0
     3ae:	ea e3       	ldi	r30, 0x3A	; 58
     3b0:	f0 e0       	ldi	r31, 0x00	; 0
     3b2:	80 81       	ld	r24, Z
     3b4:	48 2f       	mov	r20, r24
     3b6:	8b 81       	ldd	r24, Y+3	; 0x03
     3b8:	28 2f       	mov	r18, r24
     3ba:	30 e0       	ldi	r19, 0x00	; 0
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	02 2e       	mov	r0, r18
     3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <DIO_enuSetPinDirection+0x96>
     3c4:	88 0f       	add	r24, r24
     3c6:	99 1f       	adc	r25, r25
     3c8:	0a 94       	dec	r0
     3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <DIO_enuSetPinDirection+0x92>
     3cc:	80 95       	com	r24
     3ce:	84 23       	and	r24, r20
     3d0:	8c 93       	st	X, r24
     3d2:	97 c0       	rjmp	.+302    	; 0x502 <__stack+0xa3>
			}
			else
			{
				DDRA |=(DIO_MASK_BIT<<Copy_u8PinID);
     3d4:	aa e3       	ldi	r26, 0x3A	; 58
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	ea e3       	ldi	r30, 0x3A	; 58
     3da:	f0 e0       	ldi	r31, 0x00	; 0
     3dc:	80 81       	ld	r24, Z
     3de:	48 2f       	mov	r20, r24
     3e0:	8b 81       	ldd	r24, Y+3	; 0x03
     3e2:	28 2f       	mov	r18, r24
     3e4:	30 e0       	ldi	r19, 0x00	; 0
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	02 2e       	mov	r0, r18
     3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <DIO_enuSetPinDirection+0xc0>
     3ee:	88 0f       	add	r24, r24
     3f0:	99 1f       	adc	r25, r25
     3f2:	0a 94       	dec	r0
     3f4:	e2 f7       	brpl	.-8      	; 0x3ee <DIO_enuSetPinDirection+0xbc>
     3f6:	84 2b       	or	r24, r20
     3f8:	8c 93       	st	X, r24
     3fa:	83 c0       	rjmp	.+262    	; 0x502 <__stack+0xa3>
			}

			break;

		case DIO_PORTB :
			if( Copy_u8Dir == INPTU_PIN)
     3fc:	8c 81       	ldd	r24, Y+4	; 0x04
     3fe:	88 23       	and	r24, r24
     400:	a9 f4       	brne	.+42     	; 0x42c <DIO_enuSetPinDirection+0xfa>
			{
				DDRB &=~(DIO_MASK_BIT<<Copy_u8PinID);
     402:	a7 e3       	ldi	r26, 0x37	; 55
     404:	b0 e0       	ldi	r27, 0x00	; 0
     406:	e7 e3       	ldi	r30, 0x37	; 55
     408:	f0 e0       	ldi	r31, 0x00	; 0
     40a:	80 81       	ld	r24, Z
     40c:	48 2f       	mov	r20, r24
     40e:	8b 81       	ldd	r24, Y+3	; 0x03
     410:	28 2f       	mov	r18, r24
     412:	30 e0       	ldi	r19, 0x00	; 0
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	02 2e       	mov	r0, r18
     41a:	02 c0       	rjmp	.+4      	; 0x420 <DIO_enuSetPinDirection+0xee>
     41c:	88 0f       	add	r24, r24
     41e:	99 1f       	adc	r25, r25
     420:	0a 94       	dec	r0
     422:	e2 f7       	brpl	.-8      	; 0x41c <DIO_enuSetPinDirection+0xea>
     424:	80 95       	com	r24
     426:	84 23       	and	r24, r20
     428:	8c 93       	st	X, r24
     42a:	6b c0       	rjmp	.+214    	; 0x502 <__stack+0xa3>
			}
			else
			{
				DDRB |=(DIO_MASK_BIT<<Copy_u8PinID);
     42c:	a7 e3       	ldi	r26, 0x37	; 55
     42e:	b0 e0       	ldi	r27, 0x00	; 0
     430:	e7 e3       	ldi	r30, 0x37	; 55
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	80 81       	ld	r24, Z
     436:	48 2f       	mov	r20, r24
     438:	8b 81       	ldd	r24, Y+3	; 0x03
     43a:	28 2f       	mov	r18, r24
     43c:	30 e0       	ldi	r19, 0x00	; 0
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	02 2e       	mov	r0, r18
     444:	02 c0       	rjmp	.+4      	; 0x44a <DIO_enuSetPinDirection+0x118>
     446:	88 0f       	add	r24, r24
     448:	99 1f       	adc	r25, r25
     44a:	0a 94       	dec	r0
     44c:	e2 f7       	brpl	.-8      	; 0x446 <DIO_enuSetPinDirection+0x114>
     44e:	84 2b       	or	r24, r20
     450:	8c 93       	st	X, r24
     452:	57 c0       	rjmp	.+174    	; 0x502 <__stack+0xa3>
			}
			break;

		case DIO_PORTC :

			if( Copy_u8Dir == INPTU_PIN)
     454:	8c 81       	ldd	r24, Y+4	; 0x04
     456:	88 23       	and	r24, r24
     458:	a9 f4       	brne	.+42     	; 0x484 <__stack+0x25>
			{
				DDRC &=~(DIO_MASK_BIT<<Copy_u8PinID);
     45a:	a4 e3       	ldi	r26, 0x34	; 52
     45c:	b0 e0       	ldi	r27, 0x00	; 0
     45e:	e4 e3       	ldi	r30, 0x34	; 52
     460:	f0 e0       	ldi	r31, 0x00	; 0
     462:	80 81       	ld	r24, Z
     464:	48 2f       	mov	r20, r24
     466:	8b 81       	ldd	r24, Y+3	; 0x03
     468:	28 2f       	mov	r18, r24
     46a:	30 e0       	ldi	r19, 0x00	; 0
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	02 2e       	mov	r0, r18
     472:	02 c0       	rjmp	.+4      	; 0x478 <__stack+0x19>
     474:	88 0f       	add	r24, r24
     476:	99 1f       	adc	r25, r25
     478:	0a 94       	dec	r0
     47a:	e2 f7       	brpl	.-8      	; 0x474 <__stack+0x15>
     47c:	80 95       	com	r24
     47e:	84 23       	and	r24, r20
     480:	8c 93       	st	X, r24
     482:	3f c0       	rjmp	.+126    	; 0x502 <__stack+0xa3>
			}
			else
			{
				DDRC |=(DIO_MASK_BIT<<Copy_u8PinID);
     484:	a4 e3       	ldi	r26, 0x34	; 52
     486:	b0 e0       	ldi	r27, 0x00	; 0
     488:	e4 e3       	ldi	r30, 0x34	; 52
     48a:	f0 e0       	ldi	r31, 0x00	; 0
     48c:	80 81       	ld	r24, Z
     48e:	48 2f       	mov	r20, r24
     490:	8b 81       	ldd	r24, Y+3	; 0x03
     492:	28 2f       	mov	r18, r24
     494:	30 e0       	ldi	r19, 0x00	; 0
     496:	81 e0       	ldi	r24, 0x01	; 1
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	02 2e       	mov	r0, r18
     49c:	02 c0       	rjmp	.+4      	; 0x4a2 <__stack+0x43>
     49e:	88 0f       	add	r24, r24
     4a0:	99 1f       	adc	r25, r25
     4a2:	0a 94       	dec	r0
     4a4:	e2 f7       	brpl	.-8      	; 0x49e <__stack+0x3f>
     4a6:	84 2b       	or	r24, r20
     4a8:	8c 93       	st	X, r24
     4aa:	2b c0       	rjmp	.+86     	; 0x502 <__stack+0xa3>
			}
			break;

		case DIO_PORTD :
			if( Copy_u8Dir == INPTU_PIN)
     4ac:	8c 81       	ldd	r24, Y+4	; 0x04
     4ae:	88 23       	and	r24, r24
     4b0:	a9 f4       	brne	.+42     	; 0x4dc <__stack+0x7d>
			{
				DDRD &=~(DIO_MASK_BIT<<Copy_u8PinID);
     4b2:	a1 e3       	ldi	r26, 0x31	; 49
     4b4:	b0 e0       	ldi	r27, 0x00	; 0
     4b6:	e1 e3       	ldi	r30, 0x31	; 49
     4b8:	f0 e0       	ldi	r31, 0x00	; 0
     4ba:	80 81       	ld	r24, Z
     4bc:	48 2f       	mov	r20, r24
     4be:	8b 81       	ldd	r24, Y+3	; 0x03
     4c0:	28 2f       	mov	r18, r24
     4c2:	30 e0       	ldi	r19, 0x00	; 0
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	02 2e       	mov	r0, r18
     4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <__stack+0x71>
     4cc:	88 0f       	add	r24, r24
     4ce:	99 1f       	adc	r25, r25
     4d0:	0a 94       	dec	r0
     4d2:	e2 f7       	brpl	.-8      	; 0x4cc <__stack+0x6d>
     4d4:	80 95       	com	r24
     4d6:	84 23       	and	r24, r20
     4d8:	8c 93       	st	X, r24
     4da:	13 c0       	rjmp	.+38     	; 0x502 <__stack+0xa3>
			}
			else
			{
				DDRD |=(DIO_MASK_BIT<<Copy_u8PinID);
     4dc:	a1 e3       	ldi	r26, 0x31	; 49
     4de:	b0 e0       	ldi	r27, 0x00	; 0
     4e0:	e1 e3       	ldi	r30, 0x31	; 49
     4e2:	f0 e0       	ldi	r31, 0x00	; 0
     4e4:	80 81       	ld	r24, Z
     4e6:	48 2f       	mov	r20, r24
     4e8:	8b 81       	ldd	r24, Y+3	; 0x03
     4ea:	28 2f       	mov	r18, r24
     4ec:	30 e0       	ldi	r19, 0x00	; 0
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	02 2e       	mov	r0, r18
     4f4:	02 c0       	rjmp	.+4      	; 0x4fa <__stack+0x9b>
     4f6:	88 0f       	add	r24, r24
     4f8:	99 1f       	adc	r25, r25
     4fa:	0a 94       	dec	r0
     4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <__stack+0x97>
     4fe:	84 2b       	or	r24, r20
     500:	8c 93       	st	X, r24
			}
			break;

		}
		Local_enuerrorState = ES_OK;
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	89 83       	std	Y+1, r24	; 0x01
     506:	02 c0       	rjmp	.+4      	; 0x50c <__stack+0xad>
	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
     508:	83 e0       	ldi	r24, 0x03	; 3
     50a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuerrorState  ;
     50c:	89 81       	ldd	r24, Y+1	; 0x01

}//End of DIO_enuSetPinDirection().
     50e:	26 96       	adiw	r28, 0x06	; 6
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	f8 94       	cli
     514:	de bf       	out	0x3e, r29	; 62
     516:	0f be       	out	0x3f, r0	; 63
     518:	cd bf       	out	0x3d, r28	; 61
     51a:	cf 91       	pop	r28
     51c:	df 91       	pop	r29
     51e:	08 95       	ret

00000520 <DIO_enuSetPinValue>:
/*                 : Arg.3: Copy_u8Val.                                     */
/*                                        DIO_LOW        ,   DIO_HIGH       */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuSetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID ,u8 Copy_u8Val)
{
     520:	df 93       	push	r29
     522:	cf 93       	push	r28
     524:	00 d0       	rcall	.+0      	; 0x526 <DIO_enuSetPinValue+0x6>
     526:	00 d0       	rcall	.+0      	; 0x528 <DIO_enuSetPinValue+0x8>
     528:	00 d0       	rcall	.+0      	; 0x52a <DIO_enuSetPinValue+0xa>
     52a:	cd b7       	in	r28, 0x3d	; 61
     52c:	de b7       	in	r29, 0x3e	; 62
     52e:	8a 83       	std	Y+2, r24	; 0x02
     530:	6b 83       	std	Y+3, r22	; 0x03
     532:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuerrorState = ES_NOK ;
     534:	19 82       	std	Y+1, r1	; 0x01

	if( (Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <= DIO_PIN7) &&( Copy_u8Val<=DIO_HIGH))
     536:	8a 81       	ldd	r24, Y+2	; 0x02
     538:	84 30       	cpi	r24, 0x04	; 4
     53a:	08 f0       	brcs	.+2      	; 0x53e <DIO_enuSetPinValue+0x1e>
     53c:	dc c0       	rjmp	.+440    	; 0x6f6 <DIO_enuSetPinValue+0x1d6>
     53e:	8b 81       	ldd	r24, Y+3	; 0x03
     540:	88 30       	cpi	r24, 0x08	; 8
     542:	08 f0       	brcs	.+2      	; 0x546 <DIO_enuSetPinValue+0x26>
     544:	d8 c0       	rjmp	.+432    	; 0x6f6 <DIO_enuSetPinValue+0x1d6>
     546:	8c 81       	ldd	r24, Y+4	; 0x04
     548:	82 30       	cpi	r24, 0x02	; 2
     54a:	08 f0       	brcs	.+2      	; 0x54e <DIO_enuSetPinValue+0x2e>
     54c:	d4 c0       	rjmp	.+424    	; 0x6f6 <DIO_enuSetPinValue+0x1d6>
	{

		/**********************************************************
		 * Switching for the suitable case .
		 **********************************************************/
		switch( Copy_u8PortID )
     54e:	8a 81       	ldd	r24, Y+2	; 0x02
     550:	28 2f       	mov	r18, r24
     552:	30 e0       	ldi	r19, 0x00	; 0
     554:	3e 83       	std	Y+6, r19	; 0x06
     556:	2d 83       	std	Y+5, r18	; 0x05
     558:	8d 81       	ldd	r24, Y+5	; 0x05
     55a:	9e 81       	ldd	r25, Y+6	; 0x06
     55c:	81 30       	cpi	r24, 0x01	; 1
     55e:	91 05       	cpc	r25, r1
     560:	09 f4       	brne	.+2      	; 0x564 <DIO_enuSetPinValue+0x44>
     562:	43 c0       	rjmp	.+134    	; 0x5ea <DIO_enuSetPinValue+0xca>
     564:	2d 81       	ldd	r18, Y+5	; 0x05
     566:	3e 81       	ldd	r19, Y+6	; 0x06
     568:	22 30       	cpi	r18, 0x02	; 2
     56a:	31 05       	cpc	r19, r1
     56c:	2c f4       	brge	.+10     	; 0x578 <DIO_enuSetPinValue+0x58>
     56e:	8d 81       	ldd	r24, Y+5	; 0x05
     570:	9e 81       	ldd	r25, Y+6	; 0x06
     572:	00 97       	sbiw	r24, 0x00	; 0
     574:	71 f0       	breq	.+28     	; 0x592 <DIO_enuSetPinValue+0x72>
     576:	bc c0       	rjmp	.+376    	; 0x6f0 <DIO_enuSetPinValue+0x1d0>
     578:	2d 81       	ldd	r18, Y+5	; 0x05
     57a:	3e 81       	ldd	r19, Y+6	; 0x06
     57c:	22 30       	cpi	r18, 0x02	; 2
     57e:	31 05       	cpc	r19, r1
     580:	09 f4       	brne	.+2      	; 0x584 <DIO_enuSetPinValue+0x64>
     582:	5f c0       	rjmp	.+190    	; 0x642 <DIO_enuSetPinValue+0x122>
     584:	8d 81       	ldd	r24, Y+5	; 0x05
     586:	9e 81       	ldd	r25, Y+6	; 0x06
     588:	83 30       	cpi	r24, 0x03	; 3
     58a:	91 05       	cpc	r25, r1
     58c:	09 f4       	brne	.+2      	; 0x590 <DIO_enuSetPinValue+0x70>
     58e:	85 c0       	rjmp	.+266    	; 0x69a <DIO_enuSetPinValue+0x17a>
     590:	af c0       	rjmp	.+350    	; 0x6f0 <DIO_enuSetPinValue+0x1d0>
		{
		case DIO_PORTA :
			if( Copy_u8Val == DIO_LOW)
     592:	8c 81       	ldd	r24, Y+4	; 0x04
     594:	88 23       	and	r24, r24
     596:	a9 f4       	brne	.+42     	; 0x5c2 <DIO_enuSetPinValue+0xa2>
			{
				PORTA &=~(DIO_MASK_BIT<<Copy_u8PinID);
     598:	ab e3       	ldi	r26, 0x3B	; 59
     59a:	b0 e0       	ldi	r27, 0x00	; 0
     59c:	eb e3       	ldi	r30, 0x3B	; 59
     59e:	f0 e0       	ldi	r31, 0x00	; 0
     5a0:	80 81       	ld	r24, Z
     5a2:	48 2f       	mov	r20, r24
     5a4:	8b 81       	ldd	r24, Y+3	; 0x03
     5a6:	28 2f       	mov	r18, r24
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	02 2e       	mov	r0, r18
     5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <DIO_enuSetPinValue+0x96>
     5b2:	88 0f       	add	r24, r24
     5b4:	99 1f       	adc	r25, r25
     5b6:	0a 94       	dec	r0
     5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <DIO_enuSetPinValue+0x92>
     5ba:	80 95       	com	r24
     5bc:	84 23       	and	r24, r20
     5be:	8c 93       	st	X, r24
     5c0:	97 c0       	rjmp	.+302    	; 0x6f0 <DIO_enuSetPinValue+0x1d0>
			}
			else
			{
				PORTA |=(DIO_MASK_BIT<<Copy_u8PinID);
     5c2:	ab e3       	ldi	r26, 0x3B	; 59
     5c4:	b0 e0       	ldi	r27, 0x00	; 0
     5c6:	eb e3       	ldi	r30, 0x3B	; 59
     5c8:	f0 e0       	ldi	r31, 0x00	; 0
     5ca:	80 81       	ld	r24, Z
     5cc:	48 2f       	mov	r20, r24
     5ce:	8b 81       	ldd	r24, Y+3	; 0x03
     5d0:	28 2f       	mov	r18, r24
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	02 2e       	mov	r0, r18
     5da:	02 c0       	rjmp	.+4      	; 0x5e0 <DIO_enuSetPinValue+0xc0>
     5dc:	88 0f       	add	r24, r24
     5de:	99 1f       	adc	r25, r25
     5e0:	0a 94       	dec	r0
     5e2:	e2 f7       	brpl	.-8      	; 0x5dc <DIO_enuSetPinValue+0xbc>
     5e4:	84 2b       	or	r24, r20
     5e6:	8c 93       	st	X, r24
     5e8:	83 c0       	rjmp	.+262    	; 0x6f0 <DIO_enuSetPinValue+0x1d0>
			}

			break;

		case DIO_PORTB :
			if( Copy_u8Val == DIO_LOW)
     5ea:	8c 81       	ldd	r24, Y+4	; 0x04
     5ec:	88 23       	and	r24, r24
     5ee:	a9 f4       	brne	.+42     	; 0x61a <DIO_enuSetPinValue+0xfa>
			{
				PORTB &=~(DIO_MASK_BIT<<Copy_u8PinID);
     5f0:	a8 e3       	ldi	r26, 0x38	; 56
     5f2:	b0 e0       	ldi	r27, 0x00	; 0
     5f4:	e8 e3       	ldi	r30, 0x38	; 56
     5f6:	f0 e0       	ldi	r31, 0x00	; 0
     5f8:	80 81       	ld	r24, Z
     5fa:	48 2f       	mov	r20, r24
     5fc:	8b 81       	ldd	r24, Y+3	; 0x03
     5fe:	28 2f       	mov	r18, r24
     600:	30 e0       	ldi	r19, 0x00	; 0
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	02 2e       	mov	r0, r18
     608:	02 c0       	rjmp	.+4      	; 0x60e <DIO_enuSetPinValue+0xee>
     60a:	88 0f       	add	r24, r24
     60c:	99 1f       	adc	r25, r25
     60e:	0a 94       	dec	r0
     610:	e2 f7       	brpl	.-8      	; 0x60a <DIO_enuSetPinValue+0xea>
     612:	80 95       	com	r24
     614:	84 23       	and	r24, r20
     616:	8c 93       	st	X, r24
     618:	6b c0       	rjmp	.+214    	; 0x6f0 <DIO_enuSetPinValue+0x1d0>
			}
			else
			{
				PORTB |=(DIO_MASK_BIT<<Copy_u8PinID);
     61a:	a8 e3       	ldi	r26, 0x38	; 56
     61c:	b0 e0       	ldi	r27, 0x00	; 0
     61e:	e8 e3       	ldi	r30, 0x38	; 56
     620:	f0 e0       	ldi	r31, 0x00	; 0
     622:	80 81       	ld	r24, Z
     624:	48 2f       	mov	r20, r24
     626:	8b 81       	ldd	r24, Y+3	; 0x03
     628:	28 2f       	mov	r18, r24
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	02 2e       	mov	r0, r18
     632:	02 c0       	rjmp	.+4      	; 0x638 <DIO_enuSetPinValue+0x118>
     634:	88 0f       	add	r24, r24
     636:	99 1f       	adc	r25, r25
     638:	0a 94       	dec	r0
     63a:	e2 f7       	brpl	.-8      	; 0x634 <DIO_enuSetPinValue+0x114>
     63c:	84 2b       	or	r24, r20
     63e:	8c 93       	st	X, r24
     640:	57 c0       	rjmp	.+174    	; 0x6f0 <DIO_enuSetPinValue+0x1d0>

			break;

		case DIO_PORTC :

			if( Copy_u8Val == DIO_LOW)
     642:	8c 81       	ldd	r24, Y+4	; 0x04
     644:	88 23       	and	r24, r24
     646:	a9 f4       	brne	.+42     	; 0x672 <DIO_enuSetPinValue+0x152>
			{
				PORTC &=~(DIO_MASK_BIT<<Copy_u8PinID);
     648:	a5 e3       	ldi	r26, 0x35	; 53
     64a:	b0 e0       	ldi	r27, 0x00	; 0
     64c:	e5 e3       	ldi	r30, 0x35	; 53
     64e:	f0 e0       	ldi	r31, 0x00	; 0
     650:	80 81       	ld	r24, Z
     652:	48 2f       	mov	r20, r24
     654:	8b 81       	ldd	r24, Y+3	; 0x03
     656:	28 2f       	mov	r18, r24
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	02 2e       	mov	r0, r18
     660:	02 c0       	rjmp	.+4      	; 0x666 <DIO_enuSetPinValue+0x146>
     662:	88 0f       	add	r24, r24
     664:	99 1f       	adc	r25, r25
     666:	0a 94       	dec	r0
     668:	e2 f7       	brpl	.-8      	; 0x662 <DIO_enuSetPinValue+0x142>
     66a:	80 95       	com	r24
     66c:	84 23       	and	r24, r20
     66e:	8c 93       	st	X, r24
     670:	3f c0       	rjmp	.+126    	; 0x6f0 <DIO_enuSetPinValue+0x1d0>
			}
			else
			{
				PORTC |=(DIO_MASK_BIT<<Copy_u8PinID);
     672:	a5 e3       	ldi	r26, 0x35	; 53
     674:	b0 e0       	ldi	r27, 0x00	; 0
     676:	e5 e3       	ldi	r30, 0x35	; 53
     678:	f0 e0       	ldi	r31, 0x00	; 0
     67a:	80 81       	ld	r24, Z
     67c:	48 2f       	mov	r20, r24
     67e:	8b 81       	ldd	r24, Y+3	; 0x03
     680:	28 2f       	mov	r18, r24
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	02 2e       	mov	r0, r18
     68a:	02 c0       	rjmp	.+4      	; 0x690 <DIO_enuSetPinValue+0x170>
     68c:	88 0f       	add	r24, r24
     68e:	99 1f       	adc	r25, r25
     690:	0a 94       	dec	r0
     692:	e2 f7       	brpl	.-8      	; 0x68c <DIO_enuSetPinValue+0x16c>
     694:	84 2b       	or	r24, r20
     696:	8c 93       	st	X, r24
     698:	2b c0       	rjmp	.+86     	; 0x6f0 <DIO_enuSetPinValue+0x1d0>
			}

			break;

		case DIO_PORTD :
			if( Copy_u8Val == DIO_LOW)
     69a:	8c 81       	ldd	r24, Y+4	; 0x04
     69c:	88 23       	and	r24, r24
     69e:	a9 f4       	brne	.+42     	; 0x6ca <DIO_enuSetPinValue+0x1aa>
			{
				PORTD &=~(DIO_MASK_BIT<<Copy_u8PinID);
     6a0:	a2 e3       	ldi	r26, 0x32	; 50
     6a2:	b0 e0       	ldi	r27, 0x00	; 0
     6a4:	e2 e3       	ldi	r30, 0x32	; 50
     6a6:	f0 e0       	ldi	r31, 0x00	; 0
     6a8:	80 81       	ld	r24, Z
     6aa:	48 2f       	mov	r20, r24
     6ac:	8b 81       	ldd	r24, Y+3	; 0x03
     6ae:	28 2f       	mov	r18, r24
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	02 2e       	mov	r0, r18
     6b8:	02 c0       	rjmp	.+4      	; 0x6be <DIO_enuSetPinValue+0x19e>
     6ba:	88 0f       	add	r24, r24
     6bc:	99 1f       	adc	r25, r25
     6be:	0a 94       	dec	r0
     6c0:	e2 f7       	brpl	.-8      	; 0x6ba <DIO_enuSetPinValue+0x19a>
     6c2:	80 95       	com	r24
     6c4:	84 23       	and	r24, r20
     6c6:	8c 93       	st	X, r24
     6c8:	13 c0       	rjmp	.+38     	; 0x6f0 <DIO_enuSetPinValue+0x1d0>
			}
			else
			{
				PORTD |=(DIO_MASK_BIT<<Copy_u8PinID);
     6ca:	a2 e3       	ldi	r26, 0x32	; 50
     6cc:	b0 e0       	ldi	r27, 0x00	; 0
     6ce:	e2 e3       	ldi	r30, 0x32	; 50
     6d0:	f0 e0       	ldi	r31, 0x00	; 0
     6d2:	80 81       	ld	r24, Z
     6d4:	48 2f       	mov	r20, r24
     6d6:	8b 81       	ldd	r24, Y+3	; 0x03
     6d8:	28 2f       	mov	r18, r24
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	02 2e       	mov	r0, r18
     6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <DIO_enuSetPinValue+0x1c8>
     6e4:	88 0f       	add	r24, r24
     6e6:	99 1f       	adc	r25, r25
     6e8:	0a 94       	dec	r0
     6ea:	e2 f7       	brpl	.-8      	; 0x6e4 <DIO_enuSetPinValue+0x1c4>
     6ec:	84 2b       	or	r24, r20
     6ee:	8c 93       	st	X, r24
			}

			break;

		}
		Local_enuerrorState = ES_OK;
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	89 83       	std	Y+1, r24	; 0x01
     6f4:	02 c0       	rjmp	.+4      	; 0x6fa <DIO_enuSetPinValue+0x1da>
	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
     6f6:	83 e0       	ldi	r24, 0x03	; 3
     6f8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuerrorState  ;
     6fa:	89 81       	ldd	r24, Y+1	; 0x01
}//End of DIO_enuSetPinValue().
     6fc:	26 96       	adiw	r28, 0x06	; 6
     6fe:	0f b6       	in	r0, 0x3f	; 63
     700:	f8 94       	cli
     702:	de bf       	out	0x3e, r29	; 62
     704:	0f be       	out	0x3f, r0	; 63
     706:	cd bf       	out	0x3d, r28	; 61
     708:	cf 91       	pop	r28
     70a:	df 91       	pop	r29
     70c:	08 95       	ret

0000070e <DIO_enuToggelPin>:
/*                                        DIO_PIN2       ,   DIO_PIN6       */
/*                                        DIO_PIN3       ,   DIO_PIN7       */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuToggelPin(u8  Copy_u8PortID, u8 Copy_u8PinID  )
{
     70e:	df 93       	push	r29
     710:	cf 93       	push	r28
     712:	00 d0       	rcall	.+0      	; 0x714 <DIO_enuToggelPin+0x6>
     714:	00 d0       	rcall	.+0      	; 0x716 <DIO_enuToggelPin+0x8>
     716:	0f 92       	push	r0
     718:	cd b7       	in	r28, 0x3d	; 61
     71a:	de b7       	in	r29, 0x3e	; 62
     71c:	8a 83       	std	Y+2, r24	; 0x02
     71e:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuerrorState = ES_NOK ;
     720:	19 82       	std	Y+1, r1	; 0x01

	if( (Copy_u8PortID <= DIO_PORTD) &&  (Copy_u8PinID <= DIO_PIN7) )
     722:	8a 81       	ldd	r24, Y+2	; 0x02
     724:	84 30       	cpi	r24, 0x04	; 4
     726:	08 f0       	brcs	.+2      	; 0x72a <DIO_enuToggelPin+0x1c>
     728:	75 c0       	rjmp	.+234    	; 0x814 <DIO_enuToggelPin+0x106>
     72a:	8b 81       	ldd	r24, Y+3	; 0x03
     72c:	88 30       	cpi	r24, 0x08	; 8
     72e:	08 f0       	brcs	.+2      	; 0x732 <DIO_enuToggelPin+0x24>
     730:	71 c0       	rjmp	.+226    	; 0x814 <DIO_enuToggelPin+0x106>
	{
		/**********************************************************
		 * Switching for the suitable case .
		 **********************************************************/
		switch( Copy_u8PortID )
     732:	8a 81       	ldd	r24, Y+2	; 0x02
     734:	28 2f       	mov	r18, r24
     736:	30 e0       	ldi	r19, 0x00	; 0
     738:	3d 83       	std	Y+5, r19	; 0x05
     73a:	2c 83       	std	Y+4, r18	; 0x04
     73c:	8c 81       	ldd	r24, Y+4	; 0x04
     73e:	9d 81       	ldd	r25, Y+5	; 0x05
     740:	81 30       	cpi	r24, 0x01	; 1
     742:	91 05       	cpc	r25, r1
     744:	49 f1       	breq	.+82     	; 0x798 <DIO_enuToggelPin+0x8a>
     746:	2c 81       	ldd	r18, Y+4	; 0x04
     748:	3d 81       	ldd	r19, Y+5	; 0x05
     74a:	22 30       	cpi	r18, 0x02	; 2
     74c:	31 05       	cpc	r19, r1
     74e:	2c f4       	brge	.+10     	; 0x75a <DIO_enuToggelPin+0x4c>
     750:	8c 81       	ldd	r24, Y+4	; 0x04
     752:	9d 81       	ldd	r25, Y+5	; 0x05
     754:	00 97       	sbiw	r24, 0x00	; 0
     756:	61 f0       	breq	.+24     	; 0x770 <DIO_enuToggelPin+0x62>
     758:	5a c0       	rjmp	.+180    	; 0x80e <DIO_enuToggelPin+0x100>
     75a:	2c 81       	ldd	r18, Y+4	; 0x04
     75c:	3d 81       	ldd	r19, Y+5	; 0x05
     75e:	22 30       	cpi	r18, 0x02	; 2
     760:	31 05       	cpc	r19, r1
     762:	71 f1       	breq	.+92     	; 0x7c0 <DIO_enuToggelPin+0xb2>
     764:	8c 81       	ldd	r24, Y+4	; 0x04
     766:	9d 81       	ldd	r25, Y+5	; 0x05
     768:	83 30       	cpi	r24, 0x03	; 3
     76a:	91 05       	cpc	r25, r1
     76c:	e9 f1       	breq	.+122    	; 0x7e8 <DIO_enuToggelPin+0xda>
     76e:	4f c0       	rjmp	.+158    	; 0x80e <DIO_enuToggelPin+0x100>
		{
		case DIO_PORTA :
			PORTA ^=(DIO_MASK_BIT<<Copy_u8PinID);
     770:	ab e3       	ldi	r26, 0x3B	; 59
     772:	b0 e0       	ldi	r27, 0x00	; 0
     774:	eb e3       	ldi	r30, 0x3B	; 59
     776:	f0 e0       	ldi	r31, 0x00	; 0
     778:	80 81       	ld	r24, Z
     77a:	48 2f       	mov	r20, r24
     77c:	8b 81       	ldd	r24, Y+3	; 0x03
     77e:	28 2f       	mov	r18, r24
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	81 e0       	ldi	r24, 0x01	; 1
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	02 2e       	mov	r0, r18
     788:	02 c0       	rjmp	.+4      	; 0x78e <DIO_enuToggelPin+0x80>
     78a:	88 0f       	add	r24, r24
     78c:	99 1f       	adc	r25, r25
     78e:	0a 94       	dec	r0
     790:	e2 f7       	brpl	.-8      	; 0x78a <DIO_enuToggelPin+0x7c>
     792:	84 27       	eor	r24, r20
     794:	8c 93       	st	X, r24
     796:	3b c0       	rjmp	.+118    	; 0x80e <DIO_enuToggelPin+0x100>
			break;

		case DIO_PORTB :
			PORTB ^=(DIO_MASK_BIT<<Copy_u8PinID);
     798:	a8 e3       	ldi	r26, 0x38	; 56
     79a:	b0 e0       	ldi	r27, 0x00	; 0
     79c:	e8 e3       	ldi	r30, 0x38	; 56
     79e:	f0 e0       	ldi	r31, 0x00	; 0
     7a0:	80 81       	ld	r24, Z
     7a2:	48 2f       	mov	r20, r24
     7a4:	8b 81       	ldd	r24, Y+3	; 0x03
     7a6:	28 2f       	mov	r18, r24
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	02 2e       	mov	r0, r18
     7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <DIO_enuToggelPin+0xa8>
     7b2:	88 0f       	add	r24, r24
     7b4:	99 1f       	adc	r25, r25
     7b6:	0a 94       	dec	r0
     7b8:	e2 f7       	brpl	.-8      	; 0x7b2 <DIO_enuToggelPin+0xa4>
     7ba:	84 27       	eor	r24, r20
     7bc:	8c 93       	st	X, r24
     7be:	27 c0       	rjmp	.+78     	; 0x80e <DIO_enuToggelPin+0x100>
			break;

		case DIO_PORTC :
			PORTC ^=(DIO_MASK_BIT<<Copy_u8PinID);
     7c0:	a5 e3       	ldi	r26, 0x35	; 53
     7c2:	b0 e0       	ldi	r27, 0x00	; 0
     7c4:	e5 e3       	ldi	r30, 0x35	; 53
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	80 81       	ld	r24, Z
     7ca:	48 2f       	mov	r20, r24
     7cc:	8b 81       	ldd	r24, Y+3	; 0x03
     7ce:	28 2f       	mov	r18, r24
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	02 2e       	mov	r0, r18
     7d8:	02 c0       	rjmp	.+4      	; 0x7de <DIO_enuToggelPin+0xd0>
     7da:	88 0f       	add	r24, r24
     7dc:	99 1f       	adc	r25, r25
     7de:	0a 94       	dec	r0
     7e0:	e2 f7       	brpl	.-8      	; 0x7da <DIO_enuToggelPin+0xcc>
     7e2:	84 27       	eor	r24, r20
     7e4:	8c 93       	st	X, r24
     7e6:	13 c0       	rjmp	.+38     	; 0x80e <DIO_enuToggelPin+0x100>
			break;

		case DIO_PORTD :
			PORTD ^=(DIO_MASK_BIT<<Copy_u8PinID);
     7e8:	a2 e3       	ldi	r26, 0x32	; 50
     7ea:	b0 e0       	ldi	r27, 0x00	; 0
     7ec:	e2 e3       	ldi	r30, 0x32	; 50
     7ee:	f0 e0       	ldi	r31, 0x00	; 0
     7f0:	80 81       	ld	r24, Z
     7f2:	48 2f       	mov	r20, r24
     7f4:	8b 81       	ldd	r24, Y+3	; 0x03
     7f6:	28 2f       	mov	r18, r24
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	02 2e       	mov	r0, r18
     800:	02 c0       	rjmp	.+4      	; 0x806 <DIO_enuToggelPin+0xf8>
     802:	88 0f       	add	r24, r24
     804:	99 1f       	adc	r25, r25
     806:	0a 94       	dec	r0
     808:	e2 f7       	brpl	.-8      	; 0x802 <DIO_enuToggelPin+0xf4>
     80a:	84 27       	eor	r24, r20
     80c:	8c 93       	st	X, r24
			break;
		}

		Local_enuerrorState = ES_OK;
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	89 83       	std	Y+1, r24	; 0x01
     812:	02 c0       	rjmp	.+4      	; 0x818 <DIO_enuToggelPin+0x10a>

	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
     814:	83 e0       	ldi	r24, 0x03	; 3
     816:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuerrorState  ;
     818:	89 81       	ldd	r24, Y+1	; 0x01
}//End of DIO_enuToggelPin().
     81a:	0f 90       	pop	r0
     81c:	0f 90       	pop	r0
     81e:	0f 90       	pop	r0
     820:	0f 90       	pop	r0
     822:	0f 90       	pop	r0
     824:	cf 91       	pop	r28
     826:	df 91       	pop	r29
     828:	08 95       	ret

0000082a <DIO_enuGetPinVlaue>:
/*                 : Arg.3: Address of u8 variable.                              */
/*                                                                               */
/* Return          : ERROR_STATE eum.                                            */
/*********************************************************************************/
ES_t DIO_enuGetPinVlaue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8* Copy_pu8PinVal)
{
     82a:	df 93       	push	r29
     82c:	cf 93       	push	r28
     82e:	cd b7       	in	r28, 0x3d	; 61
     830:	de b7       	in	r29, 0x3e	; 62
     832:	27 97       	sbiw	r28, 0x07	; 7
     834:	0f b6       	in	r0, 0x3f	; 63
     836:	f8 94       	cli
     838:	de bf       	out	0x3e, r29	; 62
     83a:	0f be       	out	0x3f, r0	; 63
     83c:	cd bf       	out	0x3d, r28	; 61
     83e:	8a 83       	std	Y+2, r24	; 0x02
     840:	6b 83       	std	Y+3, r22	; 0x03
     842:	5d 83       	std	Y+5, r21	; 0x05
     844:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuerrorState = ES_NOK ;
     846:	19 82       	std	Y+1, r1	; 0x01

	// Check to ensure that the passed address is not equal Null.
	if( Copy_pu8PinVal != NULL )
     848:	8c 81       	ldd	r24, Y+4	; 0x04
     84a:	9d 81       	ldd	r25, Y+5	; 0x05
     84c:	00 97       	sbiw	r24, 0x00	; 0
     84e:	09 f4       	brne	.+2      	; 0x852 <DIO_enuGetPinVlaue+0x28>
     850:	7e c0       	rjmp	.+252    	; 0x94e <DIO_enuGetPinVlaue+0x124>
	{
		if( (Copy_u8PortID <= DIO_PORTD) &&  (Copy_u8PinID <= DIO_PIN7) )
     852:	8a 81       	ldd	r24, Y+2	; 0x02
     854:	84 30       	cpi	r24, 0x04	; 4
     856:	08 f0       	brcs	.+2      	; 0x85a <DIO_enuGetPinVlaue+0x30>
     858:	77 c0       	rjmp	.+238    	; 0x948 <DIO_enuGetPinVlaue+0x11e>
     85a:	8b 81       	ldd	r24, Y+3	; 0x03
     85c:	88 30       	cpi	r24, 0x08	; 8
     85e:	08 f0       	brcs	.+2      	; 0x862 <DIO_enuGetPinVlaue+0x38>
     860:	73 c0       	rjmp	.+230    	; 0x948 <DIO_enuGetPinVlaue+0x11e>
		{
			/**********************************************************
			 * Switching for the suitable case .
			 **********************************************************/
			switch( Copy_u8PortID )
     862:	8a 81       	ldd	r24, Y+2	; 0x02
     864:	28 2f       	mov	r18, r24
     866:	30 e0       	ldi	r19, 0x00	; 0
     868:	3f 83       	std	Y+7, r19	; 0x07
     86a:	2e 83       	std	Y+6, r18	; 0x06
     86c:	4e 81       	ldd	r20, Y+6	; 0x06
     86e:	5f 81       	ldd	r21, Y+7	; 0x07
     870:	41 30       	cpi	r20, 0x01	; 1
     872:	51 05       	cpc	r21, r1
     874:	59 f1       	breq	.+86     	; 0x8cc <DIO_enuGetPinVlaue+0xa2>
     876:	8e 81       	ldd	r24, Y+6	; 0x06
     878:	9f 81       	ldd	r25, Y+7	; 0x07
     87a:	82 30       	cpi	r24, 0x02	; 2
     87c:	91 05       	cpc	r25, r1
     87e:	34 f4       	brge	.+12     	; 0x88c <DIO_enuGetPinVlaue+0x62>
     880:	2e 81       	ldd	r18, Y+6	; 0x06
     882:	3f 81       	ldd	r19, Y+7	; 0x07
     884:	21 15       	cp	r18, r1
     886:	31 05       	cpc	r19, r1
     888:	69 f0       	breq	.+26     	; 0x8a4 <DIO_enuGetPinVlaue+0x7a>
     88a:	5b c0       	rjmp	.+182    	; 0x942 <DIO_enuGetPinVlaue+0x118>
     88c:	4e 81       	ldd	r20, Y+6	; 0x06
     88e:	5f 81       	ldd	r21, Y+7	; 0x07
     890:	42 30       	cpi	r20, 0x02	; 2
     892:	51 05       	cpc	r21, r1
     894:	79 f1       	breq	.+94     	; 0x8f4 <DIO_enuGetPinVlaue+0xca>
     896:	8e 81       	ldd	r24, Y+6	; 0x06
     898:	9f 81       	ldd	r25, Y+7	; 0x07
     89a:	83 30       	cpi	r24, 0x03	; 3
     89c:	91 05       	cpc	r25, r1
     89e:	09 f4       	brne	.+2      	; 0x8a2 <DIO_enuGetPinVlaue+0x78>
     8a0:	3d c0       	rjmp	.+122    	; 0x91c <DIO_enuGetPinVlaue+0xf2>
     8a2:	4f c0       	rjmp	.+158    	; 0x942 <DIO_enuGetPinVlaue+0x118>
			{
			case DIO_PORTA :
				*Copy_pu8PinVal = (PINA>>Copy_u8PinID)&DIO_MASK_BIT;
     8a4:	e9 e3       	ldi	r30, 0x39	; 57
     8a6:	f0 e0       	ldi	r31, 0x00	; 0
     8a8:	80 81       	ld	r24, Z
     8aa:	28 2f       	mov	r18, r24
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	8b 81       	ldd	r24, Y+3	; 0x03
     8b0:	88 2f       	mov	r24, r24
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a9 01       	movw	r20, r18
     8b6:	02 c0       	rjmp	.+4      	; 0x8bc <DIO_enuGetPinVlaue+0x92>
     8b8:	55 95       	asr	r21
     8ba:	47 95       	ror	r20
     8bc:	8a 95       	dec	r24
     8be:	e2 f7       	brpl	.-8      	; 0x8b8 <DIO_enuGetPinVlaue+0x8e>
     8c0:	ca 01       	movw	r24, r20
     8c2:	81 70       	andi	r24, 0x01	; 1
     8c4:	ec 81       	ldd	r30, Y+4	; 0x04
     8c6:	fd 81       	ldd	r31, Y+5	; 0x05
     8c8:	80 83       	st	Z, r24
     8ca:	3b c0       	rjmp	.+118    	; 0x942 <DIO_enuGetPinVlaue+0x118>
				break;

			case DIO_PORTB :
				*Copy_pu8PinVal = (PINB>>Copy_u8PinID)&DIO_MASK_BIT;
     8cc:	e6 e3       	ldi	r30, 0x36	; 54
     8ce:	f0 e0       	ldi	r31, 0x00	; 0
     8d0:	80 81       	ld	r24, Z
     8d2:	28 2f       	mov	r18, r24
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	8b 81       	ldd	r24, Y+3	; 0x03
     8d8:	88 2f       	mov	r24, r24
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	a9 01       	movw	r20, r18
     8de:	02 c0       	rjmp	.+4      	; 0x8e4 <DIO_enuGetPinVlaue+0xba>
     8e0:	55 95       	asr	r21
     8e2:	47 95       	ror	r20
     8e4:	8a 95       	dec	r24
     8e6:	e2 f7       	brpl	.-8      	; 0x8e0 <DIO_enuGetPinVlaue+0xb6>
     8e8:	ca 01       	movw	r24, r20
     8ea:	81 70       	andi	r24, 0x01	; 1
     8ec:	ec 81       	ldd	r30, Y+4	; 0x04
     8ee:	fd 81       	ldd	r31, Y+5	; 0x05
     8f0:	80 83       	st	Z, r24
     8f2:	27 c0       	rjmp	.+78     	; 0x942 <DIO_enuGetPinVlaue+0x118>
				break;

			case DIO_PORTC :
				*Copy_pu8PinVal = (PINC>>Copy_u8PinID)&DIO_MASK_BIT;
     8f4:	e3 e3       	ldi	r30, 0x33	; 51
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	80 81       	ld	r24, Z
     8fa:	28 2f       	mov	r18, r24
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	8b 81       	ldd	r24, Y+3	; 0x03
     900:	88 2f       	mov	r24, r24
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	a9 01       	movw	r20, r18
     906:	02 c0       	rjmp	.+4      	; 0x90c <DIO_enuGetPinVlaue+0xe2>
     908:	55 95       	asr	r21
     90a:	47 95       	ror	r20
     90c:	8a 95       	dec	r24
     90e:	e2 f7       	brpl	.-8      	; 0x908 <DIO_enuGetPinVlaue+0xde>
     910:	ca 01       	movw	r24, r20
     912:	81 70       	andi	r24, 0x01	; 1
     914:	ec 81       	ldd	r30, Y+4	; 0x04
     916:	fd 81       	ldd	r31, Y+5	; 0x05
     918:	80 83       	st	Z, r24
     91a:	13 c0       	rjmp	.+38     	; 0x942 <DIO_enuGetPinVlaue+0x118>
				break;

			case DIO_PORTD :
				*Copy_pu8PinVal = (PIND>>Copy_u8PinID)&DIO_MASK_BIT;
     91c:	e0 e3       	ldi	r30, 0x30	; 48
     91e:	f0 e0       	ldi	r31, 0x00	; 0
     920:	80 81       	ld	r24, Z
     922:	28 2f       	mov	r18, r24
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	8b 81       	ldd	r24, Y+3	; 0x03
     928:	88 2f       	mov	r24, r24
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	a9 01       	movw	r20, r18
     92e:	02 c0       	rjmp	.+4      	; 0x934 <DIO_enuGetPinVlaue+0x10a>
     930:	55 95       	asr	r21
     932:	47 95       	ror	r20
     934:	8a 95       	dec	r24
     936:	e2 f7       	brpl	.-8      	; 0x930 <DIO_enuGetPinVlaue+0x106>
     938:	ca 01       	movw	r24, r20
     93a:	81 70       	andi	r24, 0x01	; 1
     93c:	ec 81       	ldd	r30, Y+4	; 0x04
     93e:	fd 81       	ldd	r31, Y+5	; 0x05
     940:	80 83       	st	Z, r24
				break;
			}

			Local_enuerrorState = ES_OK;
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	89 83       	std	Y+1, r24	; 0x01
     946:	05 c0       	rjmp	.+10     	; 0x952 <DIO_enuGetPinVlaue+0x128>

		}
		else
		{
			Local_enuerrorState = ES_OUT_OF_RANGE;
     948:	83 e0       	ldi	r24, 0x03	; 3
     94a:	89 83       	std	Y+1, r24	; 0x01
     94c:	02 c0       	rjmp	.+4      	; 0x952 <DIO_enuGetPinVlaue+0x128>
	else
	{
		/**********************************************************
		 * Handle null pointer case.
		 **********************************************************/
		Local_enuerrorState = ES_NULL_POINTER;
     94e:	82 e0       	ldi	r24, 0x02	; 2
     950:	89 83       	std	Y+1, r24	; 0x01
	}



	return Local_enuerrorState  ;
     952:	89 81       	ldd	r24, Y+1	; 0x01
}//End of DIO_enuGetPinVlaue().
     954:	27 96       	adiw	r28, 0x07	; 7
     956:	0f b6       	in	r0, 0x3f	; 63
     958:	f8 94       	cli
     95a:	de bf       	out	0x3e, r29	; 62
     95c:	0f be       	out	0x3f, r0	; 63
     95e:	cd bf       	out	0x3d, r28	; 61
     960:	cf 91       	pop	r28
     962:	df 91       	pop	r29
     964:	08 95       	ret

00000966 <Switch_enuInit>:
/* Description     : Utility function to initialize the array of switches.  */
/* Argument        : Address array of type SW_t.                            */
/* Return          : Error state of type ES_t.                              */
/*.................**********************************************************/
ES_t Switch_enuInit(SW_t* Copy_pstrSwitchs)
{
     966:	df 93       	push	r29
     968:	cf 93       	push	r28
     96a:	00 d0       	rcall	.+0      	; 0x96c <Switch_enuInit+0x6>
     96c:	00 d0       	rcall	.+0      	; 0x96e <Switch_enuInit+0x8>
     96e:	cd b7       	in	r28, 0x3d	; 61
     970:	de b7       	in	r29, 0x3e	; 62
     972:	9c 83       	std	Y+4, r25	; 0x04
     974:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK ;
     976:	1a 82       	std	Y+2, r1	; 0x02

	u8 Local_u8Iterator ;

	if( Copy_pstrSwitchs != NULL   )
     978:	8b 81       	ldd	r24, Y+3	; 0x03
     97a:	9c 81       	ldd	r25, Y+4	; 0x04
     97c:	00 97       	sbiw	r24, 0x00	; 0
     97e:	09 f4       	brne	.+2      	; 0x982 <Switch_enuInit+0x1c>
     980:	5c c0       	rjmp	.+184    	; 0xa3a <Switch_enuInit+0xd4>
	{
		for (Local_u8Iterator = 0 ; Local_u8Iterator < SW_NUM ; Local_u8Iterator++ )
     982:	19 82       	std	Y+1, r1	; 0x01
     984:	55 c0       	rjmp	.+170    	; 0xa30 <Switch_enuInit+0xca>
		{

			Local_enuErrorState = DIO_enuSetPinDirection( Copy_pstrSwitchs[Local_u8Iterator].SW_PortID ,
     986:	89 81       	ldd	r24, Y+1	; 0x01
     988:	28 2f       	mov	r18, r24
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	c9 01       	movw	r24, r18
     98e:	88 0f       	add	r24, r24
     990:	99 1f       	adc	r25, r25
     992:	28 0f       	add	r18, r24
     994:	39 1f       	adc	r19, r25
     996:	8b 81       	ldd	r24, Y+3	; 0x03
     998:	9c 81       	ldd	r25, Y+4	; 0x04
     99a:	fc 01       	movw	r30, r24
     99c:	e2 0f       	add	r30, r18
     99e:	f3 1f       	adc	r31, r19
     9a0:	40 81       	ld	r20, Z
     9a2:	89 81       	ldd	r24, Y+1	; 0x01
     9a4:	28 2f       	mov	r18, r24
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	c9 01       	movw	r24, r18
     9aa:	88 0f       	add	r24, r24
     9ac:	99 1f       	adc	r25, r25
     9ae:	28 0f       	add	r18, r24
     9b0:	39 1f       	adc	r19, r25
     9b2:	8b 81       	ldd	r24, Y+3	; 0x03
     9b4:	9c 81       	ldd	r25, Y+4	; 0x04
     9b6:	fc 01       	movw	r30, r24
     9b8:	e2 0f       	add	r30, r18
     9ba:	f3 1f       	adc	r31, r19
     9bc:	91 81       	ldd	r25, Z+1	; 0x01
     9be:	84 2f       	mov	r24, r20
     9c0:	69 2f       	mov	r22, r25
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	0e 94 99 01 	call	0x332	; 0x332 <DIO_enuSetPinDirection>
     9c8:	8a 83       	std	Y+2, r24	; 0x02
					Copy_pstrSwitchs[Local_u8Iterator].SW_PinID ,
					DIO_INPTU_PIN);

			Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrSwitchs[Local_u8Iterator].SW_PortID ,
     9ca:	89 81       	ldd	r24, Y+1	; 0x01
     9cc:	28 2f       	mov	r18, r24
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	c9 01       	movw	r24, r18
     9d2:	88 0f       	add	r24, r24
     9d4:	99 1f       	adc	r25, r25
     9d6:	28 0f       	add	r18, r24
     9d8:	39 1f       	adc	r19, r25
     9da:	8b 81       	ldd	r24, Y+3	; 0x03
     9dc:	9c 81       	ldd	r25, Y+4	; 0x04
     9de:	fc 01       	movw	r30, r24
     9e0:	e2 0f       	add	r30, r18
     9e2:	f3 1f       	adc	r31, r19
     9e4:	50 81       	ld	r21, Z
     9e6:	89 81       	ldd	r24, Y+1	; 0x01
     9e8:	28 2f       	mov	r18, r24
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	c9 01       	movw	r24, r18
     9ee:	88 0f       	add	r24, r24
     9f0:	99 1f       	adc	r25, r25
     9f2:	28 0f       	add	r18, r24
     9f4:	39 1f       	adc	r19, r25
     9f6:	8b 81       	ldd	r24, Y+3	; 0x03
     9f8:	9c 81       	ldd	r25, Y+4	; 0x04
     9fa:	fc 01       	movw	r30, r24
     9fc:	e2 0f       	add	r30, r18
     9fe:	f3 1f       	adc	r31, r19
     a00:	41 81       	ldd	r20, Z+1	; 0x01
     a02:	89 81       	ldd	r24, Y+1	; 0x01
     a04:	28 2f       	mov	r18, r24
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	c9 01       	movw	r24, r18
     a0a:	88 0f       	add	r24, r24
     a0c:	99 1f       	adc	r25, r25
     a0e:	28 0f       	add	r18, r24
     a10:	39 1f       	adc	r19, r25
     a12:	8b 81       	ldd	r24, Y+3	; 0x03
     a14:	9c 81       	ldd	r25, Y+4	; 0x04
     a16:	fc 01       	movw	r30, r24
     a18:	e2 0f       	add	r30, r18
     a1a:	f3 1f       	adc	r31, r19
     a1c:	92 81       	ldd	r25, Z+2	; 0x02
     a1e:	85 2f       	mov	r24, r21
     a20:	64 2f       	mov	r22, r20
     a22:	49 2f       	mov	r20, r25
     a24:	0e 94 90 02 	call	0x520	; 0x520 <DIO_enuSetPinValue>
     a28:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8Iterator ;

	if( Copy_pstrSwitchs != NULL   )
	{
		for (Local_u8Iterator = 0 ; Local_u8Iterator < SW_NUM ; Local_u8Iterator++ )
     a2a:	89 81       	ldd	r24, Y+1	; 0x01
     a2c:	8f 5f       	subi	r24, 0xFF	; 255
     a2e:	89 83       	std	Y+1, r24	; 0x01
     a30:	89 81       	ldd	r24, Y+1	; 0x01
     a32:	88 23       	and	r24, r24
     a34:	09 f4       	brne	.+2      	; 0xa38 <Switch_enuInit+0xd2>
     a36:	a7 cf       	rjmp	.-178    	; 0x986 <Switch_enuInit+0x20>
     a38:	02 c0       	rjmp	.+4      	; 0xa3e <Switch_enuInit+0xd8>

		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER ;
     a3a:	82 e0       	ldi	r24, 0x02	; 2
     a3c:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_enuErrorState ;
     a3e:	8a 81       	ldd	r24, Y+2	; 0x02
}//End of Switch_enuInit.
     a40:	0f 90       	pop	r0
     a42:	0f 90       	pop	r0
     a44:	0f 90       	pop	r0
     a46:	0f 90       	pop	r0
     a48:	cf 91       	pop	r28
     a4a:	df 91       	pop	r29
     a4c:	08 95       	ret

00000a4e <Switch_enuGetState>:
/*                                       .               .                 */
/*                                                                         */
/* Return          : Error state of type ES_t.                             */
/*..........................************************************************/
ES_t Switch_enuGetState(SW_t* Copy_pstrSwitchs , u8* Copy_pu8SwState)
{
     a4e:	df 93       	push	r29
     a50:	cf 93       	push	r28
     a52:	cd b7       	in	r28, 0x3d	; 61
     a54:	de b7       	in	r29, 0x3e	; 62
     a56:	27 97       	sbiw	r28, 0x07	; 7
     a58:	0f b6       	in	r0, 0x3f	; 63
     a5a:	f8 94       	cli
     a5c:	de bf       	out	0x3e, r29	; 62
     a5e:	0f be       	out	0x3f, r0	; 63
     a60:	cd bf       	out	0x3d, r28	; 61
     a62:	9d 83       	std	Y+5, r25	; 0x05
     a64:	8c 83       	std	Y+4, r24	; 0x04
     a66:	7f 83       	std	Y+7, r23	; 0x07
     a68:	6e 83       	std	Y+6, r22	; 0x06
	ES_t Local_enuErrorState = ES_NOK ;
     a6a:	1a 82       	std	Y+2, r1	; 0x02

	if( (Copy_pstrSwitchs != NULL) && (Copy_pu8SwState != NULL))
     a6c:	8c 81       	ldd	r24, Y+4	; 0x04
     a6e:	9d 81       	ldd	r25, Y+5	; 0x05
     a70:	00 97       	sbiw	r24, 0x00	; 0
     a72:	09 f4       	brne	.+2      	; 0xa76 <Switch_enuGetState+0x28>
     a74:	43 c0       	rjmp	.+134    	; 0xafc <Switch_enuGetState+0xae>
     a76:	8e 81       	ldd	r24, Y+6	; 0x06
     a78:	9f 81       	ldd	r25, Y+7	; 0x07
     a7a:	00 97       	sbiw	r24, 0x00	; 0
     a7c:	09 f4       	brne	.+2      	; 0xa80 <Switch_enuGetState+0x32>
     a7e:	3e c0       	rjmp	.+124    	; 0xafc <Switch_enuGetState+0xae>
	{
		u8 Local_u8Connection = Copy_pstrSwitchs->SW_Status ;
     a80:	ec 81       	ldd	r30, Y+4	; 0x04
     a82:	fd 81       	ldd	r31, Y+5	; 0x05
     a84:	82 81       	ldd	r24, Z+2	; 0x02
     a86:	89 83       	std	Y+1, r24	; 0x01
		u8 Local_u8SwPinread = 0;
     a88:	1b 82       	std	Y+3, r1	; 0x03

		if( Local_u8Connection == DIO_PULL_UP_PIN )
     a8a:	89 81       	ldd	r24, Y+1	; 0x01
     a8c:	81 30       	cpi	r24, 0x01	; 1
     a8e:	c9 f4       	brne	.+50     	; 0xac2 <Switch_enuGetState+0x74>
		{
			DIO_enuGetPinVlaue( Copy_pstrSwitchs->SW_PortID ,Copy_pstrSwitchs->SW_PinID , &Local_u8SwPinread);
     a90:	ec 81       	ldd	r30, Y+4	; 0x04
     a92:	fd 81       	ldd	r31, Y+5	; 0x05
     a94:	80 81       	ld	r24, Z
     a96:	ec 81       	ldd	r30, Y+4	; 0x04
     a98:	fd 81       	ldd	r31, Y+5	; 0x05
     a9a:	91 81       	ldd	r25, Z+1	; 0x01
     a9c:	9e 01       	movw	r18, r28
     a9e:	2d 5f       	subi	r18, 0xFD	; 253
     aa0:	3f 4f       	sbci	r19, 0xFF	; 255
     aa2:	69 2f       	mov	r22, r25
     aa4:	a9 01       	movw	r20, r18
     aa6:	0e 94 15 04 	call	0x82a	; 0x82a <DIO_enuGetPinVlaue>

			if ( Local_u8SwPinread )
     aaa:	8b 81       	ldd	r24, Y+3	; 0x03
     aac:	88 23       	and	r24, r24
     aae:	21 f0       	breq	.+8      	; 0xab8 <Switch_enuGetState+0x6a>
			{
				//released .
				*Copy_pu8SwState  =  SW_RELEASED ;
     ab0:	ee 81       	ldd	r30, Y+6	; 0x06
     ab2:	ff 81       	ldd	r31, Y+7	; 0x07
     ab4:	10 82       	st	Z, r1
     ab6:	1f c0       	rjmp	.+62     	; 0xaf6 <Switch_enuGetState+0xa8>
			}
			else
			{
				//pressed.
				*Copy_pu8SwState  =  SW_PRESSED ;
     ab8:	ee 81       	ldd	r30, Y+6	; 0x06
     aba:	ff 81       	ldd	r31, Y+7	; 0x07
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	80 83       	st	Z, r24
     ac0:	1a c0       	rjmp	.+52     	; 0xaf6 <Switch_enuGetState+0xa8>


		}
		else
		{
			DIO_enuGetPinVlaue( Copy_pstrSwitchs->SW_PortID ,Copy_pstrSwitchs->SW_PinID , &Local_u8SwPinread);
     ac2:	ec 81       	ldd	r30, Y+4	; 0x04
     ac4:	fd 81       	ldd	r31, Y+5	; 0x05
     ac6:	80 81       	ld	r24, Z
     ac8:	ec 81       	ldd	r30, Y+4	; 0x04
     aca:	fd 81       	ldd	r31, Y+5	; 0x05
     acc:	91 81       	ldd	r25, Z+1	; 0x01
     ace:	9e 01       	movw	r18, r28
     ad0:	2d 5f       	subi	r18, 0xFD	; 253
     ad2:	3f 4f       	sbci	r19, 0xFF	; 255
     ad4:	69 2f       	mov	r22, r25
     ad6:	a9 01       	movw	r20, r18
     ad8:	0e 94 15 04 	call	0x82a	; 0x82a <DIO_enuGetPinVlaue>

			if ( Local_u8SwPinread )
     adc:	8b 81       	ldd	r24, Y+3	; 0x03
     ade:	88 23       	and	r24, r24
     ae0:	29 f0       	breq	.+10     	; 0xaec <Switch_enuGetState+0x9e>
			{
				// pressed  .
				*Copy_pu8SwState  =  SW_PRESSED ;
     ae2:	ee 81       	ldd	r30, Y+6	; 0x06
     ae4:	ff 81       	ldd	r31, Y+7	; 0x07
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	80 83       	st	Z, r24
     aea:	03 c0       	rjmp	.+6      	; 0xaf2 <Switch_enuGetState+0xa4>
			}
			else
			{
				//released.
				*Copy_pu8SwState  =  SW_RELEASED ;
     aec:	ee 81       	ldd	r30, Y+6	; 0x06
     aee:	ff 81       	ldd	r31, Y+7	; 0x07
     af0:	10 82       	st	Z, r1
			}
			Local_enuErrorState = ES_OK ;
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	8a 83       	std	Y+2, r24	; 0x02

		}
		Local_enuErrorState = ES_OK;
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	8a 83       	std	Y+2, r24	; 0x02
     afa:	02 c0       	rjmp	.+4      	; 0xb00 <Switch_enuGetState+0xb2>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER ;
     afc:	82 e0       	ldi	r24, 0x02	; 2
     afe:	8a 83       	std	Y+2, r24	; 0x02
	}


	return Local_enuErrorState ;
     b00:	8a 81       	ldd	r24, Y+2	; 0x02
}//End of Swithc_enuGetState.
     b02:	27 96       	adiw	r28, 0x07	; 7
     b04:	0f b6       	in	r0, 0x3f	; 63
     b06:	f8 94       	cli
     b08:	de bf       	out	0x3e, r29	; 62
     b0a:	0f be       	out	0x3f, r0	; 63
     b0c:	cd bf       	out	0x3d, r28	; 61
     b0e:	cf 91       	pop	r28
     b10:	df 91       	pop	r29
     b12:	08 95       	ret

00000b14 <LED_enuInit>:
/* Description     : Utility function to initialize the array of Leds.      */
/* Argument        : Address array of type LED_t.                            */
/* Return          : Error state of type ES_t.                              */
/****************************************************************************/
ES_t LED_enuInit( LED_t* Copy_pstrLedConfig )
{
     b14:	df 93       	push	r29
     b16:	cf 93       	push	r28
     b18:	00 d0       	rcall	.+0      	; 0xb1a <LED_enuInit+0x6>
     b1a:	00 d0       	rcall	.+0      	; 0xb1c <LED_enuInit+0x8>
     b1c:	cd b7       	in	r28, 0x3d	; 61
     b1e:	de b7       	in	r29, 0x3e	; 62
     b20:	9c 83       	std	Y+4, r25	; 0x04
     b22:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK ;
     b24:	1a 82       	std	Y+2, r1	; 0x02

	if( Copy_pstrLedConfig !=NULL)
     b26:	8b 81       	ldd	r24, Y+3	; 0x03
     b28:	9c 81       	ldd	r25, Y+4	; 0x04
     b2a:	00 97       	sbiw	r24, 0x00	; 0
     b2c:	09 f4       	brne	.+2      	; 0xb30 <LED_enuInit+0x1c>
     b2e:	1b c1       	rjmp	.+566    	; 0xd66 <LED_enuInit+0x252>
	{
		u8 Local_u8Iterator = 0 ;
     b30:	19 82       	std	Y+1, r1	; 0x01

		for( Local_u8Iterator = 0 ; Local_u8Iterator  < LED_NUM ; Local_u8Iterator++)
     b32:	19 82       	std	Y+1, r1	; 0x01
     b34:	11 c1       	rjmp	.+546    	; 0xd58 <LED_enuInit+0x244>
		{
			Local_enuErrorState = DIO_enuSetPinDirection( Copy_pstrLedConfig[Local_u8Iterator].LED_PortID,
     b36:	89 81       	ldd	r24, Y+1	; 0x01
     b38:	88 2f       	mov	r24, r24
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	9c 01       	movw	r18, r24
     b3e:	22 0f       	add	r18, r18
     b40:	33 1f       	adc	r19, r19
     b42:	22 0f       	add	r18, r18
     b44:	33 1f       	adc	r19, r19
     b46:	8b 81       	ldd	r24, Y+3	; 0x03
     b48:	9c 81       	ldd	r25, Y+4	; 0x04
     b4a:	fc 01       	movw	r30, r24
     b4c:	e2 0f       	add	r30, r18
     b4e:	f3 1f       	adc	r31, r19
     b50:	40 81       	ld	r20, Z
     b52:	89 81       	ldd	r24, Y+1	; 0x01
     b54:	88 2f       	mov	r24, r24
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	9c 01       	movw	r18, r24
     b5a:	22 0f       	add	r18, r18
     b5c:	33 1f       	adc	r19, r19
     b5e:	22 0f       	add	r18, r18
     b60:	33 1f       	adc	r19, r19
     b62:	8b 81       	ldd	r24, Y+3	; 0x03
     b64:	9c 81       	ldd	r25, Y+4	; 0x04
     b66:	fc 01       	movw	r30, r24
     b68:	e2 0f       	add	r30, r18
     b6a:	f3 1f       	adc	r31, r19
     b6c:	91 81       	ldd	r25, Z+1	; 0x01
     b6e:	84 2f       	mov	r24, r20
     b70:	69 2f       	mov	r22, r25
     b72:	41 e0       	ldi	r20, 0x01	; 1
     b74:	0e 94 99 01 	call	0x332	; 0x332 <DIO_enuSetPinDirection>
     b78:	8a 83       	std	Y+2, r24	; 0x02
					Copy_pstrLedConfig[Local_u8Iterator].LED_PinID,
					DIO_OUTPUT_PIN);


			//LED_OFF Scenario Handling in tow Connection Cases  .
			if( Copy_pstrLedConfig[Local_u8Iterator].LED_Init_State == LED_OFF)
     b7a:	89 81       	ldd	r24, Y+1	; 0x01
     b7c:	88 2f       	mov	r24, r24
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	9c 01       	movw	r18, r24
     b82:	22 0f       	add	r18, r18
     b84:	33 1f       	adc	r19, r19
     b86:	22 0f       	add	r18, r18
     b88:	33 1f       	adc	r19, r19
     b8a:	8b 81       	ldd	r24, Y+3	; 0x03
     b8c:	9c 81       	ldd	r25, Y+4	; 0x04
     b8e:	fc 01       	movw	r30, r24
     b90:	e2 0f       	add	r30, r18
     b92:	f3 1f       	adc	r31, r19
     b94:	82 81       	ldd	r24, Z+2	; 0x02
     b96:	83 30       	cpi	r24, 0x03	; 3
     b98:	09 f0       	breq	.+2      	; 0xb9c <LED_enuInit+0x88>
     b9a:	65 c0       	rjmp	.+202    	; 0xc66 <LED_enuInit+0x152>
			{
				if(Copy_pstrLedConfig[Local_u8Iterator].LED_Connection_Style == LED_SINK )
     b9c:	89 81       	ldd	r24, Y+1	; 0x01
     b9e:	88 2f       	mov	r24, r24
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	9c 01       	movw	r18, r24
     ba4:	22 0f       	add	r18, r18
     ba6:	33 1f       	adc	r19, r19
     ba8:	22 0f       	add	r18, r18
     baa:	33 1f       	adc	r19, r19
     bac:	8b 81       	ldd	r24, Y+3	; 0x03
     bae:	9c 81       	ldd	r25, Y+4	; 0x04
     bb0:	fc 01       	movw	r30, r24
     bb2:	e2 0f       	add	r30, r18
     bb4:	f3 1f       	adc	r31, r19
     bb6:	83 81       	ldd	r24, Z+3	; 0x03
     bb8:	81 30       	cpi	r24, 0x01	; 1
     bba:	19 f5       	brne	.+70     	; 0xc02 <LED_enuInit+0xee>
				{
					Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedConfig[Local_u8Iterator].LED_PortID,
     bbc:	89 81       	ldd	r24, Y+1	; 0x01
     bbe:	88 2f       	mov	r24, r24
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	9c 01       	movw	r18, r24
     bc4:	22 0f       	add	r18, r18
     bc6:	33 1f       	adc	r19, r19
     bc8:	22 0f       	add	r18, r18
     bca:	33 1f       	adc	r19, r19
     bcc:	8b 81       	ldd	r24, Y+3	; 0x03
     bce:	9c 81       	ldd	r25, Y+4	; 0x04
     bd0:	fc 01       	movw	r30, r24
     bd2:	e2 0f       	add	r30, r18
     bd4:	f3 1f       	adc	r31, r19
     bd6:	40 81       	ld	r20, Z
     bd8:	89 81       	ldd	r24, Y+1	; 0x01
     bda:	88 2f       	mov	r24, r24
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	9c 01       	movw	r18, r24
     be0:	22 0f       	add	r18, r18
     be2:	33 1f       	adc	r19, r19
     be4:	22 0f       	add	r18, r18
     be6:	33 1f       	adc	r19, r19
     be8:	8b 81       	ldd	r24, Y+3	; 0x03
     bea:	9c 81       	ldd	r25, Y+4	; 0x04
     bec:	fc 01       	movw	r30, r24
     bee:	e2 0f       	add	r30, r18
     bf0:	f3 1f       	adc	r31, r19
     bf2:	91 81       	ldd	r25, Z+1	; 0x01
     bf4:	84 2f       	mov	r24, r20
     bf6:	69 2f       	mov	r22, r25
     bf8:	41 e0       	ldi	r20, 0x01	; 1
     bfa:	0e 94 90 02 	call	0x520	; 0x520 <DIO_enuSetPinValue>
     bfe:	8a 83       	std	Y+2, r24	; 0x02
     c00:	32 c0       	rjmp	.+100    	; 0xc66 <LED_enuInit+0x152>
							Copy_pstrLedConfig[Local_u8Iterator].LED_PinID,DIO_HIGH);
				}
				else if (Copy_pstrLedConfig[Local_u8Iterator].LED_Connection_Style == LED_SOURCE)
     c02:	89 81       	ldd	r24, Y+1	; 0x01
     c04:	88 2f       	mov	r24, r24
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	9c 01       	movw	r18, r24
     c0a:	22 0f       	add	r18, r18
     c0c:	33 1f       	adc	r19, r19
     c0e:	22 0f       	add	r18, r18
     c10:	33 1f       	adc	r19, r19
     c12:	8b 81       	ldd	r24, Y+3	; 0x03
     c14:	9c 81       	ldd	r25, Y+4	; 0x04
     c16:	fc 01       	movw	r30, r24
     c18:	e2 0f       	add	r30, r18
     c1a:	f3 1f       	adc	r31, r19
     c1c:	83 81       	ldd	r24, Z+3	; 0x03
     c1e:	82 30       	cpi	r24, 0x02	; 2
     c20:	11 f5       	brne	.+68     	; 0xc66 <LED_enuInit+0x152>
				{
					Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedConfig[Local_u8Iterator].LED_PortID,
     c22:	89 81       	ldd	r24, Y+1	; 0x01
     c24:	88 2f       	mov	r24, r24
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	9c 01       	movw	r18, r24
     c2a:	22 0f       	add	r18, r18
     c2c:	33 1f       	adc	r19, r19
     c2e:	22 0f       	add	r18, r18
     c30:	33 1f       	adc	r19, r19
     c32:	8b 81       	ldd	r24, Y+3	; 0x03
     c34:	9c 81       	ldd	r25, Y+4	; 0x04
     c36:	fc 01       	movw	r30, r24
     c38:	e2 0f       	add	r30, r18
     c3a:	f3 1f       	adc	r31, r19
     c3c:	40 81       	ld	r20, Z
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	88 2f       	mov	r24, r24
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	9c 01       	movw	r18, r24
     c46:	22 0f       	add	r18, r18
     c48:	33 1f       	adc	r19, r19
     c4a:	22 0f       	add	r18, r18
     c4c:	33 1f       	adc	r19, r19
     c4e:	8b 81       	ldd	r24, Y+3	; 0x03
     c50:	9c 81       	ldd	r25, Y+4	; 0x04
     c52:	fc 01       	movw	r30, r24
     c54:	e2 0f       	add	r30, r18
     c56:	f3 1f       	adc	r31, r19
     c58:	91 81       	ldd	r25, Z+1	; 0x01
     c5a:	84 2f       	mov	r24, r20
     c5c:	69 2f       	mov	r22, r25
     c5e:	40 e0       	ldi	r20, 0x00	; 0
     c60:	0e 94 90 02 	call	0x520	; 0x520 <DIO_enuSetPinValue>
     c64:	8a 83       	std	Y+2, r24	; 0x02
			{

			}

			//LED_ON Scenario Handling in tow Connection Cases  .
			if( Copy_pstrLedConfig[Local_u8Iterator].LED_Init_State == LED_ON)
     c66:	89 81       	ldd	r24, Y+1	; 0x01
     c68:	88 2f       	mov	r24, r24
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	9c 01       	movw	r18, r24
     c6e:	22 0f       	add	r18, r18
     c70:	33 1f       	adc	r19, r19
     c72:	22 0f       	add	r18, r18
     c74:	33 1f       	adc	r19, r19
     c76:	8b 81       	ldd	r24, Y+3	; 0x03
     c78:	9c 81       	ldd	r25, Y+4	; 0x04
     c7a:	fc 01       	movw	r30, r24
     c7c:	e2 0f       	add	r30, r18
     c7e:	f3 1f       	adc	r31, r19
     c80:	82 81       	ldd	r24, Z+2	; 0x02
     c82:	84 30       	cpi	r24, 0x04	; 4
     c84:	09 f0       	breq	.+2      	; 0xc88 <LED_enuInit+0x174>
     c86:	65 c0       	rjmp	.+202    	; 0xd52 <LED_enuInit+0x23e>
			{
				if(Copy_pstrLedConfig[Local_u8Iterator].LED_Connection_Style == LED_SINK )
     c88:	89 81       	ldd	r24, Y+1	; 0x01
     c8a:	88 2f       	mov	r24, r24
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	9c 01       	movw	r18, r24
     c90:	22 0f       	add	r18, r18
     c92:	33 1f       	adc	r19, r19
     c94:	22 0f       	add	r18, r18
     c96:	33 1f       	adc	r19, r19
     c98:	8b 81       	ldd	r24, Y+3	; 0x03
     c9a:	9c 81       	ldd	r25, Y+4	; 0x04
     c9c:	fc 01       	movw	r30, r24
     c9e:	e2 0f       	add	r30, r18
     ca0:	f3 1f       	adc	r31, r19
     ca2:	83 81       	ldd	r24, Z+3	; 0x03
     ca4:	81 30       	cpi	r24, 0x01	; 1
     ca6:	19 f5       	brne	.+70     	; 0xcee <LED_enuInit+0x1da>
				{
					Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedConfig[Local_u8Iterator].LED_PortID,
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	88 2f       	mov	r24, r24
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	9c 01       	movw	r18, r24
     cb0:	22 0f       	add	r18, r18
     cb2:	33 1f       	adc	r19, r19
     cb4:	22 0f       	add	r18, r18
     cb6:	33 1f       	adc	r19, r19
     cb8:	8b 81       	ldd	r24, Y+3	; 0x03
     cba:	9c 81       	ldd	r25, Y+4	; 0x04
     cbc:	fc 01       	movw	r30, r24
     cbe:	e2 0f       	add	r30, r18
     cc0:	f3 1f       	adc	r31, r19
     cc2:	40 81       	ld	r20, Z
     cc4:	89 81       	ldd	r24, Y+1	; 0x01
     cc6:	88 2f       	mov	r24, r24
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	9c 01       	movw	r18, r24
     ccc:	22 0f       	add	r18, r18
     cce:	33 1f       	adc	r19, r19
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	8b 81       	ldd	r24, Y+3	; 0x03
     cd6:	9c 81       	ldd	r25, Y+4	; 0x04
     cd8:	fc 01       	movw	r30, r24
     cda:	e2 0f       	add	r30, r18
     cdc:	f3 1f       	adc	r31, r19
     cde:	91 81       	ldd	r25, Z+1	; 0x01
     ce0:	84 2f       	mov	r24, r20
     ce2:	69 2f       	mov	r22, r25
     ce4:	40 e0       	ldi	r20, 0x00	; 0
     ce6:	0e 94 90 02 	call	0x520	; 0x520 <DIO_enuSetPinValue>
     cea:	8a 83       	std	Y+2, r24	; 0x02
     cec:	32 c0       	rjmp	.+100    	; 0xd52 <LED_enuInit+0x23e>
							Copy_pstrLedConfig[Local_u8Iterator].LED_PinID,DIO_LOW);
				}
				else if (Copy_pstrLedConfig[Local_u8Iterator].LED_Connection_Style == LED_SOURCE)
     cee:	89 81       	ldd	r24, Y+1	; 0x01
     cf0:	88 2f       	mov	r24, r24
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	9c 01       	movw	r18, r24
     cf6:	22 0f       	add	r18, r18
     cf8:	33 1f       	adc	r19, r19
     cfa:	22 0f       	add	r18, r18
     cfc:	33 1f       	adc	r19, r19
     cfe:	8b 81       	ldd	r24, Y+3	; 0x03
     d00:	9c 81       	ldd	r25, Y+4	; 0x04
     d02:	fc 01       	movw	r30, r24
     d04:	e2 0f       	add	r30, r18
     d06:	f3 1f       	adc	r31, r19
     d08:	83 81       	ldd	r24, Z+3	; 0x03
     d0a:	82 30       	cpi	r24, 0x02	; 2
     d0c:	11 f5       	brne	.+68     	; 0xd52 <LED_enuInit+0x23e>
				{
					Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedConfig[Local_u8Iterator].LED_PortID,
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
     d10:	88 2f       	mov	r24, r24
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	9c 01       	movw	r18, r24
     d16:	22 0f       	add	r18, r18
     d18:	33 1f       	adc	r19, r19
     d1a:	22 0f       	add	r18, r18
     d1c:	33 1f       	adc	r19, r19
     d1e:	8b 81       	ldd	r24, Y+3	; 0x03
     d20:	9c 81       	ldd	r25, Y+4	; 0x04
     d22:	fc 01       	movw	r30, r24
     d24:	e2 0f       	add	r30, r18
     d26:	f3 1f       	adc	r31, r19
     d28:	40 81       	ld	r20, Z
     d2a:	89 81       	ldd	r24, Y+1	; 0x01
     d2c:	88 2f       	mov	r24, r24
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	9c 01       	movw	r18, r24
     d32:	22 0f       	add	r18, r18
     d34:	33 1f       	adc	r19, r19
     d36:	22 0f       	add	r18, r18
     d38:	33 1f       	adc	r19, r19
     d3a:	8b 81       	ldd	r24, Y+3	; 0x03
     d3c:	9c 81       	ldd	r25, Y+4	; 0x04
     d3e:	fc 01       	movw	r30, r24
     d40:	e2 0f       	add	r30, r18
     d42:	f3 1f       	adc	r31, r19
     d44:	91 81       	ldd	r25, Z+1	; 0x01
     d46:	84 2f       	mov	r24, r20
     d48:	69 2f       	mov	r22, r25
     d4a:	41 e0       	ldi	r20, 0x01	; 1
     d4c:	0e 94 90 02 	call	0x520	; 0x520 <DIO_enuSetPinValue>
     d50:	8a 83       	std	Y+2, r24	; 0x02

	if( Copy_pstrLedConfig !=NULL)
	{
		u8 Local_u8Iterator = 0 ;

		for( Local_u8Iterator = 0 ; Local_u8Iterator  < LED_NUM ; Local_u8Iterator++)
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	8f 5f       	subi	r24, 0xFF	; 255
     d56:	89 83       	std	Y+1, r24	; 0x01
     d58:	89 81       	ldd	r24, Y+1	; 0x01
     d5a:	88 23       	and	r24, r24
     d5c:	09 f4       	brne	.+2      	; 0xd60 <LED_enuInit+0x24c>
     d5e:	eb ce       	rjmp	.-554    	; 0xb36 <LED_enuInit+0x22>

			}

		}

		Local_enuErrorState = ES_OK;
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	8a 83       	std	Y+2, r24	; 0x02
     d64:	02 c0       	rjmp	.+4      	; 0xd6a <LED_enuInit+0x256>

	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
     d66:	82 e0       	ldi	r24, 0x02	; 2
     d68:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_enuErrorState;
     d6a:	8a 81       	ldd	r24, Y+2	; 0x02
}//End ofLED_enuInit.
     d6c:	0f 90       	pop	r0
     d6e:	0f 90       	pop	r0
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
     d74:	cf 91       	pop	r28
     d76:	df 91       	pop	r29
     d78:	08 95       	ret

00000d7a <LED_enuLedON>:



ES_t LED_enuLedON( LED_t* Copy_pstrLedConfig )
{
     d7a:	df 93       	push	r29
     d7c:	cf 93       	push	r28
     d7e:	00 d0       	rcall	.+0      	; 0xd80 <LED_enuLedON+0x6>
     d80:	0f 92       	push	r0
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
     d86:	9b 83       	std	Y+3, r25	; 0x03
     d88:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK ;
     d8a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pstrLedConfig != NULL )
     d8c:	8a 81       	ldd	r24, Y+2	; 0x02
     d8e:	9b 81       	ldd	r25, Y+3	; 0x03
     d90:	00 97       	sbiw	r24, 0x00	; 0
     d92:	11 f1       	breq	.+68     	; 0xdd8 <LED_enuLedON+0x5e>
	{
		if(Copy_pstrLedConfig->LED_Connection_Style == LED_SINK)
     d94:	ea 81       	ldd	r30, Y+2	; 0x02
     d96:	fb 81       	ldd	r31, Y+3	; 0x03
     d98:	83 81       	ldd	r24, Z+3	; 0x03
     d9a:	81 30       	cpi	r24, 0x01	; 1
     d9c:	61 f4       	brne	.+24     	; 0xdb6 <LED_enuLedON+0x3c>
		{
			Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedConfig->LED_PortID,
     d9e:	ea 81       	ldd	r30, Y+2	; 0x02
     da0:	fb 81       	ldd	r31, Y+3	; 0x03
     da2:	80 81       	ld	r24, Z
     da4:	ea 81       	ldd	r30, Y+2	; 0x02
     da6:	fb 81       	ldd	r31, Y+3	; 0x03
     da8:	91 81       	ldd	r25, Z+1	; 0x01
     daa:	69 2f       	mov	r22, r25
     dac:	40 e0       	ldi	r20, 0x00	; 0
     dae:	0e 94 90 02 	call	0x520	; 0x520 <DIO_enuSetPinValue>
     db2:	89 83       	std	Y+1, r24	; 0x01
     db4:	13 c0       	rjmp	.+38     	; 0xddc <LED_enuLedON+0x62>
					Copy_pstrLedConfig->LED_PinID,DIO_LOW);

		}
		else if ( Copy_pstrLedConfig->LED_Connection_Style == LED_SOURCE )
     db6:	ea 81       	ldd	r30, Y+2	; 0x02
     db8:	fb 81       	ldd	r31, Y+3	; 0x03
     dba:	83 81       	ldd	r24, Z+3	; 0x03
     dbc:	82 30       	cpi	r24, 0x02	; 2
     dbe:	71 f4       	brne	.+28     	; 0xddc <LED_enuLedON+0x62>
		{
			Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedConfig->LED_PortID,
     dc0:	ea 81       	ldd	r30, Y+2	; 0x02
     dc2:	fb 81       	ldd	r31, Y+3	; 0x03
     dc4:	80 81       	ld	r24, Z
     dc6:	ea 81       	ldd	r30, Y+2	; 0x02
     dc8:	fb 81       	ldd	r31, Y+3	; 0x03
     dca:	91 81       	ldd	r25, Z+1	; 0x01
     dcc:	69 2f       	mov	r22, r25
     dce:	41 e0       	ldi	r20, 0x01	; 1
     dd0:	0e 94 90 02 	call	0x520	; 0x520 <DIO_enuSetPinValue>
     dd4:	89 83       	std	Y+1, r24	; 0x01
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <LED_enuLedON+0x62>
		}

	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
     dd8:	82 e0       	ldi	r24, 0x02	; 2
     dda:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
     ddc:	89 81       	ldd	r24, Y+1	; 0x01
}//End of LED_enuLedON.
     dde:	0f 90       	pop	r0
     de0:	0f 90       	pop	r0
     de2:	0f 90       	pop	r0
     de4:	cf 91       	pop	r28
     de6:	df 91       	pop	r29
     de8:	08 95       	ret

00000dea <LED_enuLedOFF>:


ES_t LED_enuLedOFF( LED_t* Copy_pstrLedConfig )
{
     dea:	df 93       	push	r29
     dec:	cf 93       	push	r28
     dee:	00 d0       	rcall	.+0      	; 0xdf0 <LED_enuLedOFF+0x6>
     df0:	0f 92       	push	r0
     df2:	cd b7       	in	r28, 0x3d	; 61
     df4:	de b7       	in	r29, 0x3e	; 62
     df6:	9b 83       	std	Y+3, r25	; 0x03
     df8:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK ;
     dfa:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pstrLedConfig != NULL )
     dfc:	8a 81       	ldd	r24, Y+2	; 0x02
     dfe:	9b 81       	ldd	r25, Y+3	; 0x03
     e00:	00 97       	sbiw	r24, 0x00	; 0
     e02:	11 f1       	breq	.+68     	; 0xe48 <LED_enuLedOFF+0x5e>
	{
		if(Copy_pstrLedConfig->LED_Connection_Style == LED_SINK)
     e04:	ea 81       	ldd	r30, Y+2	; 0x02
     e06:	fb 81       	ldd	r31, Y+3	; 0x03
     e08:	83 81       	ldd	r24, Z+3	; 0x03
     e0a:	81 30       	cpi	r24, 0x01	; 1
     e0c:	61 f4       	brne	.+24     	; 0xe26 <LED_enuLedOFF+0x3c>
		{
			Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedConfig->LED_PortID,
     e0e:	ea 81       	ldd	r30, Y+2	; 0x02
     e10:	fb 81       	ldd	r31, Y+3	; 0x03
     e12:	80 81       	ld	r24, Z
     e14:	ea 81       	ldd	r30, Y+2	; 0x02
     e16:	fb 81       	ldd	r31, Y+3	; 0x03
     e18:	91 81       	ldd	r25, Z+1	; 0x01
     e1a:	69 2f       	mov	r22, r25
     e1c:	41 e0       	ldi	r20, 0x01	; 1
     e1e:	0e 94 90 02 	call	0x520	; 0x520 <DIO_enuSetPinValue>
     e22:	89 83       	std	Y+1, r24	; 0x01
     e24:	13 c0       	rjmp	.+38     	; 0xe4c <LED_enuLedOFF+0x62>
					Copy_pstrLedConfig->LED_PinID,DIO_HIGH);

		}
		else if ( Copy_pstrLedConfig->LED_Connection_Style == LED_SOURCE )
     e26:	ea 81       	ldd	r30, Y+2	; 0x02
     e28:	fb 81       	ldd	r31, Y+3	; 0x03
     e2a:	83 81       	ldd	r24, Z+3	; 0x03
     e2c:	82 30       	cpi	r24, 0x02	; 2
     e2e:	71 f4       	brne	.+28     	; 0xe4c <LED_enuLedOFF+0x62>
		{
			Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedConfig->LED_PortID,
     e30:	ea 81       	ldd	r30, Y+2	; 0x02
     e32:	fb 81       	ldd	r31, Y+3	; 0x03
     e34:	80 81       	ld	r24, Z
     e36:	ea 81       	ldd	r30, Y+2	; 0x02
     e38:	fb 81       	ldd	r31, Y+3	; 0x03
     e3a:	91 81       	ldd	r25, Z+1	; 0x01
     e3c:	69 2f       	mov	r22, r25
     e3e:	40 e0       	ldi	r20, 0x00	; 0
     e40:	0e 94 90 02 	call	0x520	; 0x520 <DIO_enuSetPinValue>
     e44:	89 83       	std	Y+1, r24	; 0x01
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <LED_enuLedOFF+0x62>
		}

	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
     e48:	82 e0       	ldi	r24, 0x02	; 2
     e4a:	89 83       	std	Y+1, r24	; 0x01
	}



	return Local_enuErrorState;
     e4c:	89 81       	ldd	r24, Y+1	; 0x01
}//End of LED_enuLedOFF.
     e4e:	0f 90       	pop	r0
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
     e54:	cf 91       	pop	r28
     e56:	df 91       	pop	r29
     e58:	08 95       	ret

00000e5a <LED_enuLedGetState>:
/*                                       .               .                 */
/*                                                                         */
/* Return          : Error state of type ES_t.                             */
/***************************************************************************/
ES_t LED_enuLedGetState(LED_t* Copy_pstrLedConfig ,u8* Copy_pu8LedState )
{
     e5a:	df 93       	push	r29
     e5c:	cf 93       	push	r28
     e5e:	00 d0       	rcall	.+0      	; 0xe60 <LED_enuLedGetState+0x6>
     e60:	00 d0       	rcall	.+0      	; 0xe62 <LED_enuLedGetState+0x8>
     e62:	00 d0       	rcall	.+0      	; 0xe64 <LED_enuLedGetState+0xa>
     e64:	cd b7       	in	r28, 0x3d	; 61
     e66:	de b7       	in	r29, 0x3e	; 62
     e68:	9c 83       	std	Y+4, r25	; 0x04
     e6a:	8b 83       	std	Y+3, r24	; 0x03
     e6c:	7e 83       	std	Y+6, r23	; 0x06
     e6e:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrorState = ES_NOK ;
     e70:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_pstrLedConfig != NULL )
     e72:	8b 81       	ldd	r24, Y+3	; 0x03
     e74:	9c 81       	ldd	r25, Y+4	; 0x04
     e76:	00 97       	sbiw	r24, 0x00	; 0
     e78:	09 f4       	brne	.+2      	; 0xe7c <LED_enuLedGetState+0x22>
     e7a:	47 c0       	rjmp	.+142    	; 0xf0a <LED_enuLedGetState+0xb0>
	{
		u8 Local_u8LedState = 0 ;
     e7c:	1a 82       	std	Y+2, r1	; 0x02
		if(Copy_pstrLedConfig->LED_Connection_Style == LED_SINK)
     e7e:	eb 81       	ldd	r30, Y+3	; 0x03
     e80:	fc 81       	ldd	r31, Y+4	; 0x04
     e82:	83 81       	ldd	r24, Z+3	; 0x03
     e84:	81 30       	cpi	r24, 0x01	; 1
     e86:	f1 f4       	brne	.+60     	; 0xec4 <LED_enuLedGetState+0x6a>
		{

			Local_enuErrorState = DIO_enuGetPinVlaue( Copy_pstrLedConfig->LED_PortID,Copy_pstrLedConfig->LED_PinID,&Local_u8LedState);
     e88:	eb 81       	ldd	r30, Y+3	; 0x03
     e8a:	fc 81       	ldd	r31, Y+4	; 0x04
     e8c:	80 81       	ld	r24, Z
     e8e:	eb 81       	ldd	r30, Y+3	; 0x03
     e90:	fc 81       	ldd	r31, Y+4	; 0x04
     e92:	91 81       	ldd	r25, Z+1	; 0x01
     e94:	9e 01       	movw	r18, r28
     e96:	2e 5f       	subi	r18, 0xFE	; 254
     e98:	3f 4f       	sbci	r19, 0xFF	; 255
     e9a:	69 2f       	mov	r22, r25
     e9c:	a9 01       	movw	r20, r18
     e9e:	0e 94 15 04 	call	0x82a	; 0x82a <DIO_enuGetPinVlaue>
     ea2:	89 83       	std	Y+1, r24	; 0x01

			if ( !Local_u8LedState )
     ea4:	8a 81       	ldd	r24, Y+2	; 0x02
     ea6:	88 23       	and	r24, r24
     ea8:	29 f4       	brne	.+10     	; 0xeb4 <LED_enuLedGetState+0x5a>
			{
				//LED ON
				*Copy_pu8LedState = LED_ON;
     eaa:	ed 81       	ldd	r30, Y+5	; 0x05
     eac:	fe 81       	ldd	r31, Y+6	; 0x06
     eae:	84 e0       	ldi	r24, 0x04	; 4
     eb0:	80 83       	st	Z, r24
     eb2:	2d c0       	rjmp	.+90     	; 0xf0e <LED_enuLedGetState+0xb4>
			}
			else if (Local_u8LedState)
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	88 23       	and	r24, r24
     eb8:	51 f1       	breq	.+84     	; 0xf0e <LED_enuLedGetState+0xb4>
			{
				//LED OFF
				*Copy_pu8LedState = LED_OFF;
     eba:	ed 81       	ldd	r30, Y+5	; 0x05
     ebc:	fe 81       	ldd	r31, Y+6	; 0x06
     ebe:	83 e0       	ldi	r24, 0x03	; 3
     ec0:	80 83       	st	Z, r24
     ec2:	25 c0       	rjmp	.+74     	; 0xf0e <LED_enuLedGetState+0xb4>
			{

			}

		}
		else if ( Copy_pstrLedConfig->LED_Connection_Style == LED_SOURCE )
     ec4:	eb 81       	ldd	r30, Y+3	; 0x03
     ec6:	fc 81       	ldd	r31, Y+4	; 0x04
     ec8:	83 81       	ldd	r24, Z+3	; 0x03
     eca:	82 30       	cpi	r24, 0x02	; 2
     ecc:	01 f5       	brne	.+64     	; 0xf0e <LED_enuLedGetState+0xb4>
		{
			Local_enuErrorState = DIO_enuGetPinVlaue( Copy_pstrLedConfig->LED_PortID,Copy_pstrLedConfig->LED_PinID,&Local_u8LedState);
     ece:	eb 81       	ldd	r30, Y+3	; 0x03
     ed0:	fc 81       	ldd	r31, Y+4	; 0x04
     ed2:	80 81       	ld	r24, Z
     ed4:	eb 81       	ldd	r30, Y+3	; 0x03
     ed6:	fc 81       	ldd	r31, Y+4	; 0x04
     ed8:	91 81       	ldd	r25, Z+1	; 0x01
     eda:	9e 01       	movw	r18, r28
     edc:	2e 5f       	subi	r18, 0xFE	; 254
     ede:	3f 4f       	sbci	r19, 0xFF	; 255
     ee0:	69 2f       	mov	r22, r25
     ee2:	a9 01       	movw	r20, r18
     ee4:	0e 94 15 04 	call	0x82a	; 0x82a <DIO_enuGetPinVlaue>
     ee8:	89 83       	std	Y+1, r24	; 0x01

			if ( !Local_u8LedState )
     eea:	8a 81       	ldd	r24, Y+2	; 0x02
     eec:	88 23       	and	r24, r24
     eee:	29 f4       	brne	.+10     	; 0xefa <LED_enuLedGetState+0xa0>
			{
				//LED ON
				*Copy_pu8LedState = LED_OFF;
     ef0:	ed 81       	ldd	r30, Y+5	; 0x05
     ef2:	fe 81       	ldd	r31, Y+6	; 0x06
     ef4:	83 e0       	ldi	r24, 0x03	; 3
     ef6:	80 83       	st	Z, r24
     ef8:	0a c0       	rjmp	.+20     	; 0xf0e <LED_enuLedGetState+0xb4>
			}
			else if (Local_u8LedState)
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	88 23       	and	r24, r24
     efe:	39 f0       	breq	.+14     	; 0xf0e <LED_enuLedGetState+0xb4>
			{
				//LED OFF
				*Copy_pu8LedState = LED_ON;
     f00:	ed 81       	ldd	r30, Y+5	; 0x05
     f02:	fe 81       	ldd	r31, Y+6	; 0x06
     f04:	84 e0       	ldi	r24, 0x04	; 4
     f06:	80 83       	st	Z, r24
     f08:	02 c0       	rjmp	.+4      	; 0xf0e <LED_enuLedGetState+0xb4>
		}

	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
     f0a:	82 e0       	ldi	r24, 0x02	; 2
     f0c:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
}//End of LED_enuLedGetState.
     f10:	26 96       	adiw	r28, 0x06	; 6
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	f8 94       	cli
     f16:	de bf       	out	0x3e, r29	; 62
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	cd bf       	out	0x3d, r28	; 61
     f1c:	cf 91       	pop	r28
     f1e:	df 91       	pop	r29
     f20:	08 95       	ret

00000f22 <LED_enuLedToggle>:
/*                                      .                      .           */
/*                                                                         */
/* Return          : Error state of type ES_t.                             */
/****..................*****************************************************/
ES_t LED_enuLedToggle(LED_t* Copy_pstrLedConfig  )
{
     f22:	df 93       	push	r29
     f24:	cf 93       	push	r28
     f26:	00 d0       	rcall	.+0      	; 0xf28 <LED_enuLedToggle+0x6>
     f28:	0f 92       	push	r0
     f2a:	cd b7       	in	r28, 0x3d	; 61
     f2c:	de b7       	in	r29, 0x3e	; 62
     f2e:	9b 83       	std	Y+3, r25	; 0x03
     f30:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK ;
     f32:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pstrLedConfig != NULL )
     f34:	8a 81       	ldd	r24, Y+2	; 0x02
     f36:	9b 81       	ldd	r25, Y+3	; 0x03
     f38:	00 97       	sbiw	r24, 0x00	; 0
     f3a:	59 f0       	breq	.+22     	; 0xf52 <LED_enuLedToggle+0x30>
	{

		Local_enuErrorState =DIO_enuToggelPin( Copy_pstrLedConfig->LED_PortID , Copy_pstrLedConfig->LED_PinID );
     f3c:	ea 81       	ldd	r30, Y+2	; 0x02
     f3e:	fb 81       	ldd	r31, Y+3	; 0x03
     f40:	80 81       	ld	r24, Z
     f42:	ea 81       	ldd	r30, Y+2	; 0x02
     f44:	fb 81       	ldd	r31, Y+3	; 0x03
     f46:	91 81       	ldd	r25, Z+1	; 0x01
     f48:	69 2f       	mov	r22, r25
     f4a:	0e 94 87 03 	call	0x70e	; 0x70e <DIO_enuToggelPin>
     f4e:	89 83       	std	Y+1, r24	; 0x01
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <LED_enuLedToggle+0x34>

	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
     f52:	82 e0       	ldi	r24, 0x02	; 2
     f54:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
     f56:	89 81       	ldd	r24, Y+1	; 0x01
}
     f58:	0f 90       	pop	r0
     f5a:	0f 90       	pop	r0
     f5c:	0f 90       	pop	r0
     f5e:	cf 91       	pop	r28
     f60:	df 91       	pop	r29
     f62:	08 95       	ret

00000f64 <EXTI_enuInit>:
/* Description     : Utility function to initialize the Enabled interrupts. */
/* Argument        : Address array of interrupts .                          */
/* Return          : Error state of type ES_t.                              */
/**............................................******************************/
ES_t   EXTI_enuInit( EXTI_t*  Cpy_pstrEXTICnfg )
{
     f64:	df 93       	push	r29
     f66:	cf 93       	push	r28
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
     f6c:	2c 97       	sbiw	r28, 0x0c	; 12
     f6e:	0f b6       	in	r0, 0x3f	; 63
     f70:	f8 94       	cli
     f72:	de bf       	out	0x3e, r29	; 62
     f74:	0f be       	out	0x3f, r0	; 63
     f76:	cd bf       	out	0x3d, r28	; 61
     f78:	9c 83       	std	Y+4, r25	; 0x04
     f7a:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK ;
     f7c:	1a 82       	std	Y+2, r1	; 0x02


	if( Cpy_pstrEXTICnfg != NULL )
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	9c 81       	ldd	r25, Y+4	; 0x04
     f82:	00 97       	sbiw	r24, 0x00	; 0
     f84:	09 f4       	brne	.+2      	; 0xf88 <EXTI_enuInit+0x24>
     f86:	0c c1       	rjmp	.+536    	; 0x11a0 <EXTI_enuInit+0x23c>
	{
		u8 Local_u8Iterator = 0;
     f88:	19 82       	std	Y+1, r1	; 0x01

		for( Local_u8Iterator = 0 ; Local_u8Iterator < EXTI_NUM ; Local_u8Iterator++ )
     f8a:	19 82       	std	Y+1, r1	; 0x01
     f8c:	04 c1       	rjmp	.+520    	; 0x1196 <EXTI_enuInit+0x232>
		{

			if( Cpy_pstrEXTICnfg[Local_u8Iterator].EXTI_u8State == EXTI_ACTIVE )
     f8e:	89 81       	ldd	r24, Y+1	; 0x01
     f90:	88 2f       	mov	r24, r24
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	9c 01       	movw	r18, r24
     f96:	22 0f       	add	r18, r18
     f98:	33 1f       	adc	r19, r19
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	9c 81       	ldd	r25, Y+4	; 0x04
     f9e:	fc 01       	movw	r30, r24
     fa0:	e2 0f       	add	r30, r18
     fa2:	f3 1f       	adc	r31, r19
     fa4:	80 81       	ld	r24, Z
     fa6:	81 30       	cpi	r24, 0x01	; 1
     fa8:	09 f0       	breq	.+2      	; 0xfac <EXTI_enuInit+0x48>
     faa:	f2 c0       	rjmp	.+484    	; 0x1190 <EXTI_enuInit+0x22c>
			{
				// Enable the appropriate interrupt in each iteration.
				switch(Local_u8Iterator)
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	3c 87       	std	Y+12, r19	; 0x0c
     fb4:	2b 87       	std	Y+11, r18	; 0x0b
     fb6:	8b 85       	ldd	r24, Y+11	; 0x0b
     fb8:	9c 85       	ldd	r25, Y+12	; 0x0c
     fba:	81 30       	cpi	r24, 0x01	; 1
     fbc:	91 05       	cpc	r25, r1
     fbe:	09 f4       	brne	.+2      	; 0xfc2 <EXTI_enuInit+0x5e>
     fc0:	5e c0       	rjmp	.+188    	; 0x107e <EXTI_enuInit+0x11a>
     fc2:	2b 85       	ldd	r18, Y+11	; 0x0b
     fc4:	3c 85       	ldd	r19, Y+12	; 0x0c
     fc6:	22 30       	cpi	r18, 0x02	; 2
     fc8:	31 05       	cpc	r19, r1
     fca:	09 f4       	brne	.+2      	; 0xfce <EXTI_enuInit+0x6a>
     fcc:	ab c0       	rjmp	.+342    	; 0x1124 <EXTI_enuInit+0x1c0>
     fce:	8b 85       	ldd	r24, Y+11	; 0x0b
     fd0:	9c 85       	ldd	r25, Y+12	; 0x0c
     fd2:	00 97       	sbiw	r24, 0x00	; 0
     fd4:	09 f0       	breq	.+2      	; 0xfd8 <EXTI_enuInit+0x74>
     fd6:	d9 c0       	rjmp	.+434    	; 0x118a <EXTI_enuInit+0x226>

				/*********************************************************
				 * Configure the interrupt0 and Handling it's cases.     *
				 *********************************************************/
				case EXTI0 :
					MCUCR  &= ~( (EXTI_MASK_BIT<<ISC00) | (EXTI_MASK_BIT<<ISC01) );
     fd8:	a5 e5       	ldi	r26, 0x55	; 85
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	e5 e5       	ldi	r30, 0x55	; 85
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	8c 7f       	andi	r24, 0xFC	; 252
     fe4:	8c 93       	st	X, r24

					switch(Cpy_pstrEXTICnfg[Local_u8Iterator].EXTI_u8SenceLevel)
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
     fe8:	88 2f       	mov	r24, r24
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	9c 01       	movw	r18, r24
     fee:	22 0f       	add	r18, r18
     ff0:	33 1f       	adc	r19, r19
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	9c 81       	ldd	r25, Y+4	; 0x04
     ff6:	fc 01       	movw	r30, r24
     ff8:	e2 0f       	add	r30, r18
     ffa:	f3 1f       	adc	r31, r19
     ffc:	81 81       	ldd	r24, Z+1	; 0x01
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	3a 87       	std	Y+10, r19	; 0x0a
    1004:	29 87       	std	Y+9, r18	; 0x09
    1006:	89 85       	ldd	r24, Y+9	; 0x09
    1008:	9a 85       	ldd	r25, Y+10	; 0x0a
    100a:	81 30       	cpi	r24, 0x01	; 1
    100c:	91 05       	cpc	r25, r1
    100e:	e9 f0       	breq	.+58     	; 0x104a <EXTI_enuInit+0xe6>
    1010:	29 85       	ldd	r18, Y+9	; 0x09
    1012:	3a 85       	ldd	r19, Y+10	; 0x0a
    1014:	22 30       	cpi	r18, 0x02	; 2
    1016:	31 05       	cpc	r19, r1
    1018:	2c f4       	brge	.+10     	; 0x1024 <EXTI_enuInit+0xc0>
    101a:	89 85       	ldd	r24, Y+9	; 0x09
    101c:	9a 85       	ldd	r25, Y+10	; 0x0a
    101e:	00 97       	sbiw	r24, 0x00	; 0
    1020:	61 f0       	breq	.+24     	; 0x103a <EXTI_enuInit+0xd6>
    1022:	23 c0       	rjmp	.+70     	; 0x106a <EXTI_enuInit+0x106>
    1024:	29 85       	ldd	r18, Y+9	; 0x09
    1026:	3a 85       	ldd	r19, Y+10	; 0x0a
    1028:	22 30       	cpi	r18, 0x02	; 2
    102a:	31 05       	cpc	r19, r1
    102c:	b1 f0       	breq	.+44     	; 0x105a <EXTI_enuInit+0xf6>
    102e:	89 85       	ldd	r24, Y+9	; 0x09
    1030:	9a 85       	ldd	r25, Y+10	; 0x0a
    1032:	83 30       	cpi	r24, 0x03	; 3
    1034:	91 05       	cpc	r25, r1
    1036:	d9 f0       	breq	.+54     	; 0x106e <EXTI_enuInit+0x10a>
    1038:	18 c0       	rjmp	.+48     	; 0x106a <EXTI_enuInit+0x106>
					{
					case EXTI_RISING_EDGE :
						MCUCR   |= (EXTI_MASK_BIT<<ISC00 )|(EXTI_MASK_BIT<<ISC01 );
    103a:	a5 e5       	ldi	r26, 0x55	; 85
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	e5 e5       	ldi	r30, 0x55	; 85
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	83 60       	ori	r24, 0x03	; 3
    1046:	8c 93       	st	X, r24
    1048:	12 c0       	rjmp	.+36     	; 0x106e <EXTI_enuInit+0x10a>
						break;

					case EXTI_FALLING_EDGE :
						MCUCR   |=  (EXTI_MASK_BIT<<ISC01 );
    104a:	a5 e5       	ldi	r26, 0x55	; 85
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e5 e5       	ldi	r30, 0x55	; 85
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	82 60       	ori	r24, 0x02	; 2
    1056:	8c 93       	st	X, r24
    1058:	0a c0       	rjmp	.+20     	; 0x106e <EXTI_enuInit+0x10a>
						break;

					case  EXTI_LOGIC_CHANGE:
						MCUCR   |=  (EXTI_MASK_BIT<<ISC00 );
    105a:	a5 e5       	ldi	r26, 0x55	; 85
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e5 e5       	ldi	r30, 0x55	; 85
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	81 60       	ori	r24, 0x01	; 1
    1066:	8c 93       	st	X, r24
    1068:	02 c0       	rjmp	.+4      	; 0x106e <EXTI_enuInit+0x10a>

					case EXTI_LOW_LEVEL :
						break;

					default:
						Local_enuErrorState = ES_OUT_OF_RANGE ;
    106a:	83 e0       	ldi	r24, 0x03	; 3
    106c:	8a 83       	std	Y+2, r24	; 0x02


					}

					//Enable the ENT0.
					GICR |=(EXTI_MASK_BIT<<INT0);
    106e:	ab e5       	ldi	r26, 0x5B	; 91
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	eb e5       	ldi	r30, 0x5B	; 91
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	80 64       	ori	r24, 0x40	; 64
    107a:	8c 93       	st	X, r24
    107c:	88 c0       	rjmp	.+272    	; 0x118e <EXTI_enuInit+0x22a>

					/*********************************************************
					 * Configure the interrupt1 and Handling it's cases.     *
					 *********************************************************/
					case EXTI1 :
						MCUCR  &= ~( (EXTI_MASK_BIT<<ISC10) | (EXTI_MASK_BIT<<ISC11) );
    107e:	a5 e5       	ldi	r26, 0x55	; 85
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	e5 e5       	ldi	r30, 0x55	; 85
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	83 7f       	andi	r24, 0xF3	; 243
    108a:	8c 93       	st	X, r24

						switch(Cpy_pstrEXTICnfg[Local_u8Iterator].EXTI_u8SenceLevel)
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	88 2f       	mov	r24, r24
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	9c 01       	movw	r18, r24
    1094:	22 0f       	add	r18, r18
    1096:	33 1f       	adc	r19, r19
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	9c 81       	ldd	r25, Y+4	; 0x04
    109c:	fc 01       	movw	r30, r24
    109e:	e2 0f       	add	r30, r18
    10a0:	f3 1f       	adc	r31, r19
    10a2:	81 81       	ldd	r24, Z+1	; 0x01
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	38 87       	std	Y+8, r19	; 0x08
    10aa:	2f 83       	std	Y+7, r18	; 0x07
    10ac:	8f 81       	ldd	r24, Y+7	; 0x07
    10ae:	98 85       	ldd	r25, Y+8	; 0x08
    10b0:	81 30       	cpi	r24, 0x01	; 1
    10b2:	91 05       	cpc	r25, r1
    10b4:	e9 f0       	breq	.+58     	; 0x10f0 <EXTI_enuInit+0x18c>
    10b6:	2f 81       	ldd	r18, Y+7	; 0x07
    10b8:	38 85       	ldd	r19, Y+8	; 0x08
    10ba:	22 30       	cpi	r18, 0x02	; 2
    10bc:	31 05       	cpc	r19, r1
    10be:	2c f4       	brge	.+10     	; 0x10ca <EXTI_enuInit+0x166>
    10c0:	8f 81       	ldd	r24, Y+7	; 0x07
    10c2:	98 85       	ldd	r25, Y+8	; 0x08
    10c4:	00 97       	sbiw	r24, 0x00	; 0
    10c6:	61 f0       	breq	.+24     	; 0x10e0 <EXTI_enuInit+0x17c>
    10c8:	23 c0       	rjmp	.+70     	; 0x1110 <EXTI_enuInit+0x1ac>
    10ca:	2f 81       	ldd	r18, Y+7	; 0x07
    10cc:	38 85       	ldd	r19, Y+8	; 0x08
    10ce:	22 30       	cpi	r18, 0x02	; 2
    10d0:	31 05       	cpc	r19, r1
    10d2:	b1 f0       	breq	.+44     	; 0x1100 <EXTI_enuInit+0x19c>
    10d4:	8f 81       	ldd	r24, Y+7	; 0x07
    10d6:	98 85       	ldd	r25, Y+8	; 0x08
    10d8:	83 30       	cpi	r24, 0x03	; 3
    10da:	91 05       	cpc	r25, r1
    10dc:	d9 f0       	breq	.+54     	; 0x1114 <EXTI_enuInit+0x1b0>
    10de:	18 c0       	rjmp	.+48     	; 0x1110 <EXTI_enuInit+0x1ac>
						{
						case EXTI_RISING_EDGE :
							MCUCR   |= (EXTI_MASK_BIT<<ISC10 )|(EXTI_MASK_BIT<<ISC11 );
    10e0:	a5 e5       	ldi	r26, 0x55	; 85
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	e5 e5       	ldi	r30, 0x55	; 85
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	8c 60       	ori	r24, 0x0C	; 12
    10ec:	8c 93       	st	X, r24
    10ee:	12 c0       	rjmp	.+36     	; 0x1114 <EXTI_enuInit+0x1b0>
							break;

						case EXTI_FALLING_EDGE :
							MCUCR   |=  (EXTI_MASK_BIT<<ISC11 );
    10f0:	a5 e5       	ldi	r26, 0x55	; 85
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	e5 e5       	ldi	r30, 0x55	; 85
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	88 60       	ori	r24, 0x08	; 8
    10fc:	8c 93       	st	X, r24
    10fe:	0a c0       	rjmp	.+20     	; 0x1114 <EXTI_enuInit+0x1b0>
							break;

						case  EXTI_LOGIC_CHANGE:
							MCUCR   |=  (EXTI_MASK_BIT<<ISC10 );
    1100:	a5 e5       	ldi	r26, 0x55	; 85
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e5 e5       	ldi	r30, 0x55	; 85
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	84 60       	ori	r24, 0x04	; 4
    110c:	8c 93       	st	X, r24
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <EXTI_enuInit+0x1b0>

						case EXTI_LOW_LEVEL :
							break;

						default:
							Local_enuErrorState = ES_OUT_OF_RANGE ;
    1110:	83 e0       	ldi	r24, 0x03	; 3
    1112:	8a 83       	std	Y+2, r24	; 0x02
						}

						//Enable the ENT1.
						GICR |=(EXTI_MASK_BIT<<INT1);
    1114:	ab e5       	ldi	r26, 0x5B	; 91
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	eb e5       	ldi	r30, 0x5B	; 91
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	80 68       	ori	r24, 0x80	; 128
    1120:	8c 93       	st	X, r24
    1122:	35 c0       	rjmp	.+106    	; 0x118e <EXTI_enuInit+0x22a>

						/*********************************************************
						 * Configure the interrupt2 and Handling it's cases.     *
						 *********************************************************/
						case EXTI2 :
							MCUCSR  &= ~(EXTI_MASK_BIT<<ISC2) ;
    1124:	a4 e5       	ldi	r26, 0x54	; 84
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	e4 e5       	ldi	r30, 0x54	; 84
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	8f 7b       	andi	r24, 0xBF	; 191
    1130:	8c 93       	st	X, r24

							switch(Cpy_pstrEXTICnfg[Local_u8Iterator].EXTI_u8SenceLevel)
    1132:	89 81       	ldd	r24, Y+1	; 0x01
    1134:	88 2f       	mov	r24, r24
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	9c 01       	movw	r18, r24
    113a:	22 0f       	add	r18, r18
    113c:	33 1f       	adc	r19, r19
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	9c 81       	ldd	r25, Y+4	; 0x04
    1142:	fc 01       	movw	r30, r24
    1144:	e2 0f       	add	r30, r18
    1146:	f3 1f       	adc	r31, r19
    1148:	81 81       	ldd	r24, Z+1	; 0x01
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	3e 83       	std	Y+6, r19	; 0x06
    1150:	2d 83       	std	Y+5, r18	; 0x05
    1152:	8d 81       	ldd	r24, Y+5	; 0x05
    1154:	9e 81       	ldd	r25, Y+6	; 0x06
    1156:	00 97       	sbiw	r24, 0x00	; 0
    1158:	31 f0       	breq	.+12     	; 0x1166 <EXTI_enuInit+0x202>
    115a:	2d 81       	ldd	r18, Y+5	; 0x05
    115c:	3e 81       	ldd	r19, Y+6	; 0x06
    115e:	21 30       	cpi	r18, 0x01	; 1
    1160:	31 05       	cpc	r19, r1
    1162:	59 f0       	breq	.+22     	; 0x117a <EXTI_enuInit+0x216>
    1164:	08 c0       	rjmp	.+16     	; 0x1176 <EXTI_enuInit+0x212>
							{
							case EXTI_RISING_EDGE :
								MCUCSR   |= (EXTI_MASK_BIT<<ISC2 );
    1166:	a4 e5       	ldi	r26, 0x54	; 84
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	e4 e5       	ldi	r30, 0x54	; 84
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	80 64       	ori	r24, 0x40	; 64
    1172:	8c 93       	st	X, r24
    1174:	02 c0       	rjmp	.+4      	; 0x117a <EXTI_enuInit+0x216>

							case EXTI_FALLING_EDGE :
								break;

							default:
								Local_enuErrorState = ES_OUT_OF_RANGE ;
    1176:	83 e0       	ldi	r24, 0x03	; 3
    1178:	8a 83       	std	Y+2, r24	; 0x02
							}

							//Enable the ENT2.
							GICR |=(EXTI_MASK_BIT<<INT2);
    117a:	ab e5       	ldi	r26, 0x5B	; 91
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	eb e5       	ldi	r30, 0x5B	; 91
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	80 62       	ori	r24, 0x20	; 32
    1186:	8c 93       	st	X, r24
    1188:	02 c0       	rjmp	.+4      	; 0x118e <EXTI_enuInit+0x22a>
							break;



							default:
								Local_enuErrorState = ES_OUT_OF_RANGE ;
    118a:	83 e0       	ldi	r24, 0x03	; 3
    118c:	8a 83       	std	Y+2, r24	; 0x02

				}//End of outer Switch case.

				Local_enuErrorState = ES_NOK ;
    118e:	1a 82       	std	Y+2, r1	; 0x02

	if( Cpy_pstrEXTICnfg != NULL )
	{
		u8 Local_u8Iterator = 0;

		for( Local_u8Iterator = 0 ; Local_u8Iterator < EXTI_NUM ; Local_u8Iterator++ )
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	8f 5f       	subi	r24, 0xFF	; 255
    1194:	89 83       	std	Y+1, r24	; 0x01
    1196:	89 81       	ldd	r24, Y+1	; 0x01
    1198:	88 23       	and	r24, r24
    119a:	09 f4       	brne	.+2      	; 0x119e <EXTI_enuInit+0x23a>
    119c:	f8 ce       	rjmp	.-528    	; 0xf8e <EXTI_enuInit+0x2a>
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <EXTI_enuInit+0x240>
		}

	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER ;
    11a0:	82 e0       	ldi	r24, 0x02	; 2
    11a2:	8a 83       	std	Y+2, r24	; 0x02
	}


	return Local_enuErrorState;
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
}//End of EXTI_enuInit.
    11a6:	2c 96       	adiw	r28, 0x0c	; 12
    11a8:	0f b6       	in	r0, 0x3f	; 63
    11aa:	f8 94       	cli
    11ac:	de bf       	out	0x3e, r29	; 62
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	cd bf       	out	0x3d, r28	; 61
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	08 95       	ret

000011b8 <EXTI_enuSetSenceMode>:
/*                                  FALLING_EDGE                            */
/*                                                                          */
/* Return          : Error state of type ES_t.                              */
/*..........................*************************************************/
ES_t   EXTI_enuSetSenceMode( u8 Cpy_u8EXTI_ID  , u8 Cpy_u8SenceLevel )
{
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
    11c0:	2b 97       	sbiw	r28, 0x0b	; 11
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	f8 94       	cli
    11c6:	de bf       	out	0x3e, r29	; 62
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	cd bf       	out	0x3d, r28	; 61
    11cc:	8a 83       	std	Y+2, r24	; 0x02
    11ce:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK ;
    11d0:	19 82       	std	Y+1, r1	; 0x01

	if(Cpy_u8EXTI_ID <= EXTI_NUM )
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	82 30       	cpi	r24, 0x02	; 2
    11d6:	08 f0       	brcs	.+2      	; 0x11da <EXTI_enuSetSenceMode+0x22>
    11d8:	bd c0       	rjmp	.+378    	; 0x1354 <EXTI_enuSetSenceMode+0x19c>
	{

		switch( Cpy_u8EXTI_ID )
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	3b 87       	std	Y+11, r19	; 0x0b
    11e2:	2a 87       	std	Y+10, r18	; 0x0a
    11e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    11e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    11e8:	81 30       	cpi	r24, 0x01	; 1
    11ea:	91 05       	cpc	r25, r1
    11ec:	09 f4       	brne	.+2      	; 0x11f0 <EXTI_enuSetSenceMode+0x38>
    11ee:	4d c0       	rjmp	.+154    	; 0x128a <EXTI_enuSetSenceMode+0xd2>
    11f0:	2a 85       	ldd	r18, Y+10	; 0x0a
    11f2:	3b 85       	ldd	r19, Y+11	; 0x0b
    11f4:	22 30       	cpi	r18, 0x02	; 2
    11f6:	31 05       	cpc	r19, r1
    11f8:	09 f4       	brne	.+2      	; 0x11fc <EXTI_enuSetSenceMode+0x44>
    11fa:	88 c0       	rjmp	.+272    	; 0x130c <EXTI_enuSetSenceMode+0x154>
    11fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    11fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    1200:	00 97       	sbiw	r24, 0x00	; 0
    1202:	09 f0       	breq	.+2      	; 0x1206 <EXTI_enuSetSenceMode+0x4e>
    1204:	a4 c0       	rjmp	.+328    	; 0x134e <EXTI_enuSetSenceMode+0x196>
		{
		/*****************************************************************
		 * Interrupt0  Sense Control Cases Handling.                     *
		 *****************************************************************/
		case EXTI0:
			MCUCR  &= ~( (EXTI_MASK_BIT<<ISC00) | (EXTI_MASK_BIT<<ISC01) );
    1206:	a5 e5       	ldi	r26, 0x55	; 85
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	e5 e5       	ldi	r30, 0x55	; 85
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	8c 7f       	andi	r24, 0xFC	; 252
    1212:	8c 93       	st	X, r24

			switch(Cpy_u8SenceLevel)
    1214:	8b 81       	ldd	r24, Y+3	; 0x03
    1216:	28 2f       	mov	r18, r24
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	39 87       	std	Y+9, r19	; 0x09
    121c:	28 87       	std	Y+8, r18	; 0x08
    121e:	88 85       	ldd	r24, Y+8	; 0x08
    1220:	99 85       	ldd	r25, Y+9	; 0x09
    1222:	81 30       	cpi	r24, 0x01	; 1
    1224:	91 05       	cpc	r25, r1
    1226:	f1 f0       	breq	.+60     	; 0x1264 <EXTI_enuSetSenceMode+0xac>
    1228:	28 85       	ldd	r18, Y+8	; 0x08
    122a:	39 85       	ldd	r19, Y+9	; 0x09
    122c:	22 30       	cpi	r18, 0x02	; 2
    122e:	31 05       	cpc	r19, r1
    1230:	2c f4       	brge	.+10     	; 0x123c <EXTI_enuSetSenceMode+0x84>
    1232:	88 85       	ldd	r24, Y+8	; 0x08
    1234:	99 85       	ldd	r25, Y+9	; 0x09
    1236:	00 97       	sbiw	r24, 0x00	; 0
    1238:	69 f0       	breq	.+26     	; 0x1254 <EXTI_enuSetSenceMode+0x9c>
    123a:	24 c0       	rjmp	.+72     	; 0x1284 <EXTI_enuSetSenceMode+0xcc>
    123c:	28 85       	ldd	r18, Y+8	; 0x08
    123e:	39 85       	ldd	r19, Y+9	; 0x09
    1240:	22 30       	cpi	r18, 0x02	; 2
    1242:	31 05       	cpc	r19, r1
    1244:	b9 f0       	breq	.+46     	; 0x1274 <EXTI_enuSetSenceMode+0xbc>
    1246:	88 85       	ldd	r24, Y+8	; 0x08
    1248:	99 85       	ldd	r25, Y+9	; 0x09
    124a:	83 30       	cpi	r24, 0x03	; 3
    124c:	91 05       	cpc	r25, r1
    124e:	09 f4       	brne	.+2      	; 0x1252 <EXTI_enuSetSenceMode+0x9a>
    1250:	7e c0       	rjmp	.+252    	; 0x134e <EXTI_enuSetSenceMode+0x196>
    1252:	18 c0       	rjmp	.+48     	; 0x1284 <EXTI_enuSetSenceMode+0xcc>
			{
			case EXTI_RISING_EDGE :
				MCUCR   |= (EXTI_MASK_BIT<<ISC00 )|(EXTI_MASK_BIT<<ISC01 );
    1254:	a5 e5       	ldi	r26, 0x55	; 85
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	e5 e5       	ldi	r30, 0x55	; 85
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	83 60       	ori	r24, 0x03	; 3
    1260:	8c 93       	st	X, r24
    1262:	75 c0       	rjmp	.+234    	; 0x134e <EXTI_enuSetSenceMode+0x196>
				break;

			case EXTI_FALLING_EDGE :
				MCUCR   |=  (EXTI_MASK_BIT<<ISC01 );
    1264:	a5 e5       	ldi	r26, 0x55	; 85
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	e5 e5       	ldi	r30, 0x55	; 85
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	82 60       	ori	r24, 0x02	; 2
    1270:	8c 93       	st	X, r24
    1272:	6d c0       	rjmp	.+218    	; 0x134e <EXTI_enuSetSenceMode+0x196>
				break;

			case  EXTI_LOGIC_CHANGE:
				MCUCR   |=  (EXTI_MASK_BIT<<ISC00 );
    1274:	a5 e5       	ldi	r26, 0x55	; 85
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	e5 e5       	ldi	r30, 0x55	; 85
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	81 60       	ori	r24, 0x01	; 1
    1280:	8c 93       	st	X, r24
    1282:	65 c0       	rjmp	.+202    	; 0x134e <EXTI_enuSetSenceMode+0x196>

			case EXTI_LOW_LEVEL :
				break;

			default:
				Local_enuErrorState = ES_OUT_OF_RANGE ;
    1284:	83 e0       	ldi	r24, 0x03	; 3
    1286:	89 83       	std	Y+1, r24	; 0x01
    1288:	62 c0       	rjmp	.+196    	; 0x134e <EXTI_enuSetSenceMode+0x196>

			/*****************************************************************
			 * Interrupt1  Sense Control Cases Handling.                     *
			 *****************************************************************/
			case EXTI1:
				MCUCR  &= ~( (EXTI_MASK_BIT<<ISC10) | (EXTI_MASK_BIT<<ISC11) );
    128a:	a5 e5       	ldi	r26, 0x55	; 85
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	e5 e5       	ldi	r30, 0x55	; 85
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	83 7f       	andi	r24, 0xF3	; 243
    1296:	8c 93       	st	X, r24
				switch(Cpy_u8SenceLevel)
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	3f 83       	std	Y+7, r19	; 0x07
    12a0:	2e 83       	std	Y+6, r18	; 0x06
    12a2:	8e 81       	ldd	r24, Y+6	; 0x06
    12a4:	9f 81       	ldd	r25, Y+7	; 0x07
    12a6:	81 30       	cpi	r24, 0x01	; 1
    12a8:	91 05       	cpc	r25, r1
    12aa:	e9 f0       	breq	.+58     	; 0x12e6 <EXTI_enuSetSenceMode+0x12e>
    12ac:	2e 81       	ldd	r18, Y+6	; 0x06
    12ae:	3f 81       	ldd	r19, Y+7	; 0x07
    12b0:	22 30       	cpi	r18, 0x02	; 2
    12b2:	31 05       	cpc	r19, r1
    12b4:	2c f4       	brge	.+10     	; 0x12c0 <EXTI_enuSetSenceMode+0x108>
    12b6:	8e 81       	ldd	r24, Y+6	; 0x06
    12b8:	9f 81       	ldd	r25, Y+7	; 0x07
    12ba:	00 97       	sbiw	r24, 0x00	; 0
    12bc:	61 f0       	breq	.+24     	; 0x12d6 <EXTI_enuSetSenceMode+0x11e>
    12be:	23 c0       	rjmp	.+70     	; 0x1306 <EXTI_enuSetSenceMode+0x14e>
    12c0:	2e 81       	ldd	r18, Y+6	; 0x06
    12c2:	3f 81       	ldd	r19, Y+7	; 0x07
    12c4:	22 30       	cpi	r18, 0x02	; 2
    12c6:	31 05       	cpc	r19, r1
    12c8:	b1 f0       	breq	.+44     	; 0x12f6 <EXTI_enuSetSenceMode+0x13e>
    12ca:	8e 81       	ldd	r24, Y+6	; 0x06
    12cc:	9f 81       	ldd	r25, Y+7	; 0x07
    12ce:	83 30       	cpi	r24, 0x03	; 3
    12d0:	91 05       	cpc	r25, r1
    12d2:	e9 f1       	breq	.+122    	; 0x134e <EXTI_enuSetSenceMode+0x196>
    12d4:	18 c0       	rjmp	.+48     	; 0x1306 <EXTI_enuSetSenceMode+0x14e>
				{
				case EXTI_RISING_EDGE :
					MCUCR   |= (EXTI_MASK_BIT<<ISC10 )|(EXTI_MASK_BIT<<ISC11 );
    12d6:	a5 e5       	ldi	r26, 0x55	; 85
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	e5 e5       	ldi	r30, 0x55	; 85
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	8c 60       	ori	r24, 0x0C	; 12
    12e2:	8c 93       	st	X, r24
    12e4:	34 c0       	rjmp	.+104    	; 0x134e <EXTI_enuSetSenceMode+0x196>
					break;

				case EXTI_FALLING_EDGE :
					MCUCR   |=  (EXTI_MASK_BIT<<ISC11 );
    12e6:	a5 e5       	ldi	r26, 0x55	; 85
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	e5 e5       	ldi	r30, 0x55	; 85
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	88 60       	ori	r24, 0x08	; 8
    12f2:	8c 93       	st	X, r24
    12f4:	2c c0       	rjmp	.+88     	; 0x134e <EXTI_enuSetSenceMode+0x196>
					break;

				case  EXTI_LOGIC_CHANGE:
					MCUCR   |=  (EXTI_MASK_BIT<<ISC10 );
    12f6:	a5 e5       	ldi	r26, 0x55	; 85
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	e5 e5       	ldi	r30, 0x55	; 85
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	84 60       	ori	r24, 0x04	; 4
    1302:	8c 93       	st	X, r24
    1304:	24 c0       	rjmp	.+72     	; 0x134e <EXTI_enuSetSenceMode+0x196>

				case EXTI_LOW_LEVEL :
					break;

				default:
					Local_enuErrorState = ES_OUT_OF_RANGE ;
    1306:	83 e0       	ldi	r24, 0x03	; 3
    1308:	89 83       	std	Y+1, r24	; 0x01
    130a:	21 c0       	rjmp	.+66     	; 0x134e <EXTI_enuSetSenceMode+0x196>
				/*****************************************************************
				 * Interrupt2  Sense Control Cases Handling.                     *
				 *****************************************************************/
				case EXTI2:

					switch(Cpy_u8SenceLevel)
    130c:	8b 81       	ldd	r24, Y+3	; 0x03
    130e:	28 2f       	mov	r18, r24
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	3d 83       	std	Y+5, r19	; 0x05
    1314:	2c 83       	std	Y+4, r18	; 0x04
    1316:	8c 81       	ldd	r24, Y+4	; 0x04
    1318:	9d 81       	ldd	r25, Y+5	; 0x05
    131a:	00 97       	sbiw	r24, 0x00	; 0
    131c:	31 f0       	breq	.+12     	; 0x132a <EXTI_enuSetSenceMode+0x172>
    131e:	2c 81       	ldd	r18, Y+4	; 0x04
    1320:	3d 81       	ldd	r19, Y+5	; 0x05
    1322:	21 30       	cpi	r18, 0x01	; 1
    1324:	31 05       	cpc	r19, r1
    1326:	49 f0       	breq	.+18     	; 0x133a <EXTI_enuSetSenceMode+0x182>
    1328:	10 c0       	rjmp	.+32     	; 0x134a <EXTI_enuSetSenceMode+0x192>
					{
					case EXTI_RISING_EDGE :
						MCUCSR  |=(EXTI_MASK_BIT<<ISC2) ;
    132a:	a4 e5       	ldi	r26, 0x54	; 84
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	e4 e5       	ldi	r30, 0x54	; 84
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	80 64       	ori	r24, 0x40	; 64
    1336:	8c 93       	st	X, r24
    1338:	0a c0       	rjmp	.+20     	; 0x134e <EXTI_enuSetSenceMode+0x196>
						break;

					case EXTI_FALLING_EDGE :
						MCUCSR  &=~(EXTI_MASK_BIT<<ISC2) ;
    133a:	a4 e5       	ldi	r26, 0x54	; 84
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e4 e5       	ldi	r30, 0x54	; 84
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	8f 7b       	andi	r24, 0xBF	; 191
    1346:	8c 93       	st	X, r24
    1348:	02 c0       	rjmp	.+4      	; 0x134e <EXTI_enuSetSenceMode+0x196>
						break;

					default:
						Local_enuErrorState = ES_OUT_OF_RANGE ;
    134a:	83 e0       	ldi	r24, 0x03	; 3
    134c:	89 83       	std	Y+1, r24	; 0x01
					break ;


		}

		Local_enuErrorState = ES_OK;
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	89 83       	std	Y+1, r24	; 0x01
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <EXTI_enuSetSenceMode+0x1a0>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1354:	83 e0       	ldi	r24, 0x03	; 3
    1356:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1358:	89 81       	ldd	r24, Y+1	; 0x01

}//End of EXTI_enuSetSenceMode.
    135a:	2b 96       	adiw	r28, 0x0b	; 11
    135c:	0f b6       	in	r0, 0x3f	; 63
    135e:	f8 94       	cli
    1360:	de bf       	out	0x3e, r29	; 62
    1362:	0f be       	out	0x3f, r0	; 63
    1364:	cd bf       	out	0x3d, r28	; 61
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	08 95       	ret

0000136c <EXTI_enuEnableINT>:
/*                                 EXTI_2 --->for interrupt_2                */
/*                                                                           */
/* Return          : Error state of type ES_t.                               */
/*.......................*****************************************************/
ES_t   EXTI_enuEnableINT( u8 Cpy_u8EXTI_ID  )
{
    136c:	df 93       	push	r29
    136e:	cf 93       	push	r28
    1370:	00 d0       	rcall	.+0      	; 0x1372 <EXTI_enuEnableINT+0x6>
    1372:	00 d0       	rcall	.+0      	; 0x1374 <EXTI_enuEnableINT+0x8>
    1374:	cd b7       	in	r28, 0x3d	; 61
    1376:	de b7       	in	r29, 0x3e	; 62
    1378:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK ;
    137a:	19 82       	std	Y+1, r1	; 0x01

	if( Cpy_u8EXTI_ID < EXTI_NUM)
    137c:	8a 81       	ldd	r24, Y+2	; 0x02
    137e:	88 23       	and	r24, r24
    1380:	69 f5       	brne	.+90     	; 0x13dc <EXTI_enuEnableINT+0x70>
	{
		switch(Cpy_u8EXTI_ID)
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	28 2f       	mov	r18, r24
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	3c 83       	std	Y+4, r19	; 0x04
    138a:	2b 83       	std	Y+3, r18	; 0x03
    138c:	8b 81       	ldd	r24, Y+3	; 0x03
    138e:	9c 81       	ldd	r25, Y+4	; 0x04
    1390:	81 30       	cpi	r24, 0x01	; 1
    1392:	91 05       	cpc	r25, r1
    1394:	89 f0       	breq	.+34     	; 0x13b8 <EXTI_enuEnableINT+0x4c>
    1396:	2b 81       	ldd	r18, Y+3	; 0x03
    1398:	3c 81       	ldd	r19, Y+4	; 0x04
    139a:	22 30       	cpi	r18, 0x02	; 2
    139c:	31 05       	cpc	r19, r1
    139e:	a1 f0       	breq	.+40     	; 0x13c8 <EXTI_enuEnableINT+0x5c>
    13a0:	8b 81       	ldd	r24, Y+3	; 0x03
    13a2:	9c 81       	ldd	r25, Y+4	; 0x04
    13a4:	00 97       	sbiw	r24, 0x00	; 0
    13a6:	b9 f4       	brne	.+46     	; 0x13d6 <EXTI_enuEnableINT+0x6a>
		{

		case EXTI0:
			//Enable interrupt 0 .
			GICR |= (EXTI_MASK_BIT<< INT0);
    13a8:	ab e5       	ldi	r26, 0x5B	; 91
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	eb e5       	ldi	r30, 0x5B	; 91
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	80 64       	ori	r24, 0x40	; 64
    13b4:	8c 93       	st	X, r24
    13b6:	0f c0       	rjmp	.+30     	; 0x13d6 <EXTI_enuEnableINT+0x6a>
			break;

		case EXTI1:
			//Enable interrupt 1 .
			GICR |= (EXTI_MASK_BIT<< INT1);
    13b8:	ab e5       	ldi	r26, 0x5B	; 91
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	eb e5       	ldi	r30, 0x5B	; 91
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	80 68       	ori	r24, 0x80	; 128
    13c4:	8c 93       	st	X, r24
    13c6:	07 c0       	rjmp	.+14     	; 0x13d6 <EXTI_enuEnableINT+0x6a>
			break;

		case EXTI2:
			//Enable interrupt 2 .
			GICR |= (EXTI_MASK_BIT<< INT2);
    13c8:	ab e5       	ldi	r26, 0x5B	; 91
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	eb e5       	ldi	r30, 0x5B	; 91
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	80 62       	ori	r24, 0x20	; 32
    13d4:	8c 93       	st	X, r24
			break;

		}
		Local_enuErrorState = ES_OK  ;
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	89 83       	std	Y+1, r24	; 0x01
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <EXTI_enuEnableINT+0x74>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE ;
    13dc:	83 e0       	ldi	r24, 0x03	; 3
    13de:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    13e2:	0f 90       	pop	r0
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	0f 90       	pop	r0
    13ea:	cf 91       	pop	r28
    13ec:	df 91       	pop	r29
    13ee:	08 95       	ret

000013f0 <EXTI_enuDisableINT>:
/*                                 EXTI_2 --->for interrupt_2                */
/*                                                                           */
/* Return          : Error state of type ES_t.                               */
/*.......................*****************************************************/
ES_t   EXTI_enuDisableINT(   u8 Cpy_u8EXTI_ID  )
{
    13f0:	df 93       	push	r29
    13f2:	cf 93       	push	r28
    13f4:	00 d0       	rcall	.+0      	; 0x13f6 <EXTI_enuDisableINT+0x6>
    13f6:	00 d0       	rcall	.+0      	; 0x13f8 <EXTI_enuDisableINT+0x8>
    13f8:	cd b7       	in	r28, 0x3d	; 61
    13fa:	de b7       	in	r29, 0x3e	; 62
    13fc:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK ;
    13fe:	19 82       	std	Y+1, r1	; 0x01

	if( Cpy_u8EXTI_ID < EXTI_NUM)
    1400:	8a 81       	ldd	r24, Y+2	; 0x02
    1402:	88 23       	and	r24, r24
    1404:	69 f5       	brne	.+90     	; 0x1460 <EXTI_enuDisableINT+0x70>
	{
		switch(Cpy_u8EXTI_ID)
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	28 2f       	mov	r18, r24
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	3c 83       	std	Y+4, r19	; 0x04
    140e:	2b 83       	std	Y+3, r18	; 0x03
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	9c 81       	ldd	r25, Y+4	; 0x04
    1414:	81 30       	cpi	r24, 0x01	; 1
    1416:	91 05       	cpc	r25, r1
    1418:	89 f0       	breq	.+34     	; 0x143c <EXTI_enuDisableINT+0x4c>
    141a:	2b 81       	ldd	r18, Y+3	; 0x03
    141c:	3c 81       	ldd	r19, Y+4	; 0x04
    141e:	22 30       	cpi	r18, 0x02	; 2
    1420:	31 05       	cpc	r19, r1
    1422:	a1 f0       	breq	.+40     	; 0x144c <EXTI_enuDisableINT+0x5c>
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
    1426:	9c 81       	ldd	r25, Y+4	; 0x04
    1428:	00 97       	sbiw	r24, 0x00	; 0
    142a:	b9 f4       	brne	.+46     	; 0x145a <EXTI_enuDisableINT+0x6a>
		{

		    //Disable interrupt 0 .
		case EXTI0:
			GICR &=~(EXTI_MASK_BIT<< INT0);
    142c:	ab e5       	ldi	r26, 0x5B	; 91
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	eb e5       	ldi	r30, 0x5B	; 91
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	8f 7b       	andi	r24, 0xBF	; 191
    1438:	8c 93       	st	X, r24
    143a:	0f c0       	rjmp	.+30     	; 0x145a <EXTI_enuDisableINT+0x6a>
			break;

			//Disable interrupt 1 .
		case EXTI1:
			GICR &=~(EXTI_MASK_BIT<< INT1);
    143c:	ab e5       	ldi	r26, 0x5B	; 91
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	eb e5       	ldi	r30, 0x5B	; 91
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	8f 77       	andi	r24, 0x7F	; 127
    1448:	8c 93       	st	X, r24
    144a:	07 c0       	rjmp	.+14     	; 0x145a <EXTI_enuDisableINT+0x6a>
			break;

			//Disable interrupt 2 .
		case EXTI2:
			GICR &=~(EXTI_MASK_BIT<< INT2);
    144c:	ab e5       	ldi	r26, 0x5B	; 91
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	eb e5       	ldi	r30, 0x5B	; 91
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	8f 7d       	andi	r24, 0xDF	; 223
    1458:	8c 93       	st	X, r24
			break;

		}
		Local_enuErrorState = ES_OK  ;
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	89 83       	std	Y+1, r24	; 0x01
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <EXTI_enuDisableINT+0x74>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE ;
    1460:	83 e0       	ldi	r24, 0x03	; 3
    1462:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1464:	89 81       	ldd	r24, Y+1	; 0x01
}
    1466:	0f 90       	pop	r0
    1468:	0f 90       	pop	r0
    146a:	0f 90       	pop	r0
    146c:	0f 90       	pop	r0
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	08 95       	ret

00001474 <EXTI_enuCallBack>:
/*                                                                                                      */
/*                                                                                                      */
/* Return          : Error state of type ES_t.                                                          */
/*.......................********************************************************************************/
ES_t   EXTI_enuCallBack(volatile void (*Cpy_pfunAppFunc)(void*)  , volatile void* Cpy_pvidParameter ,  u8 Cpy_u8EXTI_ID  )
{
    1474:	df 93       	push	r29
    1476:	cf 93       	push	r28
    1478:	00 d0       	rcall	.+0      	; 0x147a <EXTI_enuCallBack+0x6>
    147a:	00 d0       	rcall	.+0      	; 0x147c <EXTI_enuCallBack+0x8>
    147c:	00 d0       	rcall	.+0      	; 0x147e <EXTI_enuCallBack+0xa>
    147e:	cd b7       	in	r28, 0x3d	; 61
    1480:	de b7       	in	r29, 0x3e	; 62
    1482:	9b 83       	std	Y+3, r25	; 0x03
    1484:	8a 83       	std	Y+2, r24	; 0x02
    1486:	7d 83       	std	Y+5, r23	; 0x05
    1488:	6c 83       	std	Y+4, r22	; 0x04
    148a:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_enuErrorState =ES_NOK ;
    148c:	19 82       	std	Y+1, r1	; 0x01

	if( (Cpy_pfunAppFunc !=NULL)&&(Cpy_u8EXTI_ID < EXTI_NUM) )
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	9b 81       	ldd	r25, Y+3	; 0x03
    1492:	00 97       	sbiw	r24, 0x00	; 0
    1494:	f1 f0       	breq	.+60     	; 0x14d2 <EXTI_enuCallBack+0x5e>
    1496:	8e 81       	ldd	r24, Y+6	; 0x06
    1498:	88 23       	and	r24, r24
    149a:	d9 f4       	brne	.+54     	; 0x14d2 <EXTI_enuCallBack+0x5e>
	{

		EXTI_ApfunINTFunc[Cpy_u8EXTI_ID]= Cpy_pfunAppFunc ;
    149c:	8e 81       	ldd	r24, Y+6	; 0x06
    149e:	88 2f       	mov	r24, r24
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	88 0f       	add	r24, r24
    14a4:	99 1f       	adc	r25, r25
    14a6:	fc 01       	movw	r30, r24
    14a8:	e6 59       	subi	r30, 0x96	; 150
    14aa:	ff 4f       	sbci	r31, 0xFF	; 255
    14ac:	8a 81       	ldd	r24, Y+2	; 0x02
    14ae:	9b 81       	ldd	r25, Y+3	; 0x03
    14b0:	91 83       	std	Z+1, r25	; 0x01
    14b2:	80 83       	st	Z, r24

		EXTI_ApvidGenericParameter[Cpy_u8EXTI_ID]= Cpy_pvidParameter;
    14b4:	8e 81       	ldd	r24, Y+6	; 0x06
    14b6:	88 2f       	mov	r24, r24
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	88 0f       	add	r24, r24
    14bc:	99 1f       	adc	r25, r25
    14be:	fc 01       	movw	r30, r24
    14c0:	e0 59       	subi	r30, 0x90	; 144
    14c2:	ff 4f       	sbci	r31, 0xFF	; 255
    14c4:	8c 81       	ldd	r24, Y+4	; 0x04
    14c6:	9d 81       	ldd	r25, Y+5	; 0x05
    14c8:	91 83       	std	Z+1, r25	; 0x01
    14ca:	80 83       	st	Z, r24

		Local_enuErrorState =ES_OK ;
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	89 83       	std	Y+1, r24	; 0x01
    14d0:	02 c0       	rjmp	.+4      	; 0x14d6 <EXTI_enuCallBack+0x62>

	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER ;
    14d2:	82 e0       	ldi	r24, 0x02	; 2
    14d4:	89 83       	std	Y+1, r24	; 0x01
	}




	return Local_enuErrorState;
    14d6:	89 81       	ldd	r24, Y+1	; 0x01
}//End of EXTI_enuCallBack.
    14d8:	26 96       	adiw	r28, 0x06	; 6
    14da:	0f b6       	in	r0, 0x3f	; 63
    14dc:	f8 94       	cli
    14de:	de bf       	out	0x3e, r29	; 62
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	cd bf       	out	0x3d, r28	; 61
    14e4:	cf 91       	pop	r28
    14e6:	df 91       	pop	r29
    14e8:	08 95       	ret

000014ea <__vector_1>:


/**********************************************************************/
/************* Interrupt service routine for interrupt0 ***************/
ISR(VECT_INT0)
{
    14ea:	1f 92       	push	r1
    14ec:	0f 92       	push	r0
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	0f 92       	push	r0
    14f2:	11 24       	eor	r1, r1
    14f4:	2f 93       	push	r18
    14f6:	3f 93       	push	r19
    14f8:	4f 93       	push	r20
    14fa:	5f 93       	push	r21
    14fc:	6f 93       	push	r22
    14fe:	7f 93       	push	r23
    1500:	8f 93       	push	r24
    1502:	9f 93       	push	r25
    1504:	af 93       	push	r26
    1506:	bf 93       	push	r27
    1508:	ef 93       	push	r30
    150a:	ff 93       	push	r31
    150c:	df 93       	push	r29
    150e:	cf 93       	push	r28
    1510:	cd b7       	in	r28, 0x3d	; 61
    1512:	de b7       	in	r29, 0x3e	; 62
	if (  EXTI_ApfunINTFunc[EXTI0] != NULL )
    1514:	80 91 6a 00 	lds	r24, 0x006A
    1518:	90 91 6b 00 	lds	r25, 0x006B
    151c:	00 97       	sbiw	r24, 0x00	; 0
    151e:	49 f0       	breq	.+18     	; 0x1532 <__vector_1+0x48>
	{
		(*EXTI_ApfunINTFunc[EXTI0])(EXTI_ApvidGenericParameter[EXTI0]);
    1520:	e0 91 6a 00 	lds	r30, 0x006A
    1524:	f0 91 6b 00 	lds	r31, 0x006B
    1528:	80 91 70 00 	lds	r24, 0x0070
    152c:	90 91 71 00 	lds	r25, 0x0071
    1530:	09 95       	icall
	{
		//Do nothing.
	}


}
    1532:	cf 91       	pop	r28
    1534:	df 91       	pop	r29
    1536:	ff 91       	pop	r31
    1538:	ef 91       	pop	r30
    153a:	bf 91       	pop	r27
    153c:	af 91       	pop	r26
    153e:	9f 91       	pop	r25
    1540:	8f 91       	pop	r24
    1542:	7f 91       	pop	r23
    1544:	6f 91       	pop	r22
    1546:	5f 91       	pop	r21
    1548:	4f 91       	pop	r20
    154a:	3f 91       	pop	r19
    154c:	2f 91       	pop	r18
    154e:	0f 90       	pop	r0
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	0f 90       	pop	r0
    1554:	1f 90       	pop	r1
    1556:	18 95       	reti

00001558 <__vector_2>:

/**********************************************************************/
/************* Interrupt service routine for interrupt1 ***************/
ISR(VECT_INT1)
{
    1558:	1f 92       	push	r1
    155a:	0f 92       	push	r0
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	0f 92       	push	r0
    1560:	11 24       	eor	r1, r1
    1562:	2f 93       	push	r18
    1564:	3f 93       	push	r19
    1566:	4f 93       	push	r20
    1568:	5f 93       	push	r21
    156a:	6f 93       	push	r22
    156c:	7f 93       	push	r23
    156e:	8f 93       	push	r24
    1570:	9f 93       	push	r25
    1572:	af 93       	push	r26
    1574:	bf 93       	push	r27
    1576:	ef 93       	push	r30
    1578:	ff 93       	push	r31
    157a:	df 93       	push	r29
    157c:	cf 93       	push	r28
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
	if (  EXTI_ApfunINTFunc[EXTI1] != NULL )
    1582:	80 91 6c 00 	lds	r24, 0x006C
    1586:	90 91 6d 00 	lds	r25, 0x006D
    158a:	00 97       	sbiw	r24, 0x00	; 0
    158c:	49 f0       	breq	.+18     	; 0x15a0 <__vector_2+0x48>
	{
		(*EXTI_ApfunINTFunc[EXTI1])(EXTI_ApvidGenericParameter[EXTI1]);
    158e:	e0 91 6c 00 	lds	r30, 0x006C
    1592:	f0 91 6d 00 	lds	r31, 0x006D
    1596:	80 91 72 00 	lds	r24, 0x0072
    159a:	90 91 73 00 	lds	r25, 0x0073
    159e:	09 95       	icall
		//Do nothing.
	}



}
    15a0:	cf 91       	pop	r28
    15a2:	df 91       	pop	r29
    15a4:	ff 91       	pop	r31
    15a6:	ef 91       	pop	r30
    15a8:	bf 91       	pop	r27
    15aa:	af 91       	pop	r26
    15ac:	9f 91       	pop	r25
    15ae:	8f 91       	pop	r24
    15b0:	7f 91       	pop	r23
    15b2:	6f 91       	pop	r22
    15b4:	5f 91       	pop	r21
    15b6:	4f 91       	pop	r20
    15b8:	3f 91       	pop	r19
    15ba:	2f 91       	pop	r18
    15bc:	0f 90       	pop	r0
    15be:	0f be       	out	0x3f, r0	; 63
    15c0:	0f 90       	pop	r0
    15c2:	1f 90       	pop	r1
    15c4:	18 95       	reti

000015c6 <__vector_3>:


/**********************************************************************/
/************* Interrupt service routine for interrupt2 ***************/
ISR(VECT_INT2)
{
    15c6:	1f 92       	push	r1
    15c8:	0f 92       	push	r0
    15ca:	0f b6       	in	r0, 0x3f	; 63
    15cc:	0f 92       	push	r0
    15ce:	11 24       	eor	r1, r1
    15d0:	2f 93       	push	r18
    15d2:	3f 93       	push	r19
    15d4:	4f 93       	push	r20
    15d6:	5f 93       	push	r21
    15d8:	6f 93       	push	r22
    15da:	7f 93       	push	r23
    15dc:	8f 93       	push	r24
    15de:	9f 93       	push	r25
    15e0:	af 93       	push	r26
    15e2:	bf 93       	push	r27
    15e4:	ef 93       	push	r30
    15e6:	ff 93       	push	r31
    15e8:	df 93       	push	r29
    15ea:	cf 93       	push	r28
    15ec:	cd b7       	in	r28, 0x3d	; 61
    15ee:	de b7       	in	r29, 0x3e	; 62

	if (  EXTI_ApfunINTFunc[EXTI2] != NULL )
    15f0:	80 91 6e 00 	lds	r24, 0x006E
    15f4:	90 91 6f 00 	lds	r25, 0x006F
    15f8:	00 97       	sbiw	r24, 0x00	; 0
    15fa:	49 f0       	breq	.+18     	; 0x160e <__vector_3+0x48>
	{
		(*EXTI_ApfunINTFunc[EXTI2])(EXTI_ApvidGenericParameter[EXTI2]);
    15fc:	e0 91 6e 00 	lds	r30, 0x006E
    1600:	f0 91 6f 00 	lds	r31, 0x006F
    1604:	80 91 74 00 	lds	r24, 0x0074
    1608:	90 91 75 00 	lds	r25, 0x0075
    160c:	09 95       	icall
	else
	{
		//Do nothing.
	}

}
    160e:	cf 91       	pop	r28
    1610:	df 91       	pop	r29
    1612:	ff 91       	pop	r31
    1614:	ef 91       	pop	r30
    1616:	bf 91       	pop	r27
    1618:	af 91       	pop	r26
    161a:	9f 91       	pop	r25
    161c:	8f 91       	pop	r24
    161e:	7f 91       	pop	r23
    1620:	6f 91       	pop	r22
    1622:	5f 91       	pop	r21
    1624:	4f 91       	pop	r20
    1626:	3f 91       	pop	r19
    1628:	2f 91       	pop	r18
    162a:	0f 90       	pop	r0
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	0f 90       	pop	r0
    1630:	1f 90       	pop	r1
    1632:	18 95       	reti

00001634 <main>:
#define SREG   *((u8*)0x5F)

void tog(void* pin );

int main(void)
{
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62

	EXTI_enuInit( EXTI_AstrCnfg );
    163c:	87 e6       	ldi	r24, 0x67	; 103
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	0e 94 b2 07 	call	0xf64	; 0xf64 <EXTI_enuInit>
	Switch_enuInit(Switch_AstrSwitchState);
    1644:	80 e6       	ldi	r24, 0x60	; 96
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	0e 94 b3 04 	call	0x966	; 0x966 <Switch_enuInit>
	LED_enuInit( LED_AstrLedConfig );
    164c:	83 e6       	ldi	r24, 0x63	; 99
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	0e 94 8a 05 	call	0xb14	; 0xb14 <LED_enuInit>





	EXTI_enuCallBack(tog,&LED_AstrLedConfig[0] ,EXTI_0);
    1654:	8a e3       	ldi	r24, 0x3A	; 58
    1656:	9b e0       	ldi	r25, 0x0B	; 11
    1658:	23 e6       	ldi	r18, 0x63	; 99
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	b9 01       	movw	r22, r18
    165e:	40 e0       	ldi	r20, 0x00	; 0
    1660:	0e 94 3a 0a 	call	0x1474	; 0x1474 <EXTI_enuCallBack>


	SREG |=(1<<7);
    1664:	af e5       	ldi	r26, 0x5F	; 95
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	ef e5       	ldi	r30, 0x5F	; 95
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	80 68       	ori	r24, 0x80	; 128
    1670:	8c 93       	st	X, r24
    1672:	ff cf       	rjmp	.-2      	; 0x1672 <main+0x3e>

00001674 <tog>:
	}
}


void tog(void* pin )
{
    1674:	df 93       	push	r29
    1676:	cf 93       	push	r28
    1678:	00 d0       	rcall	.+0      	; 0x167a <tog+0x6>
    167a:	cd b7       	in	r28, 0x3d	; 61
    167c:	de b7       	in	r29, 0x3e	; 62
    167e:	9a 83       	std	Y+2, r25	; 0x02
    1680:	89 83       	std	Y+1, r24	; 0x01

	LED_enuLedToggle( (LED_t*)pin );
    1682:	89 81       	ldd	r24, Y+1	; 0x01
    1684:	9a 81       	ldd	r25, Y+2	; 0x02
    1686:	0e 94 91 07 	call	0xf22	; 0xf22 <LED_enuLedToggle>

}
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	cf 91       	pop	r28
    1690:	df 91       	pop	r29
    1692:	08 95       	ret

00001694 <_exit>:
    1694:	f8 94       	cli

00001696 <__stop_program>:
    1696:	ff cf       	rjmp	.-2      	; 0x1696 <__stop_program>
