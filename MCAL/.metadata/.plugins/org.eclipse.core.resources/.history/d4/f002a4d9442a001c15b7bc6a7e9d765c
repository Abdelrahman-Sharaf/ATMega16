/*
 * EXTI_prog.c
 *
 *  Created on: Oct 8, 2021
 *      Author: Shaban
 */

#include "E:\NTI\AVR\ATmeg16_Drivers\LIB\STD_TYPES.h"
#include "E:\NTI\AVR\ATmeg16_Drivers\LIB\errorStates.h"

#include "E:\NTI\AVR\ATmeg16_Drivers\MCAL\interrupt.h"

#include "EXTI_priv.h"
#include "EXTI_Cnfg.h"


/**********************************************************************/
/**********************************************************************/
static volatile void (*EXTI_ApfunINTFunc[EXTI_NUM])(void)= { NULL , NULL , NULL } ;


/**********************************************************************/
/**********************************************************************/
/**********************************************************************/
/**********************************************************************/
/**********************************************************************/
ES_t   EXTI_enuInit( EXTI_t*  Cpy_pstrEXTICnfg )
{
	ES_t Local_enuErrorState = ES_NOK ;


	if( Cpy_pstrEXTICnfg != NULL )
	{
		u8 Local_u8Iterator = 0;

		for( Local_u8Iterator = 0 ; Local_u8Iterator < EXTI_NUM ; Local_u8Iterator++ )
		{

			if( Cpy_pstrEXTICnfg[Local_u8Iterator].EXTI_u8State == EXTI_ACTIVE )
			{
				// Enable the appropriate interrupt in each iteration.
				switch(Local_u8Iterator)
				{
				case EXTI0 :
					MCUCR  &= ~( (EXTI_MASK_BIT<<ISC00) | (EXTI_MASK_BIT<<ISC01) );

					/*********************************************************
					 * Configure the interrupt0.                             *
					 *********************************************************/
					switch(Cpy_pstrEXTICnfg[Local_u8Iterator].EXTI_u8SenceLevel)
					{
					case EXTI_RISING_EDGE :
						MCUCR   |= (EXTI_MASK_BIT<<ISC00 )|(EXTI_MASK_BIT<<ISC01 );
						break;

					case EXTI_FALLING_EDGE :
						MCUCR   |=  (EXTI_MASK_BIT<<ISC01 );
						break;

					case  EXTI_LOGIC_CHANGE:
						MCUCR   |=  (EXTI_MASK_BIT<<ISC00 );
						break;

					case EXTI_LOW_LEVEL :
						break;

					default:
						Local_enuErrorState = ES_OUT_OF_RANGE ;


					}

					//Enable the ENT0.
					GICR |=(EXTI_MASK_BIT<<INT0);
					break;

					case EXTI1 :
						MCUCR  &= ~( (EXTI_MASK_BIT<<ISC10) | (EXTI_MASK_BIT<<ISC11) );

						switch(Cpy_pstrEXTICnfg[Local_u8Iterator].EXTI_u8SenceLevel)
						{
						case EXTI_RISING_EDGE :
							MCUCR   |= (EXTI_MASK_BIT<<ISC10 )|(EXTI_MASK_BIT<<ISC11 );
							break;

						case EXTI_FALLING_EDGE :
							MCUCR   |=  (EXTI_MASK_BIT<<ISC11 );
							break;

						case  EXTI_LOGIC_CHANGE:
							MCUCR   |=  (EXTI_MASK_BIT<<ISC10 );
							break;

						case EXTI_LOW_LEVEL :
							break;

						default:
							Local_enuErrorState = ES_OUT_OF_RANGE ;
						}

						//Enable the ENT1.
						GICR |=(EXTI_MASK_BIT<<INT1);
						break;

						case EXTI2 :
							MCUCSR  &= ~(EXTI_MASK_BIT<<ISC2) ;

							switch(Cpy_pstrEXTICnfg[Local_u8Iterator].EXTI_u8SenceLevel)
							{
							case EXTI_RISING_EDGE :
								MCUCSR   |= (EXTI_MASK_BIT<<ISC2 );
								break;

							case EXTI_FALLING_EDGE :
								break;

							default:
								Local_enuErrorState = ES_OUT_OF_RANGE ;
							}

							//Enable the ENT2.
							GICR |=(EXTI_MASK_BIT<<INT2);
							break;



							default:
								Local_enuErrorState = ES_OUT_OF_RANGE ;

				}//End of outer Switch case.

			}
			else if( Cpy_pstrEXTICnfg[Local_u8Iterator].EXTI_u8State ==EXTI_DEACTIVE )
			{
				//Do nothing.
			}
			else
			{

			}

		}

	}//Null Check.
	else
	{
		Local_enuErrorState = ES_NULL_POINTER ;
	}//Null Check.


	return Local_enuErrorState;
}


/**********************************************************************/
/**********************************************************************/
/**********************************************************************/
/**********************************************************************/
/**********************************************************************/
ES_t   EXTI_enuSetSenceMode( u8 Cpy_u8EXTI_ID  , u8 Cpy_u8SenceLevel )
{
	ES_t Local_enuErrorState = ES_NOK ;

	if(Cpy_u8EXTI_ID <= EXTI_NUM )
	{

		switch( Cpy_u8EXTI_ID )
		{
		/*****************************************************************
		 * Interrupt0  Sense Control Cases Handling.                     *
		 *****************************************************************/
		case EXTI0:
			MCUCR  &= ~( (EXTI_MASK_BIT<<ISC00) | (EXTI_MASK_BIT<<ISC01) );

			switch(Cpy_u8SenceLevel)
			{
			case EXTI_RISING_EDGE :
				MCUCR   |= (EXTI_MASK_BIT<<ISC00 )|(EXTI_MASK_BIT<<ISC01 );
				break;

			case EXTI_FALLING_EDGE :
				MCUCR   |=  (EXTI_MASK_BIT<<ISC01 );
				break;

			case  EXTI_LOGIC_CHANGE:
				MCUCR   |=  (EXTI_MASK_BIT<<ISC00 );
				break;

			case EXTI_LOW_LEVEL :
				break;

			default:
				Local_enuErrorState = ES_OUT_OF_RANGE ;

			}

			break ;



			/*****************************************************************
			 * Interrupt1  Sense Control Cases Handling.                     *
			 *****************************************************************/
			case EXTI1:
				MCUCR  &= ~( (EXTI_MASK_BIT<<ISC10) | (EXTI_MASK_BIT<<ISC11) );
				switch(Cpy_u8SenceLevel)
				{
				case EXTI_RISING_EDGE :
					MCUCR   |= (EXTI_MASK_BIT<<ISC10 )|(EXTI_MASK_BIT<<ISC11 );
					break;

				case EXTI_FALLING_EDGE :
					MCUCR   |=  (EXTI_MASK_BIT<<ISC11 );
					break;

				case  EXTI_LOGIC_CHANGE:
					MCUCR   |=  (EXTI_MASK_BIT<<ISC10 );
					break;

				case EXTI_LOW_LEVEL :
					break;

				default:
					Local_enuErrorState = ES_OUT_OF_RANGE ;

				}

				break ;

				/*****************************************************************
				 * Interrupt2  Sense Control Cases Handling.                     *
				 *****************************************************************/
				case EXTI2:

					switch(Cpy_u8SenceLevel)
					{
					case EXTI_RISING_EDGE :
						MCUCSR  |=(EXTI_MASK_BIT<<ISC2) ;
						break;

					case EXTI_FALLING_EDGE :
						MCUCSR  &=~(EXTI_MASK_BIT<<ISC2) ;
						break;

					default:
						Local_enuErrorState = ES_OUT_OF_RANGE ;

					}

					break ;



		}

		Local_enuErrorState = ES_OK;
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
	}

	return Local_enuErrorState;
}

/**********************************************************************/
/**********************************************************************/
/**********************************************************************/
/**********************************************************************/
/**********************************************************************/

ES_t   EXTI_enuEnableINT( u8 Cpy_u8EXTI_ID  )
{
	ES_t Local_enuErrorState = ES_NOK ;

	if( Cpy_u8EXTI_ID < EXTI_NUM)
	{
		switch(Cpy_u8EXTI_ID)
		{

		case EXTI0:

			GICR |= (EXTI_MASK_BIT<< INT0);
			break;

		case EXTI1:

			GICR |= (EXTI_MASK_BIT<< INT1);

			break;

		case EXTI2:

			GICR |= (EXTI_MASK_BIT<< INT2);

			break;

		}
		Local_enuErrorState = ES_OK  ;
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE ;
	}

	return Local_enuErrorState;
}


/**********************************************************************/
/**********************************************************************/
/**********************************************************************/
/**********************************************************************/
/**********************************************************************/
ES_t   EXTI_enuDisableINT(   u8 Cpy_u8EXTI_ID  )
{
	ES_t Local_enuErrorState = ES_NOK ;

	if( Cpy_u8EXTI_ID < EXTI_NUM)
	{
		switch(Cpy_u8EXTI_ID)
		{

		case EXTI0:

			GICR &=~(EXTI_MASK_BIT<< INT0);

			break;

		case EXTI1:

			GICR &=~(EXTI_MASK_BIT<< INT1);

			break;

		case EXTI2:

			GICR &=~(EXTI_MASK_BIT<< INT2);

			break;

		}
		Local_enuErrorState = ES_OK  ;
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE ;
	}

	return Local_enuErrorState;
}


/**********************************************************************/
/**********************************  ISR  *******************************/
ES_t   EXTI_enuCallBack( void (*Cpy_pfunAppFunc)(void)  ,  u8 Cpy_u8EXTI_ID  )
{
	ES_t Local_enuErrorState =ES_NOK ;

	if( (Cpy_pfunAppFunc !=NULL)&&(Cpy_u8EXTI_ID < EXTI_NUM) )
	{
		(*Cpy_pfunAppFunc[Cpy_u8EXTI_ID])()= Cpy_pfunAppFunc ;
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER ;
	}




	return Local_enuErrorState;
}

/**********************************************************************/
/**********************************  ISR  *******************************/
ISR(VECT_INT0)
{
	if (  pfunINTFunc[EXTI0] != NULL )
	{
		pfunINTFunc[EXTI0]();
	}
	else
	{
		//Do nothing.
	}


}


ISR(VECT_INT1)
{


}

ISR(VECT_INT2)
{


}
