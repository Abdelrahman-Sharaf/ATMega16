

ES_t ADC_enuPollingSys(u16* Cpy_pu8Value);
ES_t ADC_enuReadHighValue(u8* Cpy_pu16Value );
ES_t ADC_enuRead(u16* Cpy_pu16Value );
ES_t ADC_enuSelectChannel(u8 Cpy_u8ChannelID );
ES_t ADC_enuEnableTriggeringMode(u8 Cpy_u8TriggingSource);
ES_t ADC_enuDisableTriggeringMode(void);

ES_t ADC_enuEnable(void);
ES_t ADC_enuDisable(void);

ES_t ADC_enuEnableInterruptMode(void);
ES_t ADC_enuDisableInterruptMode(void);


ES_t ADC_enuCallBack( void(*Cpy_pfunAppFunc)(void*) , void* Cpy_pvidAppPara);









/*********************************************************/
/*********************************************************/



/*********************************************************/
/*********************************************************/
/*********************************************************/
/*********************************************************/


/*********************************************************/
/*********************************************************/
/*********************************************************/
/*********************************************************/
/*********************************************************/
ES_t ADC_enuReadHighValue(u8* Cpy_pu8Value )
{
	ES_t Local_enuErrorState = ES_NOK ;

#if      ADC_ADJ   ==   RIGHT_ADJ
	*Cpy_pu8Value = GET_HIGH_BITS_RIGHT_ADJ  ;


#elif    ADC_ADJ   ==   LEFT_ADJ
	*Cpy_pu8Value = ADCH ;

#else
#error "The ADC_ADJ mode that you Chosen is not Valid!!."
#endif

	return Local_enuErrorState   ;
}//End of



/*********************************************************/
/*********************************************************/
/*********************************************************/



/*********************************************************/
/*********************************************************/


/*********************************************************/
/*********************************************************/
/*********************************************************/


/*********************************************************/
/*********************************************************/
/*********************************************************/



/*********************************************************/
/*********************************************************/
/*********************************************************/
/*********************************************************/
/*********************************************************/

ES_t ADC_enuEnable(void)
{
	ES_t Local_enuErrorState = ES_NOK ;

	ADCSRA  |=(ADC_MSK_BIT<<ADATE);

	return Local_enuErrorState   ;
}//End of



/*********************************************************/
/*********************************************************/
/*********************************************************/
/*********************************************************/
/*********************************************************/

ES_t ADC_enuDisable(void)
{
	ES_t Local_enuErrorState = ES_NOK ;

	return Local_enuErrorState   ;
}//End of



/*********************************************************/
/*********************************************************/
/*********************************************************/
/*********************************************************/
/*********************************************************/


ES_t ADC_enuEnableInterruptMode(void)
{
	ES_t Local_enuErrorState = ES_NOK ;

	ADCSRA |=(ADC_MSK_BIT<<ADIE);



	return Local_enuErrorState   ;
}//End of



/*********************************************************/
/*********************************************************/
/*********************************************************/
/*********************************************************/
/*********************************************************/

ES_t ADC_enuDisableInterruptMode(void)
{
	ES_t Local_enuErrorState = ES_NOK ;

	ADCSRA &=~(ADC_MSK_BIT<<ADIE);

	return Local_enuErrorState   ;
}//End of



/*********************************************************/
/*********************************************************/


/*********************************************************/
/*********************************************************/
/*********************************************************/
/*********************************************************/
/*********************************************************/

ISR(VECT_ADC)
{
	if(ADC_pvidfunISRFunc != NULL )
	{
		(*ADC_pvidfunISRFunc)(ADC_pvidISRParameter);
	}
	else
	{
		//Do nothing.
	}

}

